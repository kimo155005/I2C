
I2C_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000441e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000441e  000044b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800096  00800096  000044e8  2**0
                  ALLOC
  3 .stab         00005850  00000000  00000000  000044e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000290d  00000000  00000000  00009d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c645  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f429  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000101d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000105c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_1>
       8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_2>
       c:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_12>
      34:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_13>
      38:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_14>
      3c:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__vector_15>
      40:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 20 	call	0x419a	; 0x419a <main>
      8a:	0c 94 0d 22 	jmp	0x441a	; 0x441a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 21 	jmp	0x43cc	; 0x43cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:
#include "WDT_Interface.h"
#include "WDT_Private.h"
#include "WDT_Config.h"

void WDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDT_WDTCR, WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	#elif WDT_PRESCALE == WDT_1024K_CYCLES
	CLEAR_BIT(WDT_WDTCR, WDTCR_WDP0);
	SET_BIT(WDT_WDTCR, WDTCR_WDP1);
	SET_BIT(WDT_WDTCR, WDTCR_WDP2);
    #elif WDT_PRESCALE == WDT_2048K_CYCLES
    SET_BIT(WDT_WDTCR, WDTCR_WDP0);
     b5c:	a1 e4       	ldi	r26, 0x41	; 65
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e1 e4       	ldi	r30, 0x41	; 65
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
    SET_BIT(WDT_WDTCR, WDTCR_WDP1);
     b6a:	a1 e4       	ldi	r26, 0x41	; 65
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e1 e4       	ldi	r30, 0x41	; 65
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
    SET_BIT(WDT_WDTCR, WDTCR_WDP2);
     b78:	a1 e4       	ldi	r26, 0x41	; 65
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e1 e4       	ldi	r30, 0x41	; 65
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
    #endif
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <WDT_voidReset>:

void WDT_voidReset(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
    __asm__ __volatile__ ("wdr");
     b94:	a8 95       	wdr
}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <WDT_voidDisable>:

void WDT_voidDisable(void)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
	WDT_WDTCR = (1 << WDTCR_WDPTOE) | (1 << WDTCR_WDE);
     ba4:	e1 e4       	ldi	r30, 0x41	; 65
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	88 e1       	ldi	r24, 0x18	; 24
     baa:	80 83       	st	Z, r24
    WDT_WDTCR = CLEAR_BIT(WDT_WDTCR, WDTCR_WDE);
     bac:	21 e4       	ldi	r18, 0x41	; 65
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	a1 e4       	ldi	r26, 0x41	; 65
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e1 e4       	ldi	r30, 0x41	; 65
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	8c 93       	st	X, r24
     bbe:	8c 91       	ld	r24, X
     bc0:	f9 01       	movw	r30, r18
     bc2:	80 83       	st	Z, r24
}
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <USART_voidInit>:
/* Function Name : USART_voidInit                                                               */
/* Description : Initilization of UART Mode                                                     */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidInit (void)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <USART_voidInit+0x6>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*          BAUD RATE Selection         */
/*--------------------------------------*/
    CLEAR_BIT(UBRRH_REG,UBRRH_URSEL);                    // access UBRRH to Configer the BAUD Rate
     bd4:	a0 e4       	ldi	r26, 0x40	; 64
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e0 e4       	ldi	r30, 0x40	; 64
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 77       	andi	r24, 0x7F	; 127
     be0:	8c 93       	st	X, r24
    u16 UBRR = 0 ;
     be2:	1a 82       	std	Y+2, r1	; 0x02
     be4:	19 82       	std	Y+1, r1	; 0x01
    #if( SPEED == NORMAL_SPEED )                         // U2X = 1  Normal Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 8UL ) ) - 1 ;
    #elif( SPEED == DOUBBLE_SPEED )                      // U2X = 0  Double Speed Transsmition
        UBRR = ( CPU_CLK / ( BAUD_RATE * 16UL ) ) - 1 ;
     be6:	83 e3       	ldi	r24, 0x33	; 51
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
    #endif                                                      // UBRR = 0b1111000000110011
    UBRRL_REG = (u8)(UBRR);                     // first 8 Bit  // (u8)UBRR = 0b00110011
     bee:	e9 e2       	ldi	r30, 0x29	; 41
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	80 83       	st	Z, r24
    UBRRH_REG = (u8)(UBRR >> 8);                // second 8 Bit // (UBRR >> 8 ) = 0b0000000011110000
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	89 2f       	mov	r24, r25
     c00:	99 27       	eor	r25, r25
     c02:	80 83       	st	Z, r24
                                                                // (u8)(UBRR >> 8 ) = 0b11110000

/*======================================*/
/*        USART Initilization           */
/*--------------------------------------*/
    SET_BIT(UCSRC_REG,UCSRC_URSEL);             // Select UCSRC_REG
     c04:	a0 e4       	ldi	r26, 0x40	; 64
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e0 e4       	ldi	r30, 0x40	; 64
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRC_REG,UCSRC_UMSE1);           // select Async Mode
     c12:	a0 e4       	ldi	r26, 0x40	; 64
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e0 e4       	ldi	r30, 0x40	; 64
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7b       	andi	r24, 0xBF	; 191
     c1e:	8c 93       	st	X, r24
/*======================================*/
/*         Select Parity Mode           */
/*--------------------------------------*/    
    #if ( Parity_Mode == DISABLE )              // Select Parity (Disable)
        CLEAR_BIT(UCSRC_REG,UCSRC_UPM0);
     c20:	a0 e4       	ldi	r26, 0x40	; 64
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7e       	andi	r24, 0xEF	; 239
     c2c:	8c 93       	st	X, r24
        CLEAR_BIT(UCSRC_REG,UCSRC_UPM1);
     c2e:	a0 e4       	ldi	r26, 0x40	; 64
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*          Select STOP BIT             */
/*--------------------------------------*/
    #if ( STOP_BIT == ONE )
    CLEAR_BIT(UCSRC_REG,UCSRC_USBS);             // select 1 Stop Bit
     c3c:	a0 e4       	ldi	r26, 0x40	; 64
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e0 e4       	ldi	r30, 0x40	; 64
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*       Select Character Size          */
/*--------------------------------------*/
    // Character size [8] Bit
      SET_BIT(UCSRC_REG,UCSRC_UCSZ0);
     c4a:	a0 e4       	ldi	r26, 0x40	; 64
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e0 e4       	ldi	r30, 0x40	; 64
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	8c 93       	st	X, r24
      SET_BIT(UCSRC_REG,UCSRC_UCSZ1);
     c58:	a0 e4       	ldi	r26, 0x40	; 64
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e0 e4       	ldi	r30, 0x40	; 64
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	84 60       	ori	r24, 0x04	; 4
     c64:	8c 93       	st	X, r24
    CLEAR_BIT(UCSRB_REG,UCSRB_UCSZ2);
     c66:	aa e2       	ldi	r26, 0x2A	; 42
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ea e2       	ldi	r30, 0x2A	; 42
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8b 7f       	andi	r24, 0xFB	; 251
     c72:	8c 93       	st	X, r24
/*======================================*/
/*          Enable RX & TX              */
/*--------------------------------------*/     
    SET_BIT(UCSRB_REG,UCSRB_TXEN);               // Enable TX 
     c74:	aa e2       	ldi	r26, 0x2A	; 42
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ea e2       	ldi	r30, 0x2A	; 42
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	88 60       	ori	r24, 0x08	; 8
     c80:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_RXEN);               // Enable RX 
     c82:	aa e2       	ldi	r26, 0x2A	; 42
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ea e2       	ldi	r30, 0x2A	; 42
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 61       	ori	r24, 0x10	; 16
     c8e:	8c 93       	st	X, r24
/*======================================*/
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <USART_voidSendData>:
/* Description : Function can Transmit Char                                                     */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidSendData (u8 Copy_u8Data)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Register is Empty.
    while ( (GET_BIT(UCSRA_REG,UCSRA_UDRE)) == 0 );
     ca6:	eb e2       	ldi	r30, 0x2B	; 43
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	80 72       	andi	r24, 0x20	; 32
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	b9 f3       	breq	.-18     	; 0xca6 <USART_voidSendData+0xc>
    // Transsmit Data.
    UDR_REG = Copy_u8Data ;
     cb8:	ec e2       	ldi	r30, 0x2C	; 44
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	80 83       	st	Z, r24
    /* Data Transsmition is Complete So The Flag of [UCSRA_TXC] is Raised */
    /* Then we Need Clear This Flag by SET ONE , To Next Transsmition     */
    SET_BIT(UCSRA_REG,UCSRA_TXC);
     cc0:	ab e2       	ldi	r26, 0x2B	; 43
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	eb e2       	ldi	r30, 0x2B	; 43
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	8c 93       	st	X, r24
}
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <USART_voidRecieveData>:
/* Description : Function can Recieve Data                                                      */ 
/* Fun. Argument1: *Copy_Pu8Data Pointer to { Recived Data }                                    */                                        
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void USART_voidRecieveData (u8 *Copy_Pu8Data)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <USART_voidRecieveData+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
    // Polling flag Data Recieve is Complete.
    while ( (GET_BIT(UCSRA_REG,UCSRA_RXC)) == 0 );
     ce4:	eb e2       	ldi	r30, 0x2B	; 43
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	dc f7       	brge	.-10     	; 0xce4 <USART_voidRecieveData+0xe>
    // Recieve Data in Passing Pointer.
    *Copy_Pu8Data = UDR_REG ;
     cee:	ec e2       	ldi	r30, 0x2C	; 44
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	80 83       	st	Z, r24
}
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <USART_voidAsyncSendData>:
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                               */
/* Fun. Argument2: *Copy_Pu8CallBackFunIndication_TXC {address of Call Back Application Function} */
/* Fun. Return : void                                                                             */
/**************************************************************************************************/
void USART_voidAsyncSendData ( u8 Copy_u8Data , void (*Copy_Pu8CallBackFunIndication_TXC)(void))
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <USART_voidAsyncSendData+0x6>
     d0a:	0f 92       	push	r0
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	7b 83       	std	Y+3, r23	; 0x03
     d14:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(UCSRB_REG,UCSRB_UDRIE);                              // Enable UDRIE Data Register Empty Interrupt Enable.
     d16:	aa e2       	ldi	r26, 0x2A	; 42
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ea e2       	ldi	r30, 0x2A	; 42
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 62       	ori	r24, 0x20	; 32
     d22:	8c 93       	st	X, r24
    SET_BIT(UCSRB_REG,UCSRB_TXCIE);                              // Enable TXCIE Transmitt Complete Interrupt Enable.( For Indication )
     d24:	aa e2       	ldi	r26, 0x2A	; 42
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea e2       	ldi	r30, 0x2A	; 42
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	8c 93       	st	X, r24
    Global_u8TXData = Copy_u8Data ;                              // Assign Data to Global Variable to use it in ISR Fun.
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	80 93 98 00 	sts	0x0098, r24
    Global_PF_Vector_15 = Copy_Pu8CallBackFunIndication_TXC ;    // Assign The pointer that contain adderss of App CallBack Fun to Global pointer to Call it in ISR Fun.
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	90 93 97 00 	sts	0x0097, r25
     d40:	80 93 96 00 	sts	0x0096, r24
}
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <USART_voidAsyncRecieveData>:
/* Description : Function can Transmit Data by Asyncrouns Function (ISR)                          */                                         
/* Fun. Argument1: *Copy_Pu8Data Pointer to { Recived Data }                                      */ 
/* Fun. Return : void                                                                             */
/**************************************************************************************************/
void USART_voidAsyncRecieveData (u8 *Copy_Pu8Data)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <USART_voidAsyncRecieveData+0x6>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(UCSRB_REG,UCSRB_RXCIE);            // Enable RXCIE Recieve Complete Interrupt Enable.
     d5e:	aa e2       	ldi	r26, 0x2A	; 42
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ea e2       	ldi	r30, 0x2A	; 42
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	8c 93       	st	X, r24
    Global_u8RXData = Copy_Pu8Data ;           // assign Passing Pointer to Global Pointer to Read Revived Data on This Passing Pointer in ISR (RXCIE)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	90 93 9a 00 	sts	0x009A, r25
     d74:	80 93 99 00 	sts	0x0099, r24
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_13>:
/*          This function for Recieve Data when INT Recieve Complete         */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_13 (void)    __attribute__((signal));
void __vector_13 (void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	8f 93       	push	r24
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
    *Global_u8RXData = UDR_REG ;        // Recieve Data in Passing Pointer.
     d9e:	e0 91 99 00 	lds	r30, 0x0099
     da2:	f0 91 9a 00 	lds	r31, 0x009A
     da6:	ac e2       	ldi	r26, 0x2C	; 44
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	8c 91       	ld	r24, X
     dac:	80 83       	st	Z, r24
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	8f 91       	pop	r24
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_14>:
/*          This function for Transmitt Data when INT Data Register is Empty */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_14 (void)    __attribute__((signal));
void __vector_14 (void)
{ 
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	8f 93       	push	r24
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
    UDR_REG = Global_u8TXData ;         // Transsmit Data.
     dde:	ec e2       	ldi	r30, 0x2C	; 44
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 91 98 00 	lds	r24, 0x0098
     de6:	80 83       	st	Z, r24
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	8f 91       	pop	r24
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_15>:
/*              This function for Indication to Tramsmittion Complete        */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_15 (void)    __attribute__((signal));
void __vector_15 (void)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
   Global_PF_Vector_15 () ; // Call App Function That Indicator to Transmittion Complete.
     e26:	e0 91 96 00 	lds	r30, 0x0096
     e2a:	f0 91 97 00 	lds	r31, 0x0097
     e2e:	09 95       	icall
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <TIMER1_voidInit>:
/* Function Name : TIMER1_voidInit                                                              */
/* Description : Initilization of TIMER1 with Specific Specks accordig to Gonfigration File.h   */                                          
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidInit (void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
          SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM11);
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    #elif (MODE == FAST_PWM_ICR1)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8e 7f       	andi	r24, 0xFE	; 254
     e6a:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	8c 93       	st	X, r24
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     e7a:	ae e4       	ldi	r26, 0x4E	; 78
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ee e4       	ldi	r30, 0x4E	; 78
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	88 60       	ori	r24, 0x08	; 8
     e86:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     e88:	ae e4       	ldi	r26, 0x4E	; 78
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ee e4       	ldi	r30, 0x4E	; 78
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	8c 93       	st	X, r24
/*----------------------------------------------*/
    #if (OC1A_MODE == DISCONNECTED)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    #elif ((OC1A_MODE == SETonTOP_CLEARonCOMPARE) || (OC1A_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     e96:	af e4       	ldi	r26, 0x4F	; 79
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ef e4       	ldi	r30, 0x4F	; 79
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     ea4:	af e4       	ldi	r26, 0x4F	; 79
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ef e4       	ldi	r30, 0x4F	; 79
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	8c 93       	st	X, r24
    #endif
/*==============================================*/
/*          OC1B Mode Selection                 */
/*----------------------------------------------*/
    #if (OC1B_MODE == DISCONNECTED)
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
     eb2:	af e4       	ldi	r26, 0x4F	; 79
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ef e4       	ldi	r30, 0x4F	; 79
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7e       	andi	r24, 0xEF	; 239
     ebe:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
     ec0:	af e4       	ldi	r26, 0x4F	; 79
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ef e4       	ldi	r30, 0x4F	; 79
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8f 7d       	andi	r24, 0xDF	; 223
     ecc:	8c 93       	st	X, r24

    #endif
/*======================================*/
/*     TIMER1 Prescaller Selection      */
/*--------------------------------------*/
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     ece:	ae e4       	ldi	r26, 0x4E	; 78
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 7f       	andi	r24, 0xF8	; 248
     eda:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS10);
     edc:	ae e4       	ldi	r26, 0x4E	; 78
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ee e4       	ldi	r30, 0x4E	; 78
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     eea:	ae e4       	ldi	r26, 0x4E	; 78
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ee e4       	ldi	r30, 0x4E	; 78
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
     ef8:	ae e4       	ldi	r26, 0x4E	; 78
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ee e4       	ldi	r30, 0x4E	; 78
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8b 7f       	andi	r24, 0xFB	; 251
     f04:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif
/*======================================*/
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <TIMER1_voidSetCallBack_OVF>:
/* Description : Call Back Function To Assign the address of OVF APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_OVF) { Address of OVF Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <TIMER1_voidSetCallBack_OVF+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T1 = Local_PointerToFunction_OVF ;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	90 93 9c 00 	sts	0x009C, r25
     f22:	80 93 9b 00 	sts	0x009B, r24
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	08 95       	ret

00000f30 <TIMER1_voidSetCallBack_CTC>:
/* Description : Call Back Function To Assign the address of CTC APP. Fun. at Global Pointer    */                                          
/* Fun. Argument1: (*Local_PointerToFunction_CTC) { Address of CTC Application Function }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetCallBack_CTC (void (*Local_PointerToFunction_CTC) (void))
{
     f30:	df 93       	push	r29
     f32:	cf 93       	push	r28
     f34:	00 d0       	rcall	.+0      	; 0xf36 <TIMER1_voidSetCallBack_CTC+0x6>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_T1 = Local_PointerToFunction_CTC ;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	90 93 9e 00 	sts	0x009E, r25
     f46:	80 93 9d 00 	sts	0x009D, r24
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <TIMER1_voidSetPreloadValue>:
/* Description : Set Preload Value in a Timer Register to Start Count From this Preload Value   */                                          
/* Fun. Argument1: Copy_u8PreloadValue  { from  0  To  255 }                                    */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidSetPreloadValue ( u16 Local_u16PreloadValue )
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <TIMER1_voidSetPreloadValue+0x6>
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
        TCNT1_REG = Local_u16PreloadValue ;
        Global_u16PreloadValue = Local_u16PreloadValue ;
    #else
        // No Action
    #endif
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIMER1_voidSetCompareMatchValue_T1A>:
/* Description : Set Compare Match Value in OCR1A Register To make Timer Over Flow at This Value */                                          
/* Fun. Argument1: Copy_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                   */
/* Fun. Return : void                                                                            */
/*************************************************************************************************/
void TIMER1_voidSetCompareMatchValue_T1A ( u16 Local_u16CompareMatchValue )
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <TIMER1_voidSetCompareMatchValue_T1A+0x6>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1A_REG = Local_u16CompareMatchValue ;
     f7a:	ea e4       	ldi	r30, 0x4A	; 74
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1A = Local_u16CompareMatchValue ;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	9a 81       	ldd	r25, Y+2	; 0x02
     f8a:	90 93 a2 00 	sts	0x00A2, r25
     f8e:	80 93 a1 00 	sts	0x00A1, r24
    #endif
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <TIMER1_voidSetCompareMatchValue_T1B>:
/* Description : Set Compare Match Value in OCR1B Register To make Timer Over Flow at This Value */                                          
/* Fun. Argument1: Copy_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                   */
/* Fun. Return : void                                                                            */
/*************************************************************************************************/
void TIMER1_voidSetCompareMatchValue_T1B ( u16 Local_u16CompareMatchValue )
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <TIMER1_voidSetCompareMatchValue_T1B+0x6>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1B_REG = Local_u16CompareMatchValue ;
     faa:	e8 e4       	ldi	r30, 0x48	; 72
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1B = Local_u16CompareMatchValue ;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	90 93 a4 00 	sts	0x00A4, r25
     fbe:	80 93 a3 00 	sts	0x00A3, r24
    #endif
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <TIMER1_voidBahaa_u16PWM_T1A>:
/* Fun. Argument1: Local_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Argument2: Copy_u16TopValue           { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidBahaa_u16PWM_T1A ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <TIMER1_voidBahaa_u16PWM_T1A+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <TIMER1_voidBahaa_u16PWM_T1A+0x8>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	7c 83       	std	Y+4, r23	; 0x04
     fde:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1A ( Copy_u16CompareMatchValue );
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <TIMER1_voidSetCompareMatchValue_T1A>
    ICR1_REG = Copy_u16TopValue ;
     fe8:	e6 e4       	ldi	r30, 0x46	; 70
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <TIMER1_voidBahaa_u16PWM_T1B>:
/* Fun. Argument1: Local_u8CompareMatchValue  { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Argument2: Copy_u16TopValue           { from  0  To  65,535 }  [16 BIT]                 */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void TIMER1_voidBahaa_u16PWM_T1B ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <TIMER1_voidBahaa_u16PWM_T1B+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <TIMER1_voidBahaa_u16PWM_T1B+0x8>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	7c 83       	std	Y+4, r23	; 0x04
    1014:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1B ( Copy_u16CompareMatchValue );
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <TIMER1_voidSetCompareMatchValue_T1B>
    ICR1_REG = Copy_u16TopValue ;
    101e:	e6 e4       	ldi	r30, 0x46	; 70
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <SPI_voidMasterInit>:
/* Function Name : SPI_voidMasterInit                                                           */
/* Description : Initilization of Master Mode                                                   */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidMasterInit (void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*        Master I/O PIN Mode           */
/*--------------------------------------*/
    DIO_voidSetPinDirection(PORTB,PIN5,OUTPUT);         // MOSI OUTPUT in Master Mode
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	65 e0       	ldi	r22, 0x05	; 5
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN6,INPUT);          // MISO INPUT  in Master Mode
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	66 e0       	ldi	r22, 0x06	; 6
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN7,OUTPUT);         // CLOK OUTPUT in Master Mode
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	67 e0       	ldi	r22, 0x07	; 7
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN4,INPUT);          // SS Slave Select INPUT in Master Mode if we have one Slave only
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	64 e0       	ldi	r22, 0x04	; 4
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidConfig_Pull_Up_Pin(PORTB,PIN4,ON);          // For Protection From Noise and Set 0 at SS in Slave to Activate this one Slave
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>
/*======================================*/
/*          Select Master  Mode         */
/*--------------------------------------*/    
        SET_BIT(SPCR_REG,SPCR_MSTR);
    1072:	ad e2       	ldi	r26, 0x2D	; 45
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ed e2       	ldi	r30, 0x2D	; 45
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 61       	ori	r24, 0x10	; 16
    107e:	8c 93       	st	X, r24
/*======================================*/
/*    Select MSB or LSB Send at First   */
/*--------------------------------------*/   
    #if ( DATA_ORDER == MSB_FIRST )
        CLEAR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    1080:	ad e2       	ldi	r26, 0x2D	; 45
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ed e2       	ldi	r30, 0x2D	; 45
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7d       	andi	r24, 0xDF	; 223
    108c:	8c 93       	st	X, r24
    #endif
/*===========================================*/
/*  Select Clock Polarity Raisinr or Falling */
/*-------------------------------------------*/     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLEAR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    108e:	ad e2       	ldi	r26, 0x2D	; 45
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ed e2       	ldi	r30, 0x2D	; 45
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	87 7f       	andi	r24, 0xF7	; 247
    109a:	8c 93       	st	X, r24
    #endif
/*================================================*/
/*  Select Clock Phase Sample or setup on Leading */
/*------------------------------------------------*/  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLEAR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    109c:	ad e2       	ldi	r26, 0x2D	; 45
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ed e2       	ldi	r30, 0x2D	; 45
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8b 7f       	andi	r24, 0xFB	; 251
    10a8:	8c 93       	st	X, r24
    #if(PRESCALER == PRESCALER_DIVISION_BY_4)
        CLEAR_BIT(SPCR_REG,SPCR_SPR0);
        CLEAR_BIT(SPCR_REG,SPCR_SPR1);
        CLEAR_BIT(SPSR_REG,SPSR_SPI2X);
    #elif(PRESCALER == PRESCALER_DIVISION_BY_16)
          SET_BIT(SPCR_REG,SPCR_SPR0);
    10aa:	ad e2       	ldi	r26, 0x2D	; 45
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	ed e2       	ldi	r30, 0x2D	; 45
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	8c 93       	st	X, r24
        CLEAR_BIT(SPCR_REG,SPCR_SPR1);
    10b8:	ad e2       	ldi	r26, 0x2D	; 45
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ed e2       	ldi	r30, 0x2D	; 45
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8d 7f       	andi	r24, 0xFD	; 253
    10c4:	8c 93       	st	X, r24
        CLEAR_BIT(SPSR_REG,SPSR_SPI2X);
    10c6:	ae e2       	ldi	r26, 0x2E	; 46
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ee e2       	ldi	r30, 0x2E	; 46
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8e 7f       	andi	r24, 0xFE	; 254
    10d2:	8c 93       	st	X, r24
          SET_BIT(SPSR_REG,SPSR_SPI2X);
    #endif
/*======================================*/
/*              Enable SPI              */
/*--------------------------------------*/        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    10d4:	ad e2       	ldi	r26, 0x2D	; 45
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ed e2       	ldi	r30, 0x2D	; 45
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 64       	ori	r24, 0x40	; 64
    10e0:	8c 93       	st	X, r24
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <SPI_voidSlaveInit>:
/* Function Name : SPI_voidSlaveInit                                                            */
/* Description : Initilization of Slave Mode                                                    */                                         
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidSlaveInit (void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
/*======================================*/
/*          Slave I/O PIN Mode          */
/*--------------------------------------*/
    DIO_voidSetPinDirection (PORTB,PIN5,INPUT);         // MOSI  INPUT in Slave Mode
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	65 e0       	ldi	r22, 0x05	; 5
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB,PIN6,OUTPUT);         // MISO OUTPUT in Slave Mode
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	66 e0       	ldi	r22, 0x06	; 6
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (PORTB,PIN7,INPUT);         // CLOK  INPUT in Slave Mode
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	67 e0       	ldi	r22, 0x07	; 7
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (PORTB,PIN4,INPUT);         // SS Slave Select INPUT in Slave Mode 
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	64 e0       	ldi	r22, 0x04	; 4
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinValue (PORTB,PIN4,LOW);               // Set LOW on SS Always if we have one Slave
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	64 e0       	ldi	r22, 0x04	; 4
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
/*======================================*/
/*          Select Slave  Mode          */
/*--------------------------------------*/    
    CLEAR_BIT(SPCR_REG,SPCR_MSTR);
    1122:	ad e2       	ldi	r26, 0x2D	; 45
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ed e2       	ldi	r30, 0x2D	; 45
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
/*======================================*/
/*    Select MSB or LSB Send at First   */              // Same With Master Configration.
/*--------------------------------------*/   
    #if ( DATA_ORDER == MSB_FIRST )
        CLEAR_BIT(SPCR_REG,SPCR_DORD);                  // select MSB to be send first
    1130:	ad e2       	ldi	r26, 0x2D	; 45
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ed e2       	ldi	r30, 0x2D	; 45
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8f 7d       	andi	r24, 0xDF	; 223
    113c:	8c 93       	st	X, r24
    #endif
/*===========================================*/
/*  Select Clock Polarity Raisinr or Falling */         // Same With Master Configration.
/*-------------------------------------------*/     
    #if ( CLK_POLARITY == RAISING_Leading_Edge )    
        CLEAR_BIT(SPCR_REG,SPCR_CPOL);                  // Select Raising at Leading edge & Falling at Tralling Edge
    113e:	ad e2       	ldi	r26, 0x2D	; 45
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ed e2       	ldi	r30, 0x2D	; 45
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	8c 93       	st	X, r24
    #endif
/*================================================*/
/*  Select Clock Phase Sample or setup on Leading */    // Same With Master Configration.
/*------------------------------------------------*/  
    #if ( CLK_PHASE == SAMPLE_Leading_Edge )     
        CLEAR_BIT(SPCR_REG,SPCR_CPHA);                  // Select Sampling at leadding edge & Setup at Trailling Edge
    114c:	ad e2       	ldi	r26, 0x2D	; 45
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ed e2       	ldi	r30, 0x2D	; 45
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8b 7f       	andi	r24, 0xFB	; 251
    1158:	8c 93       	st	X, r24
        SET_BIT(SPCR_REG,SPCR_CPHA);                    // Select Setup at leadding edge & Sampling at Trailling Edge
    #endif
/*======================================*/
/*              Enable SPI              */
/*--------------------------------------*/        
    SET_BIT(SPCR_REG,SPCR_SPE);                     // Enable SPI
    115a:	ad e2       	ldi	r26, 0x2D	; 45
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ed e2       	ldi	r30, 0x2D	; 45
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 64       	ori	r24, 0x40	; 64
    1166:	8c 93       	st	X, r24
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <SPI_u8TranceiveData>:
/* Description : Function can Transmit and Recieve Char                                         */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : unsigned Char u8  { Recieved Data }                                            */
/************************************************************************************************/
u8 SPI_u8TranceiveData (u8 Copy_u8Data)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	0f 92       	push	r0
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	89 83       	std	Y+1, r24	; 0x01
    /* Transmit */
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    117a:	ef e2       	ldi	r30, 0x2F	; 47
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1182:	ee e2       	ldi	r30, 0x2E	; 46
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	dc f7       	brge	.-10     	; 0x1182 <SPI_u8TranceiveData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    118c:	ae e2       	ldi	r26, 0x2E	; 46
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ee e2       	ldi	r30, 0x2E	; 46
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	80 68       	ori	r24, 0x80	; 128
    1198:	8c 93       	st	X, r24

    /* Recieve */
    return SPDR_REG ;
    119a:	ef e2       	ldi	r30, 0x2F	; 47
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z

}
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <SPI_voidTransmitData>:
/* Description : Function can Transmit Char                                                     */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTransmitData (u8 Copy_u8Data)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	89 83       	std	Y+1, r24	; 0x01
    // set the data to REG
    SPDR_REG = Copy_u8Data ;
    11b4:	ef e2       	ldi	r30, 0x2F	; 47
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	80 83       	st	Z, r24
    // polling
    while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    11bc:	ee e2       	ldi	r30, 0x2E	; 46
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	dc f7       	brge	.-10     	; 0x11bc <SPI_voidTransmitData+0x14>
    // clear the flag
    SET_BIT(SPSR_REG,SPSR_SPIF);
    11c6:	ae e2       	ldi	r26, 0x2E	; 46
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ee e2       	ldi	r30, 0x2E	; 46
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8c 93       	st	X, r24
}
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <SPI_voidRecieveData>:
/* Function Name : SPI_voidRecieveData                                                          */
/* Description : Function can Recieve Char                                                      */                                         
/* Fun. Return : unsigned character ( Data Recived )                                            */
/************************************************************************************************/
u8 SPI_voidRecieveData (void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    return SPDR_REG ;
    11e4:	ef e2       	ldi	r30, 0x2F	; 47
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <SPI_voidTranceiveString>:
/* Fun. Argument1: *Copy_Au8TransmitString { Address of array of Char we need Transmit it }     */
/* Fun. Argument2: *Copy_u8RecieveString   { Address of array of Char we need Recieve it }      */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <SPI_voidTranceiveString+0x6>
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <SPI_voidTranceiveString+0x8>
    11f8:	0f 92       	push	r0
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	7d 83       	std	Y+5, r23	; 0x05
    1204:	6c 83       	std	Y+4, r22	; 0x04
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	27 c0       	rjmp	.+78     	; 0x1258 <SPI_voidTranceiveString+0x68>
    {
        /* Send Data */
        // set the data to REG
        SPDR_REG = Copy_Au8TransmitString[iter] ;
    120a:	af e2       	ldi	r26, 0x2F	; 47
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	80 81       	ld	r24, Z
    1220:	8c 93       	st	X, r24
        // polling
        while( (GET_BIT(SPSR_REG,SPSR_SPIF)) == 0 );
    1222:	ee e2       	ldi	r30, 0x2E	; 46
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	88 23       	and	r24, r24
    122a:	dc f7       	brge	.-10     	; 0x1222 <SPI_voidTranceiveString+0x32>
        // clear the flag
        SET_BIT(SPSR_REG,SPSR_SPIF);
    122c:	ae e2       	ldi	r26, 0x2E	; 46
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ee e2       	ldi	r30, 0x2E	; 46
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	8c 93       	st	X, r24

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	dc 01       	movw	r26, r24
    1246:	a2 0f       	add	r26, r18
    1248:	b3 1f       	adc	r27, r19
    124a:	ef e2       	ldi	r30, 0x2F	; 47
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8c 93       	st	X, r24
/* Fun. Argument2: *Copy_u8RecieveString   { Address of array of Char we need Recieve it }      */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_voidTranceiveString (u8 *Copy_Au8TransmitString , u8 *Copy_u8RecieveString )
{
    for ( u8 iter=0 ; Copy_Au8TransmitString[iter] != '\0' ; iter++ )
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	fc 01       	movw	r30, r24
    1264:	e2 0f       	add	r30, r18
    1266:	f3 1f       	adc	r31, r19
    1268:	80 81       	ld	r24, Z
    126a:	88 23       	and	r24, r24
    126c:	71 f6       	brne	.-100    	; 0x120a <SPI_voidTranceiveString+0x1a>
        SET_BIT(SPSR_REG,SPSR_SPIF);

        /* Recieve Data */
        Copy_u8RecieveString[iter] = SPDR_REG ;
    }
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <SPI_u8AsynTranceiveData>:
/* Description : Function can Transmit and Recieve Data by Interrupt                            */                                         
/* Fun. Argument1: Copy_u8Data { Transsmited Data }                                             */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SPI_u8AsynTranceiveData (u8 Copy_u8Data)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	89 83       	std	Y+1, r24	; 0x01
 
    SET_BIT(SPCR_REG,SPCR_SPIE);            // Enable SPI Interrupt
    128a:	ad e2       	ldi	r26, 0x2D	; 45
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	ed e2       	ldi	r30, 0x2D	; 45
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8c 93       	st	X, r24
    /* Transmit */
    SPDR_REG = Copy_u8Data ;                // set the data to REG
    1298:	ef e2       	ldi	r30, 0x2F	; 47
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	80 83       	st	Z, r24
}
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <SPI_voidSetCallBack>:
/* Fun. Argument1:{ void (*LocalPointerToFunction) (u8 *Copy_u8RecivedData) }*/
/*                Pointer to function that = Address of application function */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void SPI_voidSetCallBack (  void (*Local_PointerToFunction) (u8 *Copy_u8RecivedData) )
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <SPI_voidSetCallBack+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 = Local_PointerToFunction ;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	90 93 a6 00 	sts	0x00A6, r25
    12be:	80 93 a5 00 	sts	0x00A5, r24
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <__vector_12>:
/* Description : ISR Prototype (position 12 on vector table SPI )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_12 (void)    __attribute__((signal));
void __vector_12 (void)
{
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <__vector_12+0x28>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8Data ;
    // Recieve Data
    Local_u8Data = SPDR_REG ;
    12fa:	ef e2       	ldi	r30, 0x2F	; 47
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	8b 83       	std	Y+3, r24	; 0x03

    u8 *Local_Pu8Data = &Local_u8Data ;
    1302:	ce 01       	movw	r24, r28
    1304:	03 96       	adiw	r24, 0x03	; 3
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    Global_PF_Vector_12 ( Local_Pu8Data );      // Call Back Application Function
    130a:	e0 91 a5 00 	lds	r30, 0x00A5
    130e:	f0 91 a6 00 	lds	r31, 0x00A6
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	09 95       	icall
    CLEAR_BIT(SPCR_REG,SPCR_SPIE);              // Disable SPI Interrupt
    1318:	ad e2       	ldi	r26, 0x2D	; 45
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	ed e2       	ldi	r30, 0x2D	; 45
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 77       	andi	r24, 0x7F	; 127
    1324:	8c 93       	st	X, r24
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <ICU_voidInit>:
/* Function Name : ICU_voidInit                                                                 */
/* Description   : Initilization of TIMER1 & ICU HW                                             */                                          
/* Fun. Return   : void                                                                         */
/************************************************************************************************/
void ICU_voidInit (void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    TIMER1_voidInit();
    135a:	0e 94 2b 07 	call	0xe56	; 0xe56 <TIMER1_voidInit>
/*=====================================================================*/
/*  TIMER1 Normal Mode Selection to use ICU to Calculate PWM Frequency */
/*---------------------------------------------------------------------*/
        /*       TIMER1 Normal Mode      */                             
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    135e:	af e4       	ldi	r26, 0x4F	; 79
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ef e4       	ldi	r30, 0x4F	; 79
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8e 7f       	andi	r24, 0xFE	; 254
    136a:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1A_REG,TCCR1A_WGM11);
    136c:	af e4       	ldi	r26, 0x4F	; 79
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ef e4       	ldi	r30, 0x4F	; 79
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8d 7f       	andi	r24, 0xFD	; 253
    1378:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
    137a:	ae e4       	ldi	r26, 0x4E	; 78
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ee e4       	ldi	r30, 0x4E	; 78
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	87 7f       	andi	r24, 0xF7	; 247
    1386:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_WGM13);
    1388:	ae e4       	ldi	r26, 0x4E	; 78
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ee e4       	ldi	r30, 0x4E	; 78
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 7e       	andi	r24, 0xEF	; 239
    1394:	8c 93       	st	X, r24

/*=====================================================================*/
/*                     TIMER1 Prescaller Selection                     */
/*---------------------------------------------------------------------*/
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 7f       	andi	r24, 0xF8	; 248
    13a2:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS10);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8e 7f       	andi	r24, 0xFE	; 254
    13b0:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
    13b2:	ae e4       	ldi	r26, 0x4E	; 78
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ee e4       	ldi	r30, 0x4E	; 78
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	82 60       	ori	r24, 0x02	; 2
    13be:	8c 93       	st	X, r24
        CLEAR_BIT(TCCR1B_REG,TCCR1B_CS12);
    13c0:	ae e4       	ldi	r26, 0x4E	; 78
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ee e4       	ldi	r30, 0x4E	; 78
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8b 7f       	andi	r24, 0xFB	; 251
    13cc:	8c 93       	st	X, r24
        #error  Wrong selection of Prescaller mode
    #endif
/*=====================================================================*/
/*  (ICES1) Input Capture Edge Select { Falling Edge , Raising Edge }  */
/*---------------------------------------------------------------------*/
    ICU_voidEdgeSelect ( RAISING_EDGE );        // Sense Raising Edge to start calculate time of Period Time from First Raising Ege to Second Raising Edge.
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	0e 94 02 0a 	call	0x1404	; 0x1404 <ICU_voidEdgeSelect>
/*=====================================================*/
/*     (TICIE) Enable Input Capture Unit Interrupt     */
/*-----------------------------------------------------*/
    SET_BIT(TIMSK_REG,TIMER_TIMSK_TICIE);              // Enable PIE of ICU    
    13d4:	a9 e5       	ldi	r26, 0x59	; 89
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e9 e5       	ldi	r30, 0x59	; 89
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 62       	ori	r24, 0x20	; 32
    13e0:	8c 93       	st	X, r24
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <ICU_voidDisableInterrupt>:
/* Function Name : ICU_voidDisableInterrupt                                                     */
/* Description   : Disable Input Capture Interrupt                                              */                                          
/* Fun. Return   : void                                                                         */
/************************************************************************************************/
void ICU_voidDisableInterrupt(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK_REG,TIMER_TIMSK_TICIE);
    13f0:	a9 e5       	ldi	r26, 0x59	; 89
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e9 e5       	ldi	r30, 0x59	; 89
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8f 7d       	andi	r24, 0xDF	; 223
    13fc:	8c 93       	st	X, r24
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <ICU_voidEdgeSelect>:
/* Description : Select Edge Sensing of ICP1 Input Capture Unit PIN                             */                                          
/* Fun. Argument1: Copy_u8EdgeSelect { FALLING_EDGE , RAISING_EDGE }                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void ICU_voidEdgeSelect ( u8 Copy_u8EdgeSelect )
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <ICU_voidEdgeSelect+0x6>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8EdgeSelect )
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3b 83       	std	Y+3, r19	; 0x03
    141a:	2a 83       	std	Y+2, r18	; 0x02
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	31 f0       	breq	.+12     	; 0x1430 <ICU_voidEdgeSelect+0x2c>
    1424:	2a 81       	ldd	r18, Y+2	; 0x02
    1426:	3b 81       	ldd	r19, Y+3	; 0x03
    1428:	21 30       	cpi	r18, 0x01	; 1
    142a:	31 05       	cpc	r19, r1
    142c:	49 f0       	breq	.+18     	; 0x1440 <ICU_voidEdgeSelect+0x3c>
    142e:	0f c0       	rjmp	.+30     	; 0x144e <ICU_voidEdgeSelect+0x4a>
    {
        case FALLING_EDGE :  CLEAR_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    1430:	ae e4       	ldi	r26, 0x4E	; 78
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ee e4       	ldi	r30, 0x4E	; 78
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8f 7b       	andi	r24, 0xBF	; 191
    143c:	8c 93       	st	X, r24
    143e:	07 c0       	rjmp	.+14     	; 0x144e <ICU_voidEdgeSelect+0x4a>
        case RAISING_EDGE :    SET_BIT(TCCR1B_REG,TCCR1B_ICES1);       break;
    1440:	ae e4       	ldi	r26, 0x4E	; 78
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ee e4       	ldi	r30, 0x4E	; 78
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 64       	ori	r24, 0x40	; 64
    144c:	8c 93       	st	X, r24
        default           :         break;
    }
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <ICU_u16GetReadICR1>:
/* Function Name : ICU_u16GetReadICR1                                                           */
/* Description   : Get Reading From ICR1 Register                                               */                                          
/* Fun. Return   : u16 ( Reading of TIMER1 REG from 0 To 65536 )                                */
/************************************************************************************************/
u16 ICU_u16GetReadICR1 (void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG ;
    1462:	e6 e4       	ldi	r30, 0x46	; 70
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
}
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <ICU_SetCallBackFun>:
/* Description  : Call Back Function                                                            */                                          
/* Fun. Argument1: void (*LocalPF_vector_6) (void) { address of App CallBack Fun ICU_HW }       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void ICU_SetCallBackFun ( void (*LocalPF_vector_6) (void) )
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <ICU_SetCallBackFun+0x6>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
	GlobalPF_vector_6 = LocalPF_vector_6 ;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	90 93 a8 00 	sts	0x00A8, r25
    1486:	80 93 a7 00 	sts	0x00A7, r24
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <__vector_6>:
/* Fun. Return : void                                                        */
/*****************************************************************************/
/*  ISR (ICU)  */
void __vector_6 (void)    __attribute__((signal));
void __vector_6 (void)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	if (GlobalPF_vector_6 != NULL )
    14be:	80 91 a7 00 	lds	r24, 0x00A7
    14c2:	90 91 a8 00 	lds	r25, 0x00A8
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_6+0x40>
	{
		GlobalPF_vector_6();
    14ca:	e0 91 a7 00 	lds	r30, 0x00A7
    14ce:	f0 91 a8 00 	lds	r31, 0x00A8
    14d2:	09 95       	icall
	}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <I2C_voidMasterInit>:
/*===========================================================================================================================*/
/*=================================================  [ Master Functions ]   =================================================*/
/*===========================================================================================================================*/
/* Set Master Address to 0 if master will not be addressed */
void I2C_voidMasterInit (u8 Copy_u8MasterAddress)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	89 83       	std	Y+1, r24	; 0x01
    Enable_ACK ();           // Enable ACK  
    1506:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Enable_ACK>
    /*  TWBR = (( CPU Clock frequency / SCL frequency ) - 16) / ( 2 * 4^TWPS)        */ 
    /*  TWBR = (( 8000000 / 400000 ) - 16) / ( 2 * 4^(0) )                           */ 
    /*  TWBR = ( 20 - 16 ) / ( 2 * 1 ) = (4) / (2)                                   */
    /*  TWBR = 2                                                                     */
    /*===============================================================================*/
    TWBR_REG = 2 ;                        // Set TWBR with vale => 400 KHz ( TWBR = 2 )
    150a:	e0 e2       	ldi	r30, 0x20	; 32
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	80 83       	st	Z, r24
    // Set prescaller == 1 (clr TWSR 0,1)
    CLEAR_BIT(TWSR_REG,TWSR_TWPS0);
    1512:	a1 e2       	ldi	r26, 0x21	; 33
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8e 7f       	andi	r24, 0xFE	; 254
    151e:	8c 93       	st	X, r24
    CLEAR_BIT(TWSR_REG,TWSR_TWPS1);
    1520:	a1 e2       	ldi	r26, 0x21	; 33
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e1 e2       	ldi	r30, 0x21	; 33
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8d 7f       	andi	r24, 0xFD	; 253
    152c:	8c 93       	st	X, r24
    /*Check if the master node will be addressed or not*/
	if( Copy_u8MasterAddress == 0x00 )
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	29 f0       	breq	.+10     	; 0x153e <I2C_voidMasterInit+0x44>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/
		TWAR_REG = (Copy_u8MasterAddress << 1);
    1534:	e2 e2       	ldi	r30, 0x22	; 34
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	88 0f       	add	r24, r24
    153c:	80 83       	st	Z, r24
	}
    // Enable I2C  ( set TWCR 2 )
    SET_BIT(TWCR_REG,TWCR_TWEN);
    153e:	a6 e5       	ldi	r26, 0x56	; 86
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e6 e5       	ldi	r30, 0x56	; 86
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8c 93       	st	X, r24
}
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <I2C_Master_u8StartCondition>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8StartCondition (void)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    155e:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                              // Start condition ( Set TWCR 5)
    1560:	a6 e5       	ldi	r26, 0x56	; 86
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 e5       	ldi	r30, 0x56	; 86
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 62       	ori	r24, 0x20	; 32
    156c:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                              // Clear flag ( Set TWCR 7 )
    156e:	a6 e5       	ldi	r26, 0x56	; 86
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e6 e5       	ldi	r30, 0x56	; 86
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 68       	ori	r24, 0x80	; 128
    157a:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );            // Wait for flag ( TWCR 7 == 0 )
    157c:	e6 e5       	ldi	r30, 0x56	; 86
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 23       	and	r24, r24
    1584:	dc f7       	brge	.-10     	; 0x157c <I2C_Master_u8StartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_START_ACK )    // Check status code == start condition ( TWSR & 0xf8 ) == 0x08
    1586:	e1 e2       	ldi	r30, 0x21	; 33
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	88 7f       	andi	r24, 0xF8	; 248
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	91 05       	cpc	r25, r1
    1598:	11 f0       	breq	.+4      	; 0x159e <I2C_Master_u8StartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_StartCond_ACK ; 
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    159e:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <I2C_Master_u8ReStartCondition>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReStartCondition (void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    15b2:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWSTA);                                   // Start condition ( Set TWCR 5)
    15b4:	a6 e5       	ldi	r26, 0x56	; 86
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e6 e5       	ldi	r30, 0x56	; 86
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    15c2:	a6 e5       	ldi	r26, 0x56	; 86
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e6 e5       	ldi	r30, 0x56	; 86
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    15d0:	e6 e5       	ldi	r30, 0x56	; 86
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	88 23       	and	r24, r24
    15d8:	dc f7       	brge	.-10     	; 0x15d0 <I2C_Master_u8ReStartCondition+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_REP_START_ACK )     // Check status code == Repeat condition ( TWSR & 0xf8 ) == 0x10 
    15da:	e1 e2       	ldi	r30, 0x21	; 33
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 7f       	andi	r24, 0xF8	; 248
    15e6:	90 70       	andi	r25, 0x00	; 0
    15e8:	80 31       	cpi	r24, 0x10	; 16
    15ea:	91 05       	cpc	r25, r1
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <I2C_Master_u8ReStartCondition+0x4a>
    {
        Local_Error = I2C_Error_Master_ReStartCond_ACK ; 
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <I2C_Master_u8SendSLA_Write_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Write_ACK (u8 Copy_u8SlaveAddress)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <I2C_Master_u8SendSLA_Write_ACK+0x6>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1608:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                           // Write 7 bits slave address ( TWDR == address<<1 )
    160a:	e3 e2       	ldi	r30, 0x23	; 35
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	88 0f       	add	r24, r24
    1612:	80 83       	st	Z, r24
    CLEAR_BIT(TWDR_REG,TWDR_TWD0);                                  // Write condition ( CLEAR TWDR 0 )
    1614:	a3 e2       	ldi	r26, 0x23	; 35
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e3 e2       	ldi	r30, 0x23	; 35
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	8e 7f       	andi	r24, 0xFE	; 254
    1620:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                 // Clear start condition bit ( TWCR 5 ) - for sure
    1622:	a6 e5       	ldi	r26, 0x56	; 86
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e6 e5       	ldi	r30, 0x56	; 86
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7d       	andi	r24, 0xDF	; 223
    162e:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                   // Clear flag ( Set TWCR 7 )
    1630:	a6 e5       	ldi	r26, 0x56	; 86
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e6 e5       	ldi	r30, 0x56	; 86
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                 // Wait for flag ( TWCR 7 == 0 )
    163e:	e6 e5       	ldi	r30, 0x56	; 86
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 23       	and	r24, r24
    1646:	dc f7       	brge	.-10     	; 0x163e <I2C_Master_u8SendSLA_Write_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_ACK )     // Check status code == SLA + Write + ACK == (0x18)
    1648:	e1 e2       	ldi	r30, 0x21	; 33
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	88 7f       	andi	r24, 0xF8	; 248
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	88 31       	cpi	r24, 0x18	; 24
    1658:	91 05       	cpc	r25, r1
    165a:	11 f0       	breq	.+4      	; 0x1660 <I2C_Master_u8SendSLA_Write_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_ACK ; 
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <I2C_Master_u8SendSLA_Write_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Write_NOTACK (u8 Copy_u8SlaveAddress)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <I2C_Master_u8SendSLA_Write_NOTACK+0x6>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1678:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK
    167a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    167e:	e3 e2       	ldi	r30, 0x23	; 35
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	88 0f       	add	r24, r24
    1686:	80 83       	st	Z, r24
    CLEAR_BIT(TWDR_REG,TWDR_TWD0);                                     // Write condition ( CLEAR TWDR 0 )
    1688:	a3 e2       	ldi	r26, 0x23	; 35
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e3 e2       	ldi	r30, 0x23	; 35
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1696:	a6 e5       	ldi	r26, 0x56	; 86
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e6 e5       	ldi	r30, 0x56	; 86
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7d       	andi	r24, 0xDF	; 223
    16a2:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    16a4:	a6 e5       	ldi	r26, 0x56	; 86
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e6 e5       	ldi	r30, 0x56	; 86
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    16b2:	e6 e5       	ldi	r30, 0x56	; 86
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 23       	and	r24, r24
    16ba:	dc f7       	brge	.-10     	; 0x16b2 <I2C_Master_u8SendSLA_Write_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Write_NOTACK )     // Check status code == SLA + Write + NOTACK == (0x20)
    16bc:	e1 e2       	ldi	r30, 0x21	; 33
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	88 7f       	andi	r24, 0xF8	; 248
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	80 32       	cpi	r24, 0x20	; 32
    16cc:	91 05       	cpc	r25, r1
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <I2C_Master_u8SendSLA_Write_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_NOTACK ; 
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <I2C_Master_u8SendSLA_Read_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Read_ACK (u8 Copy_u8SlaveAddress)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <I2C_Master_u8SendSLA_Read_ACK+0x6>
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    16ee:	e3 e2       	ldi	r30, 0x23	; 35
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	88 0f       	add	r24, r24
    16f6:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    16f8:	a3 e2       	ldi	r26, 0x23	; 35
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e3 e2       	ldi	r30, 0x23	; 35
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    1706:	a6 e5       	ldi	r26, 0x56	; 86
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e6 e5       	ldi	r30, 0x56	; 86
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7d       	andi	r24, 0xDF	; 223
    1712:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1714:	a6 e5       	ldi	r26, 0x56	; 86
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e6 e5       	ldi	r30, 0x56	; 86
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 68       	ori	r24, 0x80	; 128
    1720:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1722:	e6 e5       	ldi	r30, 0x56	; 86
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	88 23       	and	r24, r24
    172a:	dc f7       	brge	.-10     	; 0x1722 <I2C_Master_u8SendSLA_Read_ACK+0x42>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_ACK )         // Check status code == SLA + Read + ACK == (0x40)
    172c:	e1 e2       	ldi	r30, 0x21	; 33
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	88 7f       	andi	r24, 0xF8	; 248
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	80 34       	cpi	r24, 0x40	; 64
    173c:	91 05       	cpc	r25, r1
    173e:	11 f0       	breq	.+4      	; 0x1744 <I2C_Master_u8SendSLA_Read_ACK+0x64>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_ACK ; 
    1740:	85 e0       	ldi	r24, 0x05	; 5
    1742:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1744:	89 81       	ldd	r24, Y+1	; 0x01
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <I2C_Master_u8SendSLA_Read_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8SendSLA_Read_NOTACK (u8 Copy_u8SlaveAddress)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <I2C_Master_u8SendSLA_Read_NOTACK+0x6>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    175c:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    175e:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;                              // Write 7 bits slave address ( TWDR == address<<1 )
    1762:	e3 e2       	ldi	r30, 0x23	; 35
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	88 0f       	add	r24, r24
    176a:	80 83       	st	Z, r24
    SET_BIT(TWDR_REG,TWDR_TWD0);                                       // Read condition ( SET TWDR 0 )
    176c:	a3 e2       	ldi	r26, 0x23	; 35
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e3 e2       	ldi	r30, 0x23	; 35
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	8c 93       	st	X, r24
    CLEAR_BIT(TWCR_REG,TWCR_TWSTA);                                    // Clear start condition bit ( TWCR 5 ) - for sure
    177a:	a6 e5       	ldi	r26, 0x56	; 86
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e6 e5       	ldi	r30, 0x56	; 86
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1788:	a6 e5       	ldi	r26, 0x56	; 86
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 68       	ori	r24, 0x80	; 128
    1794:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    1796:	e6 e5       	ldi	r30, 0x56	; 86
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	88 23       	and	r24, r24
    179e:	dc f7       	brge	.-10     	; 0x1796 <I2C_Master_u8SendSLA_Read_NOTACK+0x46>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_NOTACK )      // Check status code == SLA + Read + NOTACK == (0x48)
    17a0:	e1 e2       	ldi	r30, 0x21	; 33
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	88 7f       	andi	r24, 0xF8	; 248
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	88 34       	cpi	r24, 0x48	; 72
    17b0:	91 05       	cpc	r25, r1
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <I2C_Master_u8SendSLA_Read_NOTACK+0x68>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_NOTACK ; 
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <I2C_Master_u8WriteDataByte_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8WriteDataByte_ACK (u8 Copy_u8WriteData)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <I2C_Master_u8WriteDataByte_ACK+0x6>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    17d0:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    17d2:	e3 e2       	ldi	r30, 0x23	; 35
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    17da:	a6 e5       	ldi	r26, 0x56	; 86
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e6 e5       	ldi	r30, 0x56	; 86
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 68       	ori	r24, 0x80	; 128
    17e6:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    17e8:	e6 e5       	ldi	r30, 0x56	; 86
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	88 23       	and	r24, r24
    17f0:	dc f7       	brge	.-10     	; 0x17e8 <I2C_Master_u8WriteDataByte_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_ACK )      // Check status code == Master Send Data + ACK == (0x28)
    17f2:	e1 e2       	ldi	r30, 0x21	; 33
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	88 7f       	andi	r24, 0xF8	; 248
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	88 32       	cpi	r24, 0x28	; 40
    1802:	91 05       	cpc	r25, r1
    1804:	11 f0       	breq	.+4      	; 0x180a <I2C_Master_u8WriteDataByte_ACK+0x46>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_ACK ; 
    1806:	87 e0       	ldi	r24, 0x07	; 7
    1808:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <I2C_Master_u8WriteDataByte_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8WriteDataByte_NOTACK (u8 Copy_u8WriteData)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <I2C_Master_u8WriteDataByte_NOTACK+0x6>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1822:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    1824:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    TWDR_REG = Copy_u8WriteData ;                                      // Write data in TWDR
    1828:	e3 e2       	ldi	r30, 0x23	; 35
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    1830:	a6 e5       	ldi	r26, 0x56	; 86
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e6 e5       	ldi	r30, 0x56	; 86
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    183e:	e6 e5       	ldi	r30, 0x56	; 86
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	dc f7       	brge	.-10     	; 0x183e <I2C_Master_u8WriteDataByte_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_WR_DataByte_NOTACK )   // Check status code == Master Send Data + NOTACK == (0x30)
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	88 7f       	andi	r24, 0xF8	; 248
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	80 33       	cpi	r24, 0x30	; 48
    1858:	91 05       	cpc	r25, r1
    185a:	11 f0       	breq	.+4      	; 0x1860 <I2C_Master_u8WriteDataByte_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_NOTACK ; 
    185c:	88 e0       	ldi	r24, 0x08	; 8
    185e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <I2C_Master_u8ReadDataByte_ACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReadDataByte_ACK (u8 *Copy_Pu8ReadData)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <I2C_Master_u8ReadDataByte_ACK+0x6>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	9b 83       	std	Y+3, r25	; 0x03
    187a:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    187c:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    187e:	a6 e5       	ldi	r26, 0x56	; 86
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e6 e5       	ldi	r30, 0x56	; 86
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 68       	ori	r24, 0x80	; 128
    188a:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    188c:	e6 e5       	ldi	r30, 0x56	; 86
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	dc f7       	brge	.-10     	; 0x188c <I2C_Master_u8ReadDataByte_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_ACK )      // Check status code == Master Read Data + ACK == (0x50)
    1896:	e1 e2       	ldi	r30, 0x21	; 33
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	88 7f       	andi	r24, 0xF8	; 248
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	80 35       	cpi	r24, 0x50	; 80
    18a6:	91 05       	cpc	r25, r1
    18a8:	11 f0       	breq	.+4      	; 0x18ae <I2C_Master_u8ReadDataByte_ACK+0x42>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_ACK ; 
    18aa:	89 e0       	ldi	r24, 0x09	; 9
    18ac:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    18ae:	e3 e2       	ldi	r30, 0x23	; 35
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	ea 81       	ldd	r30, Y+2	; 0x02
    18b6:	fb 81       	ldd	r31, Y+3	; 0x03
    18b8:	80 83       	st	Z, r24
    return Local_Error ;
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <I2C_Master_u8ReadDataByte_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_Master_u8ReadDataByte_NOTACK (u8 *Copy_Pu8ReadData)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <I2C_Master_u8ReadDataByte_NOTACK+0x6>
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	9b 83       	std	Y+3, r25	; 0x03
    18d6:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    18d8:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                    // Disable ACK 
    18da:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                      // Clear flag ( Set TWCR 7 )
    18de:	a6 e5       	ldi	r26, 0x56	; 86
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e6 e5       	ldi	r30, 0x56	; 86
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                    // Wait for flag ( TWCR 7 == 0 )
    18ec:	e6 e5       	ldi	r30, 0x56	; 86
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 23       	and	r24, r24
    18f4:	dc f7       	brge	.-10     	; 0x18ec <I2C_Master_u8ReadDataByte_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_RD_DataByte_NOTACK )   // Check status code == Master Read Data + NOTACK == (0x58)
    18f6:	e1 e2       	ldi	r30, 0x21	; 33
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	88 7f       	andi	r24, 0xF8	; 248
    1902:	90 70       	andi	r25, 0x00	; 0
    1904:	88 35       	cpi	r24, 0x58	; 88
    1906:	91 05       	cpc	r25, r1
    1908:	11 f0       	breq	.+4      	; 0x190e <I2C_Master_u8ReadDataByte_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_NOTACK ; 
    190a:	8a e0       	ldi	r24, 0x0A	; 10
    190c:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8ReadData = TWDR_REG ;                                     // Read Data From Reg TWDR
    190e:	e3 e2       	ldi	r30, 0x23	; 35
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	ea 81       	ldd	r30, Y+2	; 0x02
    1916:	fb 81       	ldd	r31, Y+3	; 0x03
    1918:	80 83       	st	Z, r24
    return Local_Error ;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <I2C_Master_voidStopCondition>:
/*===========================================================================================================================*/
void I2C_Master_voidStopCondition (void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TWCR_REG,TWCR_TWSTO);               // Stop condition ( Set TWCR 4 )
    1930:	a6 e5       	ldi	r26, 0x56	; 86
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e6 e5       	ldi	r30, 0x56	; 86
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	8c 93       	st	X, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);               // Clear flag ( Set TWCR 7 )  
    193e:	a6 e5       	ldi	r26, 0x56	; 86
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e6 e5       	ldi	r30, 0x56	; 86
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <I2C_voidSlaveInit>:
/*===========================================================================================================================*/
/*=================================================   [ Slave Functions ]   =================================================*/
/*===========================================================================================================================*/
/*===========================================================================================================================*/
void I2C_voidSlaveInit (u8 Copy_u8SlaveAddress)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	0f 92       	push	r0
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
    TWAR_REG = Copy_u8SlaveAddress << 1 ;       // Set slave address in ( TWAR = address<<1 )
    195e:	e2 e2       	ldi	r30, 0x22	; 34
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 0f       	add	r24, r24
    1966:	80 83       	st	Z, r24
    Enable_ACK();                               // Enable ACK  ( set TWCR 6 )
    1968:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Enable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWEN);                // Enable I2C  ( set TWCR 2 )
    196c:	a6 e5       	ldi	r26, 0x56	; 86
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e6 e5       	ldi	r30, 0x56	; 86
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	84 60       	ori	r24, 0x04	; 4
    1978:	8c 93       	st	X, r24
}
    197a:	0f 90       	pop	r0
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK (void)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	0f 92       	push	r0
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    198c:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    198e:	a6 e5       	ldi	r26, 0x56	; 86
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e6 e5       	ldi	r30, 0x56	; 86
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 68       	ori	r24, 0x80	; 128
    199a:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    199c:	e6 e5       	ldi	r30, 0x56	; 86
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 23       	and	r24, r24
    19a4:	dc f7       	brge	.-10     	; 0x199c <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Write_Recieved_ACK )   // Check status code == Own Slave Address + Write + ACK == (0x60)
    19a6:	e1 e2       	ldi	r30, 0x21	; 33
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	88 7f       	andi	r24, 0xF8	; 248
    19b2:	90 70       	andi	r25, 0x00	; 0
    19b4:	80 36       	cpi	r24, 0x60	; 96
    19b6:	91 05       	cpc	r25, r1
    19b8:	11 f0       	breq	.+4      	; 0x19be <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Write_ACK ; 
    19ba:	8b e0       	ldi	r24, 0x0B	; 11
    19bc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK (void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    19d2:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    19d4:	a6 e5       	ldi	r26, 0x56	; 86
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e6 e5       	ldi	r30, 0x56	; 86
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 68       	ori	r24, 0x80	; 128
    19e0:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    19e2:	e6 e5       	ldi	r30, 0x56	; 86
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 23       	and	r24, r24
    19ea:	dc f7       	brge	.-10     	; 0x19e2 <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x1a>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_OwnSLA_Read_Recieved_ACK )    // Check status code == Own Slave Address + Read + ACK == (0xA8)
    19ec:	e1 e2       	ldi	r30, 0x21	; 33
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 7f       	andi	r24, 0xF8	; 248
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	88 3a       	cpi	r24, 0xA8	; 168
    19fc:	91 05       	cpc	r25, r1
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <I2C_SLAVE_u8OwnSLA_Read_Recieved_ACK+0x3c>
    {
        Local_Error = I2C_Error_Slave_OwnSLA_Read_ACK ; 
    1a00:	8c e0       	ldi	r24, 0x0C	; 12
    1a02:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <I2C_SLAVE_u8DataByteRecieved_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteRecieved_ACK (u8 *Copy_Pu8RecievedData)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <I2C_SLAVE_u8DataByteRecieved_ACK+0x6>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1a20:	a6 e5       	ldi	r26, 0x56	; 86
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e6 e5       	ldi	r30, 0x56	; 86
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 68       	ori	r24, 0x80	; 128
    1a2c:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1a2e:	e6 e5       	ldi	r30, 0x56	; 86
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	88 23       	and	r24, r24
    1a36:	dc f7       	brge	.-10     	; 0x1a2e <I2C_SLAVE_u8DataByteRecieved_ACK+0x20>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_ACK )       // Check status code == Data Byte Recived + ACK  == (0x80)
    1a38:	e1 e2       	ldi	r30, 0x21	; 33
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	88 7f       	andi	r24, 0xF8	; 248
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	80 38       	cpi	r24, 0x80	; 128
    1a48:	91 05       	cpc	r25, r1
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <I2C_SLAVE_u8DataByteRecieved_ACK+0x42>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_ACK ; 
    1a4c:	8d e0       	ldi	r24, 0x0D	; 13
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                       // Read Data From Reg TWDR 
    1a50:	e3 e2       	ldi	r30, 0x23	; 35
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	ea 81       	ldd	r30, Y+2	; 0x02
    1a58:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5a:	80 83       	st	Z, r24
    return Local_Error ;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <I2C_SLAVE_u8DataByteRecieved_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteRecieved_NOTACK (u8 *Copy_Pu8RecievedData)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x6>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	9b 83       	std	Y+3, r25	; 0x03
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;    
    1a7a:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    1a7c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    1a80:	a6 e5       	ldi	r26, 0x56	; 86
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    1a8e:	e6 e5       	ldi	r30, 0x56	; 86
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 23       	and	r24, r24
    1a96:	dc f7       	brge	.-10     	; 0x1a8e <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Recieved_NOTACK )       // Check status code == Data Byte Recived + NOTACK  == (0x88)
    1a98:	e1 e2       	ldi	r30, 0x21	; 33
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 2f       	mov	r24, r24
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	90 70       	andi	r25, 0x00	; 0
    1aa6:	88 38       	cpi	r24, 0x88	; 136
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	11 f0       	breq	.+4      	; 0x1ab0 <I2C_SLAVE_u8DataByteRecieved_NOTACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteRecieved_NOTACK ; 
    1aac:	8e e0       	ldi	r24, 0x0E	; 14
    1aae:	89 83       	std	Y+1, r24	; 0x01
    }
    *Copy_Pu8RecievedData = TWDR_REG ;                                          // Read Data From Reg TWDR
    1ab0:	e3 e2       	ldi	r30, 0x23	; 35
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aba:	80 83       	st	Z, r24
    return Local_Error ;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <I2C_SLAVE_u8DataByteTransmit_ACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteTransmit_ACK (u8 Copy_Pu8TransmitData)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <I2C_SLAVE_u8DataByteTransmit_ACK+0x6>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    TWDR_REG =  Copy_Pu8TransmitData ;                                       // Write Data in Reg TWDR 
    1ad8:	e3 e2       	ldi	r30, 0x23	; 35
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                            // Clear flag ( Set TWCR 7 )
    1ae0:	a6 e5       	ldi	r26, 0x56	; 86
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e5       	ldi	r30, 0x56	; 86
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                          // Wait for flag ( TWCR 7 == 0 )
    1aee:	e6 e5       	ldi	r30, 0x56	; 86
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	88 23       	and	r24, r24
    1af6:	dc f7       	brge	.-10     	; 0x1aee <I2C_SLAVE_u8DataByteTransmit_ACK+0x24>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_ACK )    // Check status code == Data Byte Transmit + ACK  == (0xB8)
    1af8:	e1 e2       	ldi	r30, 0x21	; 33
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	88 7f       	andi	r24, 0xF8	; 248
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	88 3b       	cpi	r24, 0xB8	; 184
    1b08:	91 05       	cpc	r25, r1
    1b0a:	11 f0       	breq	.+4      	; 0x1b10 <I2C_SLAVE_u8DataByteTransmit_ACK+0x46>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_ACK ; 
    1b0c:	8f e0       	ldi	r24, 0x0F	; 15
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <I2C_SLAVE_u8DataByteTransmit_NOTACK>:
/*===========================================================================================================================*/
Error_t I2C_SLAVE_u8DataByteTransmit_NOTACK (u8 Copy_Pu8TransmitData)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x6>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1b28:	19 82       	std	Y+1, r1	; 0x01
    Disable_ACK ();                                                             // Disable ACK 
    1b2a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Disable_ACK>
    TWDR_REG =  Copy_Pu8TransmitData ;                                          // Write Data in Reg TWDR 
    1b2e:	e3 e2       	ldi	r30, 0x23	; 35
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
    SET_BIT(TWCR_REG,TWCR_TWINT);                                               // Clear flag ( Set TWCR 7 )
    1b36:	a6 e5       	ldi	r26, 0x56	; 86
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e6 e5       	ldi	r30, 0x56	; 86
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	8c 93       	st	X, r24
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );                             // Wait for flag ( TWCR 7 == 0 )
    1b44:	e6 e5       	ldi	r30, 0x56	; 86
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 23       	and	r24, r24
    1b4c:	dc f7       	brge	.-10     	; 0x1b44 <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x28>
    if ( (TWSR_REG & STATUS_BIT_MASK) != SLAVE_DataByte_Transmitted_NOTACK )    // Check status code == Data Byte Transmit + NOTACK  == (0xC0)
    1b4e:	e1 e2       	ldi	r30, 0x21	; 33
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 7f       	andi	r24, 0xF8	; 248
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	80 3c       	cpi	r24, 0xC0	; 192
    1b5e:	91 05       	cpc	r25, r1
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <I2C_SLAVE_u8DataByteTransmit_NOTACK+0x4a>
    {
        Local_Error = I2C_Error_Slave_DataByteTransmit_NOTACK ; 
    1b62:	80 e1       	ldi	r24, 0x10	; 16
    1b64:	89 83       	std	Y+1, r24	; 0x01
    } 
    return Local_Error ;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <Enable_ACK>:
/*===========================================================================================================================*/
void Enable_ACK (void)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    // Enable ACK  ( Set TWCR 6 )
    SET_BIT(TWCR_REG,TWCR_TWEA);
    1b7a:	a6 e5       	ldi	r26, 0x56	; 86
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e6 e5       	ldi	r30, 0x56	; 86
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	80 64       	ori	r24, 0x40	; 64
    1b86:	8c 93       	st	X, r24
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <Disable_ACK>:
/*===========================================================================================================================*/
void Disable_ACK (void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    // Disable ACK  ( Clear TWCR 6 )
    CLEAR_BIT(TWCR_REG,TWCR_TWEA);
    1b96:	a6 e5       	ldi	r26, 0x56	; 86
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e6 e5       	ldi	r30, 0x56	; 86
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 7b       	andi	r24, 0xBF	; 191
    1ba2:	8c 93       	st	X, r24
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <GIE_void_GI_Enable>:
/* Description : Enable or Disable GIE General Interrupt                     */ 
/* Fun. Argument1: Copy_u8Status { ON , OFF }                                */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void GIE_void_GI_Enable ( u8 Copy_u8Status )
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <GIE_void_GI_Enable+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8Status )
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	3b 83       	std	Y+3, r19	; 0x03
    1bc0:	2a 83       	std	Y+2, r18	; 0x02
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f0       	breq	.+26     	; 0x1be4 <GIE_void_GI_Enable+0x3a>
    1bca:	2a 81       	ldd	r18, Y+2	; 0x02
    1bcc:	3b 81       	ldd	r19, Y+3	; 0x03
    1bce:	21 30       	cpi	r18, 0x01	; 1
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	79 f4       	brne	.+30     	; 0x1bf2 <GIE_void_GI_Enable+0x48>
    {
        case ON  :    SET_BIT(SREG_REG,7);       break;
    1bd4:	af e5       	ldi	r26, 0x5F	; 95
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ef e5       	ldi	r30, 0x5F	; 95
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 68       	ori	r24, 0x80	; 128
    1be0:	8c 93       	st	X, r24
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <GIE_void_GI_Enable+0x48>
        case OFF :    CLEAR_BIT(SREG_REG,7);     break;
    1be4:	af e5       	ldi	r26, 0x5F	; 95
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	ef e5       	ldi	r30, 0x5F	; 95
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 77       	andi	r24, 0x7F	; 127
    1bf0:	8c 93       	st	X, r24
        default  :                               break;
    }
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <EXTI_voidEnable>:
/* Fun. Argument1: Copy_u8INTnumber { INT0 , INT1 , INT2 }                                   */
/* Fun. Argument1: Copy_u8SenseControl {FALLING_EDGE, RAISING_EDGE, LOW_LEVEL, ON_CHANGE}    */
/* Fun. Return : void                                                                        */
/*********************************************************************************************/
void EXTI_voidEnable ( u8 Copy_u8INTnumber , u8 Copy_u8SenseControl )
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	2a 97       	sbiw	r28, 0x0a	; 10
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	6a 83       	std	Y+2, r22	; 0x02
    switch ( Copy_u8INTnumber )
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3a 87       	std	Y+10, r19	; 0x0a
    1c1e:	29 87       	std	Y+9, r18	; 0x09
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <EXTI_voidEnable+0x2e>
    1c2a:	6d c0       	rjmp	.+218    	; 0x1d06 <EXTI_voidEnable+0x108>
    1c2c:	29 85       	ldd	r18, Y+9	; 0x09
    1c2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c30:	22 30       	cpi	r18, 0x02	; 2
    1c32:	31 05       	cpc	r19, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <EXTI_voidEnable+0x3a>
    1c36:	c9 c0       	rjmp	.+402    	; 0x1dca <EXTI_voidEnable+0x1cc>
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <EXTI_voidEnable+0x44>
    1c40:	e9 c0       	rjmp	.+466    	; 0x1e14 <EXTI_voidEnable+0x216>
    {
        case INT0 :     SET_BIT(GICR_REG,PIN6);             // Set 1 On PIN6 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT0 .
    1c42:	ab e5       	ldi	r26, 0x5B	; 91
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	eb e5       	ldi	r30, 0x5B	; 91
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 64       	ori	r24, 0x40	; 64
    1c4e:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	38 87       	std	Y+8, r19	; 0x08
    1c58:	2f 83       	std	Y+7, r18	; 0x07
    1c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5c:	98 85       	ldd	r25, Y+8	; 0x08
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	21 f1       	breq	.+72     	; 0x1cac <EXTI_voidEnable+0xae>
    1c64:	2f 81       	ldd	r18, Y+7	; 0x07
    1c66:	38 85       	ldd	r19, Y+8	; 0x08
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <EXTI_voidEnable+0x7a>
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	98 85       	ldd	r25, Y+8	; 0x08
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <EXTI_voidEnable+0x90>
    1c76:	ce c0       	rjmp	.+412    	; 0x1e14 <EXTI_voidEnable+0x216>
    1c78:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7a:	38 85       	ldd	r19, Y+8	; 0x08
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	21 f1       	breq	.+72     	; 0x1cca <EXTI_voidEnable+0xcc>
    1c82:	8f 81       	ldd	r24, Y+7	; 0x07
    1c84:	98 85       	ldd	r25, Y+8	; 0x08
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	71 f1       	breq	.+92     	; 0x1ce8 <EXTI_voidEnable+0xea>
    1c8c:	c3 c0       	rjmp	.+390    	; 0x1e14 <EXTI_voidEnable+0x216>
                        {                                                                                                   // BIT1  -  BIT0  on MCUCR_REG
                            case FALLING_EDGE :     SET_BIT(MCUCR_REG,PIN1);      CLEAR_BIT(MCUCR_REG,PIN0);      break;    //   1   -   0   Falling Edge
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	82 60       	ori	r24, 0x02	; 2
    1c9a:	8c 93       	st	X, r24
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8e 7f       	andi	r24, 0xFE	; 254
    1ca8:	8c 93       	st	X, r24
    1caa:	b4 c0       	rjmp	.+360    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCR_REG,PIN1);      SET_BIT(MCUCR_REG,PIN0);        break;    //   1   -   1   Raising Edge  
    1cac:	a5 e5       	ldi	r26, 0x55	; 85
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e5 e5       	ldi	r30, 0x55	; 85
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 60       	ori	r24, 0x02	; 2
    1cb8:	8c 93       	st	X, r24
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
    1cc8:	a5 c0       	rjmp	.+330    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case LOW_LEVEL    :     CLEAR_BIT(MCUCR_REG,PIN1);    CLEAR_BIT(MCUCR_REG,PIN0);      break;    //   0   -   0   Low Level  
    1cca:	a5 e5       	ldi	r26, 0x55	; 85
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e5       	ldi	r30, 0x55	; 85
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8d 7f       	andi	r24, 0xFD	; 253
    1cd6:	8c 93       	st	X, r24
    1cd8:	a5 e5       	ldi	r26, 0x55	; 85
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e5 e5       	ldi	r30, 0x55	; 85
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8e 7f       	andi	r24, 0xFE	; 254
    1ce4:	8c 93       	st	X, r24
    1ce6:	96 c0       	rjmp	.+300    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case ON_CHANGE    :     CLEAR_BIT(MCUCR_REG,PIN1);    SET_BIT(MCUCR_REG,PIN0);        break;    //   0   -   1   On Change   
    1ce8:	a5 e5       	ldi	r26, 0x55	; 85
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e5 e5       	ldi	r30, 0x55	; 85
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8d 7f       	andi	r24, 0xFD	; 253
    1cf4:	8c 93       	st	X, r24
    1cf6:	a5 e5       	ldi	r26, 0x55	; 85
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e5       	ldi	r30, 0x55	; 85
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	81 60       	ori	r24, 0x01	; 1
    1d02:	8c 93       	st	X, r24
    1d04:	87 c0       	rjmp	.+270    	; 0x1e14 <EXTI_voidEnable+0x216>
                            default           :                                                                   break;
                        }
                        break;
        case INT1 :     SET_BIT(GICR_REG,PIN7);             // Set 1 On PIN7 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT1 .
    1d06:	ab e5       	ldi	r26, 0x5B	; 91
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	eb e5       	ldi	r30, 0x5B	; 91
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 68       	ori	r24, 0x80	; 128
    1d12:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3e 83       	std	Y+6, r19	; 0x06
    1d1c:	2d 83       	std	Y+5, r18	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	21 f1       	breq	.+72     	; 0x1d70 <EXTI_voidEnable+0x172>
    1d28:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <EXTI_voidEnable+0x13e>
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <EXTI_voidEnable+0x154>
    1d3a:	6c c0       	rjmp	.+216    	; 0x1e14 <EXTI_voidEnable+0x216>
    1d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	21 f1       	breq	.+72     	; 0x1d8e <EXTI_voidEnable+0x190>
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	71 f1       	breq	.+92     	; 0x1dac <EXTI_voidEnable+0x1ae>
    1d50:	61 c0       	rjmp	.+194    	; 0x1e14 <EXTI_voidEnable+0x216>
                        {                                                                                                   // BIT3  -  BIT2  on MCUCR_REG
                            case FALLING_EDGE :     SET_BIT(MCUCR_REG,PIN3);      CLEAR_BIT(MCUCR_REG,PIN2);      break;    //   1   -   0   Falling Edge
    1d52:	a5 e5       	ldi	r26, 0x55	; 85
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e5 e5       	ldi	r30, 0x55	; 85
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 60       	ori	r24, 0x08	; 8
    1d5e:	8c 93       	st	X, r24
    1d60:	a5 e5       	ldi	r26, 0x55	; 85
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e5       	ldi	r30, 0x55	; 85
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8b 7f       	andi	r24, 0xFB	; 251
    1d6c:	8c 93       	st	X, r24
    1d6e:	52 c0       	rjmp	.+164    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCR_REG,PIN3);      SET_BIT(MCUCR_REG,PIN2);        break;    //   1   -   1   Raising Edge
    1d70:	a5 e5       	ldi	r26, 0x55	; 85
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e5 e5       	ldi	r30, 0x55	; 85
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	88 60       	ori	r24, 0x08	; 8
    1d7c:	8c 93       	st	X, r24
    1d7e:	a5 e5       	ldi	r26, 0x55	; 85
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e5       	ldi	r30, 0x55	; 85
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	84 60       	ori	r24, 0x04	; 4
    1d8a:	8c 93       	st	X, r24
    1d8c:	43 c0       	rjmp	.+134    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case LOW_LEVEL    :     CLEAR_BIT(MCUCR_REG,PIN3);    CLEAR_BIT(MCUCR_REG,PIN2);      break;    //   0   -   0   Low Level
    1d8e:	a5 e5       	ldi	r26, 0x55	; 85
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e5       	ldi	r30, 0x55	; 85
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	87 7f       	andi	r24, 0xF7	; 247
    1d9a:	8c 93       	st	X, r24
    1d9c:	a5 e5       	ldi	r26, 0x55	; 85
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e5       	ldi	r30, 0x55	; 85
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8b 7f       	andi	r24, 0xFB	; 251
    1da8:	8c 93       	st	X, r24
    1daa:	34 c0       	rjmp	.+104    	; 0x1e14 <EXTI_voidEnable+0x216>
                            case ON_CHANGE    :     CLEAR_BIT(MCUCR_REG,PIN3);    SET_BIT(MCUCR_REG,PIN2);        break;    //   0   -   1   On Change 
    1dac:	a5 e5       	ldi	r26, 0x55	; 85
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e5       	ldi	r30, 0x55	; 85
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	87 7f       	andi	r24, 0xF7	; 247
    1db8:	8c 93       	st	X, r24
    1dba:	a5 e5       	ldi	r26, 0x55	; 85
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e5       	ldi	r30, 0x55	; 85
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	84 60       	ori	r24, 0x04	; 4
    1dc6:	8c 93       	st	X, r24
    1dc8:	25 c0       	rjmp	.+74     	; 0x1e14 <EXTI_voidEnable+0x216>
                            default           :                                                                   break;  
                        }
                        break;
        case INT2 :     SET_BIT(GICR_REG,PIN5);             // Set 1 On PIN5 At GTCR_REG to [Enable] (PIE) Peripheral Interrupt Enable to INT2 .
    1dca:	ab e5       	ldi	r26, 0x5B	; 91
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	eb e5       	ldi	r30, 0x5B	; 91
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3c 83       	std	Y+4, r19	; 0x04
    1de0:	2b 83       	std	Y+3, r18	; 0x03
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	31 f0       	breq	.+12     	; 0x1df6 <EXTI_voidEnable+0x1f8>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	21 30       	cpi	r18, 0x01	; 1
    1df0:	31 05       	cpc	r19, r1
    1df2:	49 f0       	breq	.+18     	; 0x1e06 <EXTI_voidEnable+0x208>
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <EXTI_voidEnable+0x216>
                        {                                                                      //  BIT6  on  MCUCSR_REG
                            case FALLING_EDGE :     CLEAR_BIT(MCUCSR_REG,PIN6);      break;    //   0    Falling Edge   
    1df6:	a4 e5       	ldi	r26, 0x54	; 84
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e4 e5       	ldi	r30, 0x54	; 84
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8f 7b       	andi	r24, 0xBF	; 191
    1e02:	8c 93       	st	X, r24
    1e04:	07 c0       	rjmp	.+14     	; 0x1e14 <EXTI_voidEnable+0x216>
                            case RAISING_EDGE :     SET_BIT(MCUCSR_REG,PIN6);        break;    //   1    Raising Edge
    1e06:	a4 e5       	ldi	r26, 0x54	; 84
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e4 e5       	ldi	r30, 0x54	; 84
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 64       	ori	r24, 0x40	; 64
    1e12:	8c 93       	st	X, r24
                            default           :                                      break;  
                        } 
                        break;
        default   :     break;
    }
}
    1e14:	2a 96       	adiw	r28, 0x0a	; 10
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <EXTI_voidDisable>:
/* Description :  Disable (PIE) Peripheral Interrupt Enable                  */ 
/* Fun. Argument1: Copy_u8INTnumber { INT0 , INT1 , INT2 }                   */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void EXTI_voidDisable ( u8 Copy_u8INTnumber )
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <EXTI_voidDisable+0x6>
    1e2c:	0f 92       	push	r0
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8INTnumber )
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3b 83       	std	Y+3, r19	; 0x03
    1e3c:	2a 83       	std	Y+2, r18	; 0x02
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	89 f0       	breq	.+34     	; 0x1e6a <EXTI_voidDisable+0x44>
    1e48:	2a 81       	ldd	r18, Y+2	; 0x02
    1e4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	a1 f0       	breq	.+40     	; 0x1e7a <EXTI_voidDisable+0x54>
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	b9 f4       	brne	.+46     	; 0x1e88 <EXTI_voidDisable+0x62>
    {
        case INT0 :     CLEAR_BIT(GICR_REG,PIN6);   break;    // Set 0 On PIN6 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT0 .
    1e5a:	ab e5       	ldi	r26, 0x5B	; 91
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	eb e5       	ldi	r30, 0x5B	; 91
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7b       	andi	r24, 0xBF	; 191
    1e66:	8c 93       	st	X, r24
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <EXTI_voidDisable+0x62>
        case INT1 :     CLEAR_BIT(GICR_REG,PIN7);   break;    // Set 0 On PIN7 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT1 .
    1e6a:	ab e5       	ldi	r26, 0x5B	; 91
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	eb e5       	ldi	r30, 0x5B	; 91
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8f 77       	andi	r24, 0x7F	; 127
    1e76:	8c 93       	st	X, r24
    1e78:	07 c0       	rjmp	.+14     	; 0x1e88 <EXTI_voidDisable+0x62>
        case INT2 :     CLEAR_BIT(GICR_REG,PIN5);   break;    // Set 0 On PIN5 At GTCR_REG to [Disable] (PIE) Peripheral Interrupt Enable to INT2 .
    1e7a:	ab e5       	ldi	r26, 0x5B	; 91
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	eb e5       	ldi	r30, 0x5B	; 91
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 7d       	andi	r24, 0xDF	; 223
    1e86:	8c 93       	st	X, r24
        default   :                                 break;
    }
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <EXTI_voidSetCallBack>:
/* Fun. Argument2:{ void (*LocalPointerToFunction) (void) }                  */
/*                Pointer to function that = Address of application function */
/* Fun. Return : void                                                        */
/*****************************************************************************/
void EXTI_voidSetCallBack ( u8 Copy_u8INTnumber , void (*Local_PointerToFunction) (void) )
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <EXTI_voidSetCallBack+0x6>
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <EXTI_voidSetCallBack+0x8>
    1e9c:	0f 92       	push	r0
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	7b 83       	std	Y+3, r23	; 0x03
    1ea6:	6a 83       	std	Y+2, r22	; 0x02
    switch( Copy_u8INTnumber )
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	3d 83       	std	Y+5, r19	; 0x05
    1eb0:	2c 83       	std	Y+4, r18	; 0x04
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	81 f0       	breq	.+32     	; 0x1edc <EXTI_voidSetCallBack+0x48>
    1ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	91 f0       	breq	.+36     	; 0x1eea <EXTI_voidSetCallBack+0x56>
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	a1 f4       	brne	.+40     	; 0x1ef6 <EXTI_voidSetCallBack+0x62>
    {
        case INT0 :     Global_PF_Vector_1 = Local_PointerToFunction ;     break;
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	90 93 aa 00 	sts	0x00AA, r25
    1ed6:	80 93 a9 00 	sts	0x00A9, r24
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <EXTI_voidSetCallBack+0x62>
        case INT1 :     Global_PF_Vector_2 = Local_PointerToFunction ;     break; 
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	90 93 ac 00 	sts	0x00AC, r25
    1ee4:	80 93 ab 00 	sts	0x00AB, r24
    1ee8:	06 c0       	rjmp	.+12     	; 0x1ef6 <EXTI_voidSetCallBack+0x62>
        case INT2 :     Global_PF_Vector_3 = Local_PointerToFunction ;     break; 
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	90 93 ae 00 	sts	0x00AE, r25
    1ef2:	80 93 ad 00 	sts	0x00AD, r24
        default   :                                                        break; 
    } 
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <__vector_1>:
/* Description : ISR Prototype (position 1 on vector table INT0 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_1 (void)   __attribute__((signal));
void __vector_1 (void)
{
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_1 != NULL )
    1f30:	80 91 a9 00 	lds	r24, 0x00A9
    1f34:	90 91 aa 00 	lds	r25, 0x00AA
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <__vector_1+0x40>
    {
        Global_PF_Vector_1 ();  // calling Global pointer to function that contain address of Application Function with INT0. 
    1f3c:	e0 91 a9 00 	lds	r30, 0x00A9
    1f40:	f0 91 aa 00 	lds	r31, 0x00AA
    1f44:	09 95       	icall
    }

}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	ff 91       	pop	r31
    1f4c:	ef 91       	pop	r30
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_2>:
/* Description : ISR Prototype (position 2 on vector table INT1 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_2 (void)   __attribute__((signal));
void __vector_2 (void) 
{
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	2f 93       	push	r18
    1f78:	3f 93       	push	r19
    1f7a:	4f 93       	push	r20
    1f7c:	5f 93       	push	r21
    1f7e:	6f 93       	push	r22
    1f80:	7f 93       	push	r23
    1f82:	8f 93       	push	r24
    1f84:	9f 93       	push	r25
    1f86:	af 93       	push	r26
    1f88:	bf 93       	push	r27
    1f8a:	ef 93       	push	r30
    1f8c:	ff 93       	push	r31
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_2 != NULL )
    1f96:	80 91 ab 00 	lds	r24, 0x00AB
    1f9a:	90 91 ac 00 	lds	r25, 0x00AC
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <__vector_2+0x40>
    {
        Global_PF_Vector_2 ();  // calling Global pointer to function that contain address of Application Function with INT1. 
    1fa2:	e0 91 ab 00 	lds	r30, 0x00AB
    1fa6:	f0 91 ac 00 	lds	r31, 0x00AC
    1faa:	09 95       	icall
    }
    
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	0f 90       	pop	r0
    1fce:	1f 90       	pop	r1
    1fd0:	18 95       	reti

00001fd2 <__vector_3>:
/* Description : ISR Prototype (position 3 on vector table INT2 )            */ 
/* Fun. Return : void                                                        */
/*****************************************************************************/
void __vector_3 (void)   __attribute__((signal));
void __vector_3 (void) 
{
    1fd2:	1f 92       	push	r1
    1fd4:	0f 92       	push	r0
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	0f 92       	push	r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	4f 93       	push	r20
    1fe2:	5f 93       	push	r21
    1fe4:	6f 93       	push	r22
    1fe6:	7f 93       	push	r23
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	af 93       	push	r26
    1fee:	bf 93       	push	r27
    1ff0:	ef 93       	push	r30
    1ff2:	ff 93       	push	r31
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_3 != NULL )
    1ffc:	80 91 ad 00 	lds	r24, 0x00AD
    2000:	90 91 ae 00 	lds	r25, 0x00AE
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	29 f0       	breq	.+10     	; 0x2012 <__vector_3+0x40>
    {
        Global_PF_Vector_3 ();  // calling Global pointer to function that contain address of Application Function with INT2.
    2008:	e0 91 ad 00 	lds	r30, 0x00AD
    200c:	f0 91 ae 00 	lds	r31, 0x00AE
    2010:	09 95       	icall
    }
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <DIO_voidSetPinDirection>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                      */
/* Fun. Argument3: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	29 97       	sbiw	r28, 0x09	; 9
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	6a 83       	std	Y+2, r22	; 0x02
    2050:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	08 f0       	brcs	.+2      	; 0x205a <DIO_voidSetPinDirection+0x22>
    2058:	f6 c0       	rjmp	.+492    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	88 30       	cpi	r24, 0x08	; 8
    205e:	08 f0       	brcs	.+2      	; 0x2062 <DIO_voidSetPinDirection+0x2a>
    2060:	f2 c0       	rjmp	.+484    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	39 87       	std	Y+9, r19	; 0x09
    206a:	28 87       	std	Y+8, r18	; 0x08
    206c:	88 85       	ldd	r24, Y+8	; 0x08
    206e:	99 85       	ldd	r25, Y+9	; 0x09
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	39 f0       	breq	.+14     	; 0x2082 <DIO_voidSetPinDirection+0x4a>
    2074:	28 85       	ldd	r18, Y+8	; 0x08
    2076:	39 85       	ldd	r19, Y+9	; 0x09
    2078:	21 30       	cpi	r18, 0x01	; 1
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <DIO_voidSetPinDirection+0x48>
    207e:	75 c0       	rjmp	.+234    	; 0x216a <DIO_voidSetPinDirection+0x132>
    2080:	e2 c0       	rjmp	.+452    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
        {
            case INPUT :    switch(Copy_u8PortNumber)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3f 83       	std	Y+7, r19	; 0x07
    208a:	2e 83       	std	Y+6, r18	; 0x06
    208c:	8e 81       	ldd	r24, Y+6	; 0x06
    208e:	9f 81       	ldd	r25, Y+7	; 0x07
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	59 f1       	breq	.+86     	; 0x20ec <DIO_voidSetPinDirection+0xb4>
    2096:	2e 81       	ldd	r18, Y+6	; 0x06
    2098:	3f 81       	ldd	r19, Y+7	; 0x07
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <DIO_voidSetPinDirection+0x72>
    20a0:	8e 81       	ldd	r24, Y+6	; 0x06
    20a2:	9f 81       	ldd	r25, Y+7	; 0x07
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <DIO_voidSetPinDirection+0x8a>
    20a8:	ce c0       	rjmp	.+412    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
    20aa:	2e 81       	ldd	r18, Y+6	; 0x06
    20ac:	3f 81       	ldd	r19, Y+7	; 0x07
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	89 f1       	breq	.+98     	; 0x2116 <DIO_voidSetPinDirection+0xde>
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <DIO_voidSetPinDirection+0x88>
    20be:	40 c0       	rjmp	.+128    	; 0x2140 <DIO_voidSetPinDirection+0x108>
    20c0:	c2 c0       	rjmp	.+388    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
    20c2:	aa e3       	ldi	r26, 0x3A	; 58
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	ea e3       	ldi	r30, 0x3A	; 58
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_voidSetPinDirection+0xa8>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_voidSetPinDirection+0xa4>
    20e4:	80 95       	com	r24
    20e6:	84 23       	and	r24, r20
    20e8:	8c 93       	st	X, r24
    20ea:	ad c0       	rjmp	.+346    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    CLEAR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
    20ec:	a7 e3       	ldi	r26, 0x37	; 55
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e7 e3       	ldi	r30, 0x37	; 55
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_voidSetPinDirection+0xd2>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <DIO_voidSetPinDirection+0xce>
    210e:	80 95       	com	r24
    2110:	84 23       	and	r24, r20
    2112:	8c 93       	st	X, r24
    2114:	98 c0       	rjmp	.+304    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    CLEAR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
    2116:	a4 e3       	ldi	r26, 0x34	; 52
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e4 e3       	ldi	r30, 0x34	; 52
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	02 2e       	mov	r0, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_voidSetPinDirection+0xfc>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_voidSetPinDirection+0xf8>
    2138:	80 95       	com	r24
    213a:	84 23       	and	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	83 c0       	rjmp	.+262    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    CLEAR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
    2140:	a1 e3       	ldi	r26, 0x31	; 49
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e1 e3       	ldi	r30, 0x31	; 49
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_voidSetPinDirection+0x126>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <DIO_voidSetPinDirection+0x122>
    2162:	80 95       	com	r24
    2164:	84 23       	and	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	6e c0       	rjmp	.+220    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3d 83       	std	Y+5, r19	; 0x05
    2172:	2c 83       	std	Y+4, r18	; 0x04
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	91 05       	cpc	r25, r1
    217c:	49 f1       	breq	.+82     	; 0x21d0 <DIO_voidSetPinDirection+0x198>
    217e:	2c 81       	ldd	r18, Y+4	; 0x04
    2180:	3d 81       	ldd	r19, Y+5	; 0x05
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	2c f4       	brge	.+10     	; 0x2192 <DIO_voidSetPinDirection+0x15a>
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	61 f0       	breq	.+24     	; 0x21a8 <DIO_voidSetPinDirection+0x170>
    2190:	5a c0       	rjmp	.+180    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	71 f1       	breq	.+92     	; 0x21f8 <DIO_voidSetPinDirection+0x1c0>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	91 05       	cpc	r25, r1
    21a4:	e9 f1       	breq	.+122    	; 0x2220 <DIO_voidSetPinDirection+0x1e8>
    21a6:	4f c0       	rjmp	.+158    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                            {
                                case PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
    21a8:	aa e3       	ldi	r26, 0x3A	; 58
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	ea e3       	ldi	r30, 0x3A	; 58
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_voidSetPinDirection+0x18e>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_voidSetPinDirection+0x18a>
    21ca:	84 2b       	or	r24, r20
    21cc:	8c 93       	st	X, r24
    21ce:	3b c0       	rjmp	.+118    	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
    21d0:	a7 e3       	ldi	r26, 0x37	; 55
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e7 e3       	ldi	r30, 0x37	; 55
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_voidSetPinDirection+0x1b6>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_voidSetPinDirection+0x1b2>
    21f2:	84 2b       	or	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	27 c0       	rjmp	.+78     	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
    21f8:	a4 e3       	ldi	r26, 0x34	; 52
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e4 e3       	ldi	r30, 0x34	; 52
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_voidSetPinDirection+0x1de>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <DIO_voidSetPinDirection+0x1da>
    221a:	84 2b       	or	r24, r20
    221c:	8c 93       	st	X, r24
    221e:	13 c0       	rjmp	.+38     	; 0x2246 <DIO_voidSetPinDirection+0x20e>
                                case PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
    2220:	a1 e3       	ldi	r26, 0x31	; 49
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e1 e3       	ldi	r30, 0x31	; 49
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	48 2f       	mov	r20, r24
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	02 2e       	mov	r0, r18
    2238:	02 c0       	rjmp	.+4      	; 0x223e <DIO_voidSetPinDirection+0x206>
    223a:	88 0f       	add	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	0a 94       	dec	r0
    2240:	e2 f7       	brpl	.-8      	; 0x223a <DIO_voidSetPinDirection+0x202>
    2242:	84 2b       	or	r24, r20
    2244:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    2246:	29 96       	adiw	r28, 0x09	; 9
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <DIO_voidSetPortDirection>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                */
/* Fun. Argument2: Copy_u8Direction { INPUT,OUTPUT }                                            */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	28 97       	sbiw	r28, 0x08	; 8
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	08 f0       	brcs	.+2      	; 0x2278 <DIO_voidSetPortDirection+0x20>
    2276:	70 c0       	rjmp	.+224    	; 0x2358 <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	38 87       	std	Y+8, r19	; 0x08
    2280:	2f 83       	std	Y+7, r18	; 0x07
    2282:	8f 81       	ldd	r24, Y+7	; 0x07
    2284:	98 85       	ldd	r25, Y+8	; 0x08
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	31 f0       	breq	.+12     	; 0x2296 <DIO_voidSetPortDirection+0x3e>
    228a:	2f 81       	ldd	r18, Y+7	; 0x07
    228c:	38 85       	ldd	r19, Y+8	; 0x08
    228e:	21 30       	cpi	r18, 0x01	; 1
    2290:	31 05       	cpc	r19, r1
    2292:	81 f1       	breq	.+96     	; 0x22f4 <DIO_voidSetPortDirection+0x9c>
    2294:	61 c0       	rjmp	.+194    	; 0x2358 <DIO_voidSetPortDirection+0x100>
        {
            case INPUT :    switch(Copy_u8PortNumber)
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	3e 83       	std	Y+6, r19	; 0x06
    229e:	2d 83       	std	Y+5, r18	; 0x05
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	91 05       	cpc	r25, r1
    22a8:	c9 f0       	breq	.+50     	; 0x22dc <DIO_voidSetPortDirection+0x84>
    22aa:	2d 81       	ldd	r18, Y+5	; 0x05
    22ac:	3e 81       	ldd	r19, Y+6	; 0x06
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	2c f4       	brge	.+10     	; 0x22be <DIO_voidSetPortDirection+0x66>
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	61 f0       	breq	.+24     	; 0x22d4 <DIO_voidSetPortDirection+0x7c>
    22bc:	4d c0       	rjmp	.+154    	; 0x2358 <DIO_voidSetPortDirection+0x100>
    22be:	2d 81       	ldd	r18, Y+5	; 0x05
    22c0:	3e 81       	ldd	r19, Y+6	; 0x06
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	71 f0       	breq	.+28     	; 0x22e4 <DIO_voidSetPortDirection+0x8c>
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	83 30       	cpi	r24, 0x03	; 3
    22ce:	91 05       	cpc	r25, r1
    22d0:	69 f0       	breq	.+26     	; 0x22ec <DIO_voidSetPortDirection+0x94>
    22d2:	42 c0       	rjmp	.+132    	; 0x2358 <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0x00 ;   break;
    22d4:	ea e3       	ldi	r30, 0x3A	; 58
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	10 82       	st	Z, r1
    22da:	3e c0       	rjmp	.+124    	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0x00 ;   break;
    22dc:	e7 e3       	ldi	r30, 0x37	; 55
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	10 82       	st	Z, r1
    22e2:	3a c0       	rjmp	.+116    	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0x00 ;   break;
    22e4:	e4 e3       	ldi	r30, 0x34	; 52
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	10 82       	st	Z, r1
    22ea:	36 c0       	rjmp	.+108    	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0x00 ;   break;
    22ec:	e1 e3       	ldi	r30, 0x31	; 49
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	10 82       	st	Z, r1
    22f2:	32 c0       	rjmp	.+100    	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case OUTPUT :   switch(Copy_u8PortNumber)
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3c 83       	std	Y+4, r19	; 0x04
    22fc:	2b 83       	std	Y+3, r18	; 0x03
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	d1 f0       	breq	.+52     	; 0x233c <DIO_voidSetPortDirection+0xe4>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	2c f4       	brge	.+10     	; 0x231c <DIO_voidSetPortDirection+0xc4>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	61 f0       	breq	.+24     	; 0x2332 <DIO_voidSetPortDirection+0xda>
    231a:	1e c0       	rjmp	.+60     	; 0x2358 <DIO_voidSetPortDirection+0x100>
    231c:	2b 81       	ldd	r18, Y+3	; 0x03
    231e:	3c 81       	ldd	r19, Y+4	; 0x04
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	81 f0       	breq	.+32     	; 0x2346 <DIO_voidSetPortDirection+0xee>
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	81 f0       	breq	.+32     	; 0x2350 <DIO_voidSetPortDirection+0xf8>
    2330:	13 c0       	rjmp	.+38     	; 0x2358 <DIO_voidSetPortDirection+0x100>
                            {
                                case PORTA :    DDRA_REG = 0xff ;   break;
    2332:	ea e3       	ldi	r30, 0x3A	; 58
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	80 83       	st	Z, r24
    233a:	0e c0       	rjmp	.+28     	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTB :    DDRB_REG = 0xff ;   break;
    233c:	e7 e3       	ldi	r30, 0x37	; 55
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	80 83       	st	Z, r24
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTC :    DDRC_REG = 0xff ;   break;
    2346:	e4 e3       	ldi	r30, 0x34	; 52
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	80 83       	st	Z, r24
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <DIO_voidSetPortDirection+0x100>
                                case PORTD :    DDRD_REG = 0xff ;   break;
    2350:	e1 e3       	ldi	r30, 0x31	; 49
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	8f ef       	ldi	r24, 0xFF	; 255
    2356:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
    2358:	28 96       	adiw	r28, 0x08	; 8
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <DIO_voidSetPinValue>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                */
/* Fun. Argument3: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	29 97       	sbiw	r28, 0x09	; 9
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	6a 83       	std	Y+2, r22	; 0x02
    2382:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	84 30       	cpi	r24, 0x04	; 4
    2388:	08 f0       	brcs	.+2      	; 0x238c <DIO_voidSetPinValue+0x22>
    238a:	f6 c0       	rjmp	.+492    	; 0x2578 <DIO_voidSetPinValue+0x20e>
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	88 30       	cpi	r24, 0x08	; 8
    2390:	08 f0       	brcs	.+2      	; 0x2394 <DIO_voidSetPinValue+0x2a>
    2392:	f2 c0       	rjmp	.+484    	; 0x2578 <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	39 87       	std	Y+9, r19	; 0x09
    239c:	28 87       	std	Y+8, r18	; 0x08
    239e:	88 85       	ldd	r24, Y+8	; 0x08
    23a0:	99 85       	ldd	r25, Y+9	; 0x09
    23a2:	00 97       	sbiw	r24, 0x00	; 0
    23a4:	39 f0       	breq	.+14     	; 0x23b4 <DIO_voidSetPinValue+0x4a>
    23a6:	28 85       	ldd	r18, Y+8	; 0x08
    23a8:	39 85       	ldd	r19, Y+9	; 0x09
    23aa:	21 30       	cpi	r18, 0x01	; 1
    23ac:	31 05       	cpc	r19, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <DIO_voidSetPinValue+0x48>
    23b0:	75 c0       	rjmp	.+234    	; 0x249c <DIO_voidSetPinValue+0x132>
    23b2:	e2 c0       	rjmp	.+452    	; 0x2578 <DIO_voidSetPinValue+0x20e>
        {
            case LOW :    switch(Copy_u8PortNumber)
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	3f 83       	std	Y+7, r19	; 0x07
    23bc:	2e 83       	std	Y+6, r18	; 0x06
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
    23c0:	9f 81       	ldd	r25, Y+7	; 0x07
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	91 05       	cpc	r25, r1
    23c6:	59 f1       	breq	.+86     	; 0x241e <DIO_voidSetPinValue+0xb4>
    23c8:	2e 81       	ldd	r18, Y+6	; 0x06
    23ca:	3f 81       	ldd	r19, Y+7	; 0x07
    23cc:	22 30       	cpi	r18, 0x02	; 2
    23ce:	31 05       	cpc	r19, r1
    23d0:	2c f4       	brge	.+10     	; 0x23dc <DIO_voidSetPinValue+0x72>
    23d2:	8e 81       	ldd	r24, Y+6	; 0x06
    23d4:	9f 81       	ldd	r25, Y+7	; 0x07
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f0       	breq	.+26     	; 0x23f4 <DIO_voidSetPinValue+0x8a>
    23da:	ce c0       	rjmp	.+412    	; 0x2578 <DIO_voidSetPinValue+0x20e>
    23dc:	2e 81       	ldd	r18, Y+6	; 0x06
    23de:	3f 81       	ldd	r19, Y+7	; 0x07
    23e0:	22 30       	cpi	r18, 0x02	; 2
    23e2:	31 05       	cpc	r19, r1
    23e4:	89 f1       	breq	.+98     	; 0x2448 <DIO_voidSetPinValue+0xde>
    23e6:	8e 81       	ldd	r24, Y+6	; 0x06
    23e8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ea:	83 30       	cpi	r24, 0x03	; 3
    23ec:	91 05       	cpc	r25, r1
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <DIO_voidSetPinValue+0x88>
    23f0:	40 c0       	rjmp	.+128    	; 0x2472 <DIO_voidSetPinValue+0x108>
    23f2:	c2 c0       	rjmp	.+388    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    CLEAR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
    23f4:	ab e3       	ldi	r26, 0x3B	; 59
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	eb e3       	ldi	r30, 0x3B	; 59
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	48 2f       	mov	r20, r24
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 2e       	mov	r0, r18
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <DIO_voidSetPinValue+0xa8>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	0a 94       	dec	r0
    2414:	e2 f7       	brpl	.-8      	; 0x240e <DIO_voidSetPinValue+0xa4>
    2416:	80 95       	com	r24
    2418:	84 23       	and	r24, r20
    241a:	8c 93       	st	X, r24
    241c:	ad c0       	rjmp	.+346    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTB :    CLEAR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
    241e:	a8 e3       	ldi	r26, 0x38	; 56
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e8 e3       	ldi	r30, 0x38	; 56
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	48 2f       	mov	r20, r24
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 2e       	mov	r0, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <DIO_voidSetPinValue+0xd2>
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	0a 94       	dec	r0
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <DIO_voidSetPinValue+0xce>
    2440:	80 95       	com	r24
    2442:	84 23       	and	r24, r20
    2444:	8c 93       	st	X, r24
    2446:	98 c0       	rjmp	.+304    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTC :    CLEAR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
    2448:	a5 e3       	ldi	r26, 0x35	; 53
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e3       	ldi	r30, 0x35	; 53
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	48 2f       	mov	r20, r24
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	02 2e       	mov	r0, r18
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <DIO_voidSetPinValue+0xfc>
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	0a 94       	dec	r0
    2468:	e2 f7       	brpl	.-8      	; 0x2462 <DIO_voidSetPinValue+0xf8>
    246a:	80 95       	com	r24
    246c:	84 23       	and	r24, r20
    246e:	8c 93       	st	X, r24
    2470:	83 c0       	rjmp	.+262    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTD :    CLEAR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
    2472:	a2 e3       	ldi	r26, 0x32	; 50
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e2 e3       	ldi	r30, 0x32	; 50
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	48 2f       	mov	r20, r24
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	02 2e       	mov	r0, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <DIO_voidSetPinValue+0x126>
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	0a 94       	dec	r0
    2492:	e2 f7       	brpl	.-8      	; 0x248c <DIO_voidSetPinValue+0x122>
    2494:	80 95       	com	r24
    2496:	84 23       	and	r24, r20
    2498:	8c 93       	st	X, r24
    249a:	6e c0       	rjmp	.+220    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case HIGH :   switch(Copy_u8PortNumber)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	3d 83       	std	Y+5, r19	; 0x05
    24a4:	2c 83       	std	Y+4, r18	; 0x04
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	9d 81       	ldd	r25, Y+5	; 0x05
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	91 05       	cpc	r25, r1
    24ae:	49 f1       	breq	.+82     	; 0x2502 <DIO_voidSetPinValue+0x198>
    24b0:	2c 81       	ldd	r18, Y+4	; 0x04
    24b2:	3d 81       	ldd	r19, Y+5	; 0x05
    24b4:	22 30       	cpi	r18, 0x02	; 2
    24b6:	31 05       	cpc	r19, r1
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <DIO_voidSetPinValue+0x15a>
    24ba:	8c 81       	ldd	r24, Y+4	; 0x04
    24bc:	9d 81       	ldd	r25, Y+5	; 0x05
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	61 f0       	breq	.+24     	; 0x24da <DIO_voidSetPinValue+0x170>
    24c2:	5a c0       	rjmp	.+180    	; 0x2578 <DIO_voidSetPinValue+0x20e>
    24c4:	2c 81       	ldd	r18, Y+4	; 0x04
    24c6:	3d 81       	ldd	r19, Y+5	; 0x05
    24c8:	22 30       	cpi	r18, 0x02	; 2
    24ca:	31 05       	cpc	r19, r1
    24cc:	71 f1       	breq	.+92     	; 0x252a <DIO_voidSetPinValue+0x1c0>
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	9d 81       	ldd	r25, Y+5	; 0x05
    24d2:	83 30       	cpi	r24, 0x03	; 3
    24d4:	91 05       	cpc	r25, r1
    24d6:	e9 f1       	breq	.+122    	; 0x2552 <DIO_voidSetPinValue+0x1e8>
    24d8:	4f c0       	rjmp	.+158    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                            {
                                case PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    24da:	ab e3       	ldi	r26, 0x3B	; 59
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	eb e3       	ldi	r30, 0x3B	; 59
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_voidSetPinValue+0x18e>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_voidSetPinValue+0x18a>
    24fc:	84 2b       	or	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	3b c0       	rjmp	.+118    	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    2502:	a8 e3       	ldi	r26, 0x38	; 56
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e8 e3       	ldi	r30, 0x38	; 56
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_voidSetPinValue+0x1b6>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_voidSetPinValue+0x1b2>
    2524:	84 2b       	or	r24, r20
    2526:	8c 93       	st	X, r24
    2528:	27 c0       	rjmp	.+78     	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    252a:	a5 e3       	ldi	r26, 0x35	; 53
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e5 e3       	ldi	r30, 0x35	; 53
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	48 2f       	mov	r20, r24
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	02 2e       	mov	r0, r18
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <DIO_voidSetPinValue+0x1de>
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	0a 94       	dec	r0
    254a:	e2 f7       	brpl	.-8      	; 0x2544 <DIO_voidSetPinValue+0x1da>
    254c:	84 2b       	or	r24, r20
    254e:	8c 93       	st	X, r24
    2550:	13 c0       	rjmp	.+38     	; 0x2578 <DIO_voidSetPinValue+0x20e>
                                case PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    2552:	a2 e3       	ldi	r26, 0x32	; 50
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e2 e3       	ldi	r30, 0x32	; 50
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <DIO_voidSetPinValue+0x206>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <DIO_voidSetPinValue+0x202>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    2578:	29 96       	adiw	r28, 0x09	; 9
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <DIO_voidSetPortValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                          */
/* Fun. Argument2: Copy_u8Value { HIGH , LOW }                                            */
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	00 d0       	rcall	.+0      	; 0x2590 <DIO_voidSetPortValue+0x6>
    2590:	00 d0       	rcall	.+0      	; 0x2592 <DIO_voidSetPortValue+0x8>
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	90 f5       	brcc	.+100    	; 0x2604 <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3c 83       	std	Y+4, r19	; 0x04
    25a8:	2b 83       	std	Y+3, r18	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	d1 f0       	breq	.+52     	; 0x25e8 <DIO_voidSetPortValue+0x5e>
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	3c 81       	ldd	r19, Y+4	; 0x04
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <DIO_voidSetPortValue+0x3e>
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	61 f0       	breq	.+24     	; 0x25de <DIO_voidSetPortValue+0x54>
    25c6:	1e c0       	rjmp	.+60     	; 0x2604 <DIO_voidSetPortValue+0x7a>
    25c8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ca:	3c 81       	ldd	r19, Y+4	; 0x04
    25cc:	22 30       	cpi	r18, 0x02	; 2
    25ce:	31 05       	cpc	r19, r1
    25d0:	81 f0       	breq	.+32     	; 0x25f2 <DIO_voidSetPortValue+0x68>
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	83 30       	cpi	r24, 0x03	; 3
    25d8:	91 05       	cpc	r25, r1
    25da:	81 f0       	breq	.+32     	; 0x25fc <DIO_voidSetPortValue+0x72>
    25dc:	13 c0       	rjmp	.+38     	; 0x2604 <DIO_voidSetPortValue+0x7a>
        {
            case PORTA: PORTA_REG = Copy_u8Value;
    25de:	eb e3       	ldi	r30, 0x3B	; 59
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	80 83       	st	Z, r24
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTB: PORTB_REG = Copy_u8Value;
    25e8:	e8 e3       	ldi	r30, 0x38	; 56
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	80 83       	st	Z, r24
    25f0:	09 c0       	rjmp	.+18     	; 0x2604 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTC: PORTC_REG = Copy_u8Value;
    25f2:	e5 e3       	ldi	r30, 0x35	; 53
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	80 83       	st	Z, r24
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case PORTD: PORTD_REG = Copy_u8Value;
    25fc:	e2 e3       	ldi	r30, 0x32	; 50
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <DIO_u8GetPinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return :  unsigned char   { HIGH , LOW }                            */
/****************************************************************************/
u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <DIO_u8GetPinValue+0x6>
    2618:	00 d0       	rcall	.+0      	; 0x261a <DIO_u8GetPinValue+0x8>
    261a:	0f 92       	push	r0
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	8a 83       	std	Y+2, r24	; 0x02
    2622:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	84 30       	cpi	r24, 0x04	; 4
    2628:	08 f0       	brcs	.+2      	; 0x262c <DIO_u8GetPinValue+0x1a>
    262a:	6a c0       	rjmp	.+212    	; 0x2700 <DIO_u8GetPinValue+0xee>
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	88 30       	cpi	r24, 0x08	; 8
    2630:	08 f0       	brcs	.+2      	; 0x2634 <DIO_u8GetPinValue+0x22>
    2632:	66 c0       	rjmp	.+204    	; 0x2700 <DIO_u8GetPinValue+0xee>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3d 83       	std	Y+5, r19	; 0x05
    263c:	2c 83       	std	Y+4, r18	; 0x04
    263e:	8c 81       	ldd	r24, Y+4	; 0x04
    2640:	9d 81       	ldd	r25, Y+5	; 0x05
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	91 05       	cpc	r25, r1
    2646:	39 f1       	breq	.+78     	; 0x2696 <DIO_u8GetPinValue+0x84>
    2648:	2c 81       	ldd	r18, Y+4	; 0x04
    264a:	3d 81       	ldd	r19, Y+5	; 0x05
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	2c f4       	brge	.+10     	; 0x265c <DIO_u8GetPinValue+0x4a>
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	9d 81       	ldd	r25, Y+5	; 0x05
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	61 f0       	breq	.+24     	; 0x2672 <DIO_u8GetPinValue+0x60>
    265a:	52 c0       	rjmp	.+164    	; 0x2700 <DIO_u8GetPinValue+0xee>
    265c:	2c 81       	ldd	r18, Y+4	; 0x04
    265e:	3d 81       	ldd	r19, Y+5	; 0x05
    2660:	22 30       	cpi	r18, 0x02	; 2
    2662:	31 05       	cpc	r19, r1
    2664:	51 f1       	breq	.+84     	; 0x26ba <DIO_u8GetPinValue+0xa8>
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	83 30       	cpi	r24, 0x03	; 3
    266c:	91 05       	cpc	r25, r1
    266e:	b9 f1       	breq	.+110    	; 0x26de <DIO_u8GetPinValue+0xcc>
    2670:	47 c0       	rjmp	.+142    	; 0x2700 <DIO_u8GetPinValue+0xee>
        {
            case PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    2672:	e9 e3       	ldi	r30, 0x39	; 57
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 2e       	mov	r0, r18
    2686:	02 c0       	rjmp	.+4      	; 0x268c <DIO_u8GetPinValue+0x7a>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <DIO_u8GetPinValue+0x76>
    2690:	84 23       	and	r24, r20
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	35 c0       	rjmp	.+106    	; 0x2700 <DIO_u8GetPinValue+0xee>
            case PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    2696:	e6 e3       	ldi	r30, 0x36	; 54
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	48 2f       	mov	r20, r24
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	02 2e       	mov	r0, r18
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <DIO_u8GetPinValue+0x9e>
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	0a 94       	dec	r0
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <DIO_u8GetPinValue+0x9a>
    26b4:	84 23       	and	r24, r20
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	23 c0       	rjmp	.+70     	; 0x2700 <DIO_u8GetPinValue+0xee>
            case PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    26ba:	e3 e3       	ldi	r30, 0x33	; 51
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	48 2f       	mov	r20, r24
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_u8GetPinValue+0xc2>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <DIO_u8GetPinValue+0xbe>
    26d8:	84 23       	and	r24, r20
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	11 c0       	rjmp	.+34     	; 0x2700 <DIO_u8GetPinValue+0xee>
            case PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    26de:	e0 e3       	ldi	r30, 0x30	; 48
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	48 2f       	mov	r20, r24
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 2e       	mov	r0, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <DIO_u8GetPinValue+0xe6>
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	0a 94       	dec	r0
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <DIO_u8GetPinValue+0xe2>
    26fc:	84 23       	and	r24, r20
    26fe:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    2700:	89 81       	ldd	r24, Y+1	; 0x01
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <DIO_u8GetPortValue>:
/* Description : Read i/p of the whole Port register                        */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : u8 {0bxxxxxxxx} (x) is a value in an one Pin on the Port   */
/****************************************************************************/
u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <DIO_u8GetPortValue+0x6>
    2718:	00 d0       	rcall	.+0      	; 0x271a <DIO_u8GetPortValue+0x8>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	90 f5       	brcc	.+100    	; 0x278a <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	3c 83       	std	Y+4, r19	; 0x04
    272e:	2b 83       	std	Y+3, r18	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	91 05       	cpc	r25, r1
    2738:	d1 f0       	breq	.+52     	; 0x276e <DIO_u8GetPortValue+0x5c>
    273a:	2b 81       	ldd	r18, Y+3	; 0x03
    273c:	3c 81       	ldd	r19, Y+4	; 0x04
    273e:	22 30       	cpi	r18, 0x02	; 2
    2740:	31 05       	cpc	r19, r1
    2742:	2c f4       	brge	.+10     	; 0x274e <DIO_u8GetPortValue+0x3c>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	61 f0       	breq	.+24     	; 0x2764 <DIO_u8GetPortValue+0x52>
    274c:	1e c0       	rjmp	.+60     	; 0x278a <DIO_u8GetPortValue+0x78>
    274e:	2b 81       	ldd	r18, Y+3	; 0x03
    2750:	3c 81       	ldd	r19, Y+4	; 0x04
    2752:	22 30       	cpi	r18, 0x02	; 2
    2754:	31 05       	cpc	r19, r1
    2756:	81 f0       	breq	.+32     	; 0x2778 <DIO_u8GetPortValue+0x66>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	83 30       	cpi	r24, 0x03	; 3
    275e:	91 05       	cpc	r25, r1
    2760:	81 f0       	breq	.+32     	; 0x2782 <DIO_u8GetPortValue+0x70>
    2762:	13 c0       	rjmp	.+38     	; 0x278a <DIO_u8GetPortValue+0x78>
        {
            case PORTA :    Local_u8Variable = PINA_REG ;   break;  
    2764:	e9 e3       	ldi	r30, 0x39	; 57
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	0e c0       	rjmp	.+28     	; 0x278a <DIO_u8GetPortValue+0x78>
            case PORTB :    Local_u8Variable = PINB_REG ;   break;
    276e:	e6 e3       	ldi	r30, 0x36	; 54
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	09 c0       	rjmp	.+18     	; 0x278a <DIO_u8GetPortValue+0x78>
            case PORTC :    Local_u8Variable = PINC_REG ;   break;
    2778:	e3 e3       	ldi	r30, 0x33	; 51
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	04 c0       	rjmp	.+8      	; 0x278a <DIO_u8GetPortValue+0x78>
            case PORTD :    Local_u8Variable = PIND_REG ;   break;
    2782:	e0 e3       	ldi	r30, 0x30	; 48
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <DIO_voidTogglePinValue>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }  */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <DIO_voidTogglePinValue+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <DIO_voidTogglePinValue+0x8>
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	84 30       	cpi	r24, 0x04	; 4
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <DIO_voidTogglePinValue+0x18>
    27b0:	72 c0       	rjmp	.+228    	; 0x2896 <DIO_voidTogglePinValue+0xfc>
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	88 30       	cpi	r24, 0x08	; 8
    27b6:	08 f0       	brcs	.+2      	; 0x27ba <DIO_voidTogglePinValue+0x20>
    27b8:	6e c0       	rjmp	.+220    	; 0x2896 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	3c 83       	std	Y+4, r19	; 0x04
    27c2:	2b 83       	std	Y+3, r18	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	91 05       	cpc	r25, r1
    27cc:	49 f1       	breq	.+82     	; 0x2820 <DIO_voidTogglePinValue+0x86>
    27ce:	2b 81       	ldd	r18, Y+3	; 0x03
    27d0:	3c 81       	ldd	r19, Y+4	; 0x04
    27d2:	22 30       	cpi	r18, 0x02	; 2
    27d4:	31 05       	cpc	r19, r1
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <DIO_voidTogglePinValue+0x48>
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	61 f0       	breq	.+24     	; 0x27f8 <DIO_voidTogglePinValue+0x5e>
    27e0:	5a c0       	rjmp	.+180    	; 0x2896 <DIO_voidTogglePinValue+0xfc>
    27e2:	2b 81       	ldd	r18, Y+3	; 0x03
    27e4:	3c 81       	ldd	r19, Y+4	; 0x04
    27e6:	22 30       	cpi	r18, 0x02	; 2
    27e8:	31 05       	cpc	r19, r1
    27ea:	71 f1       	breq	.+92     	; 0x2848 <DIO_voidTogglePinValue+0xae>
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	83 30       	cpi	r24, 0x03	; 3
    27f2:	91 05       	cpc	r25, r1
    27f4:	e9 f1       	breq	.+122    	; 0x2870 <DIO_voidTogglePinValue+0xd6>
    27f6:	4f c0       	rjmp	.+158    	; 0x2896 <DIO_voidTogglePinValue+0xfc>
        {
            case PORTA :    TOGGLE_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    27f8:	ab e3       	ldi	r26, 0x3B	; 59
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	eb e3       	ldi	r30, 0x3B	; 59
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	02 2e       	mov	r0, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <DIO_voidTogglePinValue+0x7c>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	0a 94       	dec	r0
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <DIO_voidTogglePinValue+0x78>
    281a:	84 27       	eor	r24, r20
    281c:	8c 93       	st	X, r24
    281e:	3b c0       	rjmp	.+118    	; 0x2896 <DIO_voidTogglePinValue+0xfc>
            case PORTB :    TOGGLE_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    2820:	a8 e3       	ldi	r26, 0x38	; 56
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e8 e3       	ldi	r30, 0x38	; 56
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	48 2f       	mov	r20, r24
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <DIO_voidTogglePinValue+0xa4>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <DIO_voidTogglePinValue+0xa0>
    2842:	84 27       	eor	r24, r20
    2844:	8c 93       	st	X, r24
    2846:	27 c0       	rjmp	.+78     	; 0x2896 <DIO_voidTogglePinValue+0xfc>
            case PORTC :    TOGGLE_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    2848:	a5 e3       	ldi	r26, 0x35	; 53
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e3       	ldi	r30, 0x35	; 53
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <DIO_voidTogglePinValue+0xcc>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <DIO_voidTogglePinValue+0xc8>
    286a:	84 27       	eor	r24, r20
    286c:	8c 93       	st	X, r24
    286e:	13 c0       	rjmp	.+38     	; 0x2896 <DIO_voidTogglePinValue+0xfc>
            case PORTD :    TOGGLE_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    2870:	a2 e3       	ldi	r26, 0x32	; 50
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e2 e3       	ldi	r30, 0x32	; 50
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_voidTogglePinValue+0xf4>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_voidTogglePinValue+0xf0>
    2892:	84 27       	eor	r24, r20
    2894:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <DIO_voidTogglePortValue>:
/* Description : Toggles pin values of the whole Port register              */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }            */
/* Fun. Return : void                                                       */
/****************************************************************************/
void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <DIO_voidTogglePortValue+0x6>
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	08 f0       	brcs	.+2      	; 0x28ba <DIO_voidTogglePortValue+0x16>
    28b8:	3e c0       	rjmp	.+124    	; 0x2936 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	3b 83       	std	Y+3, r19	; 0x03
    28c2:	2a 83       	std	Y+2, r18	; 0x02
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	9b 81       	ldd	r25, Y+3	; 0x03
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	91 05       	cpc	r25, r1
    28cc:	e9 f0       	breq	.+58     	; 0x2908 <DIO_voidTogglePortValue+0x64>
    28ce:	2a 81       	ldd	r18, Y+2	; 0x02
    28d0:	3b 81       	ldd	r19, Y+3	; 0x03
    28d2:	22 30       	cpi	r18, 0x02	; 2
    28d4:	31 05       	cpc	r19, r1
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <DIO_voidTogglePortValue+0x3e>
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	61 f0       	breq	.+24     	; 0x28f8 <DIO_voidTogglePortValue+0x54>
    28e0:	2a c0       	rjmp	.+84     	; 0x2936 <DIO_voidTogglePortValue+0x92>
    28e2:	2a 81       	ldd	r18, Y+2	; 0x02
    28e4:	3b 81       	ldd	r19, Y+3	; 0x03
    28e6:	22 30       	cpi	r18, 0x02	; 2
    28e8:	31 05       	cpc	r19, r1
    28ea:	b1 f0       	breq	.+44     	; 0x2918 <DIO_voidTogglePortValue+0x74>
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	83 30       	cpi	r24, 0x03	; 3
    28f2:	91 05       	cpc	r25, r1
    28f4:	c9 f0       	breq	.+50     	; 0x2928 <DIO_voidTogglePortValue+0x84>
    28f6:	1f c0       	rjmp	.+62     	; 0x2936 <DIO_voidTogglePortValue+0x92>
        {
            case PORTA :    PORTA_REG ^= 0xff ;     break;           
    28f8:	ab e3       	ldi	r26, 0x3B	; 59
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	eb e3       	ldi	r30, 0x3B	; 59
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	80 95       	com	r24
    2904:	8c 93       	st	X, r24
    2906:	17 c0       	rjmp	.+46     	; 0x2936 <DIO_voidTogglePortValue+0x92>
            case PORTB :    PORTB_REG ^= 0xff ;     break;          
    2908:	a8 e3       	ldi	r26, 0x38	; 56
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e8 e3       	ldi	r30, 0x38	; 56
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 95       	com	r24
    2914:	8c 93       	st	X, r24
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <DIO_voidTogglePortValue+0x92>
            case PORTC :    PORTC_REG ^= 0xff ;     break; 
    2918:	a5 e3       	ldi	r26, 0x35	; 53
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e5 e3       	ldi	r30, 0x35	; 53
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	80 95       	com	r24
    2924:	8c 93       	st	X, r24
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <DIO_voidTogglePortValue+0x92>
            case PORTD :    PORTD_REG ^= 0xff ;     break; 
    2928:	a2 e3       	ldi	r26, 0x32	; 50
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e2 e3       	ldi	r30, 0x32	; 50
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	80 95       	com	r24
    2934:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <DIO_voidConfig_Pull_Up_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                         */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <DIO_voidConfig_Pull_Up_Pin+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <DIO_voidConfig_Pull_Up_Pin+0x8>
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	6a 83       	std	Y+2, r22	; 0x02
    2954:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	e0 f4       	brcc	.+56     	; 0x2994 <DIO_voidConfig_Pull_Up_Pin+0x52>
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	88 30       	cpi	r24, 0x08	; 8
    2960:	c8 f4       	brcc	.+50     	; 0x2994 <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	3d 83       	std	Y+5, r19	; 0x05
    296a:	2c 83       	std	Y+4, r18	; 0x04
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	9d 81       	ldd	r25, Y+5	; 0x05
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	59 f0       	breq	.+22     	; 0x298a <DIO_voidConfig_Pull_Up_Pin+0x48>
    2974:	2c 81       	ldd	r18, Y+4	; 0x04
    2976:	3d 81       	ldd	r19, Y+5	; 0x05
    2978:	21 30       	cpi	r18, 0x01	; 1
    297a:	31 05       	cpc	r19, r1
    297c:	59 f4       	brne	.+22     	; 0x2994 <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, HIGH );   break;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	6a 81       	ldd	r22, Y+2	; 0x02
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    2988:	05 c0       	rjmp	.+10     	; 0x2994 <DIO_voidConfig_Pull_Up_Pin+0x52>
            case OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, LOW  );   break; 
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	6a 81       	ldd	r22, Y+2	; 0x02
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
            default  :                                                                      break; 
       }
    }    
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <DIO_voidConfig_Pull_Up_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                   */
/* Fun. Argument2: Copy_u8PullUpStatus { ON , OFF }                                                */
/* Fun. Return : void                                                                              */
/***************************************************************************************************/
void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <DIO_voidConfig_Pull_Up_Port+0x6>
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <DIO_voidConfig_Pull_Up_Port+0x8>
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	84 30       	cpi	r24, 0x04	; 4
    29b8:	b8 f4       	brcc	.+46     	; 0x29e8 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	3c 83       	std	Y+4, r19	; 0x04
    29c2:	2b 83       	std	Y+3, r18	; 0x03
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	51 f0       	breq	.+20     	; 0x29e0 <DIO_voidConfig_Pull_Up_Port+0x3c>
    29cc:	2b 81       	ldd	r18, Y+3	; 0x03
    29ce:	3c 81       	ldd	r19, Y+4	; 0x04
    29d0:	21 30       	cpi	r18, 0x01	; 1
    29d2:	31 05       	cpc	r19, r1
    29d4:	49 f4       	brne	.+18     	; 0x29e8 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    29de:	04 c0       	rjmp	.+8      	; 0x29e8 <DIO_voidConfig_Pull_Up_Port+0x44>
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }    
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <ADC_voidInit>:
/* Function Name : ADC_voidInit                                                                 */
/* Description : Initilization of ADC with Specific Specs accordig to Gonfigration File.h       */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void ADC_voidInit (void)
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
/*--------------------------------------*/
    #if ( REFERENCE_VOLTAGE == AREF )
        CLEAR_BIT(ADMUX_REG,6);
        CLEAR_BIT(ADMUX_REG,7);
    #elif ( REFERENCE_VOLTAGE == AVCC )
        SET_BIT(ADMUX_REG,6);
    29fe:	a7 e2       	ldi	r26, 0x27	; 39
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e7 e2       	ldi	r30, 0x27	; 39
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	80 64       	ori	r24, 0x40	; 64
    2a0a:	8c 93       	st	X, r24
        CLEAR_BIT(ADMUX_REG,7);
    2a0c:	a7 e2       	ldi	r26, 0x27	; 39
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e7 e2       	ldi	r30, 0x27	; 39
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	8f 77       	andi	r24, 0x7F	; 127
    2a18:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*     Select RIGHT or LEFT Adjust      */
/*--------------------------------------*/
    #if ( ADJUST == RIGHT )
        CLEAR_BIT(ADMUX_REG,5);
    2a1a:	a7 e2       	ldi	r26, 0x27	; 39
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e7 e2       	ldi	r30, 0x27	; 39
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8f 7d       	andi	r24, 0xDF	; 223
    2a26:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*        ADC Enable or Disable         */
/*--------------------------------------*/
    #if ( ADEN == ENABLE )
        SET_BIT(ADCSRA_REG,7);  
    2a28:	a6 e2       	ldi	r26, 0x26	; 38
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e6 e2       	ldi	r30, 0x26	; 38
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	80 68       	ori	r24, 0x80	; 128
    2a34:	8c 93       	st	X, r24
              SET_BIT(SFIOR_REG,6);
              SET_BIT(SFIOR_REG,7);
        #endif

    #elif ( ADATE == DISABLE )
        CLEAR_BIT(ADCSRA_REG,5); 
    2a36:	a6 e2       	ldi	r26, 0x26	; 38
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e6 e2       	ldi	r30, 0x26	; 38
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8f 7d       	andi	r24, 0xDF	; 223
    2a42:	8c 93       	st	X, r24
/*    ADC Interrupt Enable or Disable   */
/*--------------------------------------*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        SET_BIT(ADCSRA_REG,3);  
    #elif ( ADIE == DISABLE )       // work with Polling
        CLEAR_BIT(ADCSRA_REG,3); 
    2a44:	a6 e2       	ldi	r26, 0x26	; 38
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e6 e2       	ldi	r30, 0x26	; 38
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	87 7f       	andi	r24, 0xF7	; 247
    2a50:	8c 93       	st	X, r24
    #endif
/*======================================*/
/*       ADC Prescaler Selection        */
/*--------------------------------------*/
    /*     Clear Prescaler      */ 
    ADCSRA_REG = ( ADCSRA_REG & 0b11111000 );
    2a52:	a6 e2       	ldi	r26, 0x26	; 38
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e6 e2       	ldi	r30, 0x26	; 38
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 7f       	andi	r24, 0xF8	; 248
    2a5e:	8c 93       	st	X, r24
          SET_BIT(ADCSRA_REG,0);
          SET_BIT(ADCSRA_REG,1);
          SET_BIT(ADCSRA_REG,2);
    #endif
/*======================================*/
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <ADC_u16ReadSynchronus>:
/* Description : Get Analog Reading From ADC                                                    */
/* Fun. Argument1: Copy_u8ChannelNumber { ADC0,ADC1,ADC2,ADC3,ADC4,ADC5,ADC6,ADC7 }             */
/* Fun. Return : u16                                                                            */
/************************************************************************************************/
u16 ADC_u16ReadSynchronus ( u8 Copy_u8ChannelNumber ) 
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <ADC_u16ReadSynchronus+0x6>
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <ADC_u16ReadSynchronus+0x8>
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	8a 83       	std	Y+2, r24	; 0x02
/*===============================================================================================*/
    /*     Clear MUX      */ 
    ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    2a74:	a7 e2       	ldi	r26, 0x27	; 39
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e7 e2       	ldi	r30, 0x27	; 39
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 7e       	andi	r24, 0xE0	; 224
    2a80:	8c 93       	st	X, r24
/*===============================================================================================*/
    /*   Select channel   */ 
    switch ( Copy_u8ChannelNumber )
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	28 2f       	mov	r18, r24
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	3c 83       	std	Y+4, r19	; 0x04
    2a8a:	2b 83       	std	Y+3, r18	; 0x03
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	83 30       	cpi	r24, 0x03	; 3
    2a92:	91 05       	cpc	r25, r1
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <ADC_u16ReadSynchronus+0x32>
    2a96:	45 c0       	rjmp	.+138    	; 0x2b22 <ADC_u16ReadSynchronus+0xbc>
    2a98:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9c:	24 30       	cpi	r18, 0x04	; 4
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	7c f4       	brge	.+30     	; 0x2ac0 <ADC_u16ReadSynchronus+0x5a>
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	81 30       	cpi	r24, 0x01	; 1
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	49 f1       	breq	.+82     	; 0x2afe <ADC_u16ReadSynchronus+0x98>
    2aac:	2b 81       	ldd	r18, Y+3	; 0x03
    2aae:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab0:	22 30       	cpi	r18, 0x02	; 2
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	6c f5       	brge	.+90     	; 0x2b10 <ADC_u16ReadSynchronus+0xaa>
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	c1 f0       	breq	.+48     	; 0x2aee <ADC_u16ReadSynchronus+0x88>
    2abe:	5d c0       	rjmp	.+186    	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
    2ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac4:	25 30       	cpi	r18, 0x05	; 5
    2ac6:	31 05       	cpc	r19, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <ADC_u16ReadSynchronus+0x66>
    2aca:	3d c0       	rjmp	.+122    	; 0x2b46 <ADC_u16ReadSynchronus+0xe0>
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	85 30       	cpi	r24, 0x05	; 5
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	7c f1       	brlt	.+94     	; 0x2b34 <ADC_u16ReadSynchronus+0xce>
    2ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    2ada:	26 30       	cpi	r18, 0x06	; 6
    2adc:	31 05       	cpc	r19, r1
    2ade:	e1 f1       	breq	.+120    	; 0x2b58 <ADC_u16ReadSynchronus+0xf2>
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	87 30       	cpi	r24, 0x07	; 7
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <ADC_u16ReadSynchronus+0x86>
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <ADC_u16ReadSynchronus+0x104>
    2aec:	46 c0       	rjmp	.+140    	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
    {
        case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    2aee:	a7 e2       	ldi	r26, 0x27	; 39
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e7 e2       	ldi	r30, 0x27	; 39
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	80 7e       	andi	r24, 0xE0	; 224
    2afa:	8c 93       	st	X, r24
    2afc:	3e c0       	rjmp	.+124    	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    2afe:	a7 e2       	ldi	r26, 0x27	; 39
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e7 e2       	ldi	r30, 0x27	; 39
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	80 7e       	andi	r24, 0xE0	; 224
    2b0a:	81 60       	ori	r24, 0x01	; 1
    2b0c:	8c 93       	st	X, r24
    2b0e:	35 c0       	rjmp	.+106    	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    2b10:	a7 e2       	ldi	r26, 0x27	; 39
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e7 e2       	ldi	r30, 0x27	; 39
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	80 7e       	andi	r24, 0xE0	; 224
    2b1c:	82 60       	ori	r24, 0x02	; 2
    2b1e:	8c 93       	st	X, r24
    2b20:	2c c0       	rjmp	.+88     	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    2b22:	a7 e2       	ldi	r26, 0x27	; 39
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e7 e2       	ldi	r30, 0x27	; 39
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	80 7e       	andi	r24, 0xE0	; 224
    2b2e:	83 60       	ori	r24, 0x03	; 3
    2b30:	8c 93       	st	X, r24
    2b32:	23 c0       	rjmp	.+70     	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    2b34:	a7 e2       	ldi	r26, 0x27	; 39
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e7 e2       	ldi	r30, 0x27	; 39
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	80 7e       	andi	r24, 0xE0	; 224
    2b40:	84 60       	ori	r24, 0x04	; 4
    2b42:	8c 93       	st	X, r24
    2b44:	1a c0       	rjmp	.+52     	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    2b46:	a7 e2       	ldi	r26, 0x27	; 39
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e7 e2       	ldi	r30, 0x27	; 39
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 7e       	andi	r24, 0xE0	; 224
    2b52:	85 60       	ori	r24, 0x05	; 5
    2b54:	8c 93       	st	X, r24
    2b56:	11 c0       	rjmp	.+34     	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    2b58:	a7 e2       	ldi	r26, 0x27	; 39
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e7 e2       	ldi	r30, 0x27	; 39
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 7e       	andi	r24, 0xE0	; 224
    2b64:	86 60       	ori	r24, 0x06	; 6
    2b66:	8c 93       	st	X, r24
    2b68:	08 c0       	rjmp	.+16     	; 0x2b7a <ADC_u16ReadSynchronus+0x114>
        case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    2b6a:	a7 e2       	ldi	r26, 0x27	; 39
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e7 e2       	ldi	r30, 0x27	; 39
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 7e       	andi	r24, 0xE0	; 224
    2b76:	87 60       	ori	r24, 0x07	; 7
    2b78:	8c 93       	st	X, r24
/*===============================================================================================*/  
    /*    Start Conversion    */ 
    #if ( ADATE == ENABLE )
        // Start Conversion When Triggering Occures.
    #elif ( ADATE == DISABLE )
        SET_BIT(ADCSRA_REG,6);  
    2b7a:	a6 e2       	ldi	r26, 0x26	; 38
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e6 e2       	ldi	r30, 0x26	; 38
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	80 64       	ori	r24, 0x40	; 64
    2b86:	8c 93       	st	X, r24
/*===============================================================================================*/    
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	05 c0       	rjmp	.+10     	; 0x2b96 <ADC_u16ReadSynchronus+0x130>
        while( ADIF == 0 )
        {
            ADIF = GET_BIT(ADCSRA_REG,4);    // Stuck on while untill Flag Raising 1 .
    2b8c:	e6 e2       	ldi	r30, 0x26	; 38
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	80 71       	andi	r24, 0x10	; 16
    2b94:	89 83       	std	Y+1, r24	; 0x01
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
        while( ADIF == 0 )
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	88 23       	and	r24, r24
    2b9a:	c1 f3       	breq	.-16     	; 0x2b8c <ADC_u16ReadSynchronus+0x126>
/*===============================================================================================*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        // Interrupt Flag Will Cleared Automaticlly.    
    #elif ( ADIE == DISABLE )       // work with Polling
        /* Clear Flag */
        SET_BIT(ADCSRA_REG,4);
    2b9c:	a6 e2       	ldi	r26, 0x26	; 38
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e6 e2       	ldi	r30, 0x26	; 38
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 61       	ori	r24, 0x10	; 16
    2ba8:	8c 93       	st	X, r24
/*********************************************************     Get Reading      *********************************************/
/*        Get Reading from 16 Bit ADC_REG  if we used RIGHT Adjust and Resoluotion 10 BIT  Return Value From { 0 -> 1023 }  */
/*        Get Reading from 8 Bit ADCH_REG  if we used LEFT Adjust and Resoluotion  8 BIT   Return Value From { 0 -> 255  }  */
/*--------------------------------------------------------------------------------------------------------------------------*/
    #if ( ADJUST == RIGHT )
        return ADC_REG ;      
    2baa:	e4 e2       	ldi	r30, 0x24	; 36
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
/*********************************     This Equation Used in App      ****************************/
        //  Analog_Signal =   Digital_Signal *  Step Size
        //  Analog_Signal = ( Digital_Signal * V max )  / 2^Rsolution   // Rsolution =10 BIT & Vmax = 5v = 5000 mv 
        //  Analog_Signal = ( Digital_Signal * 5000UL ) / 1024  
/*===============================================================================================*/
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <ADC_u16ReadASynchronus>:
/* Fun. Argument2:{ void (*Local_PvoidCallBackFunctionPtr) (void) }                             */
/*                Pointer to function that = Address of application function                    */
/* Fun. Return : u16                                                                            */
/************************************************************************************************/
u16 ADC_u16ReadASynchronus ( u8 Copy_u8ChannelNumber ,  void (*Local_PvoidCallBackFunctionPtr) (void) ) 
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	27 97       	sbiw	r28, 0x07	; 7
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	7b 83       	std	Y+3, r23	; 0x03
    2bd8:	6a 83       	std	Y+2, r22	; 0x02
    if ( (ADC_u18BusyFlag == BUSY) ||  (Local_PvoidCallBackFunctionPtr == NULL) )
    2bda:	80 91 b3 00 	lds	r24, 0x00B3
    2bde:	88 23       	and	r24, r24
    2be0:	21 f0       	breq	.+8      	; 0x2bea <ADC_u16ReadASynchronus+0x2a>
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	19 f4       	brne	.+6      	; 0x2bf0 <ADC_u16ReadASynchronus+0x30>
    {
        return 0;
    2bea:	1f 82       	std	Y+7, r1	; 0x07
    2bec:	1e 82       	std	Y+6, r1	; 0x06
    2bee:	9f c0       	rjmp	.+318    	; 0x2d2e <ADC_u16ReadASynchronus+0x16e>
    }
    else
    {
        /*   Make the ADC State is Busy   */
            ADC_u18BusyFlag = BUSY ;
    2bf0:	10 92 b3 00 	sts	0x00B3, r1
        /*===============================================================================================*/
            /*     Clear MUX      */ 
            ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    2bf4:	a7 e2       	ldi	r26, 0x27	; 39
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e7 e2       	ldi	r30, 0x27	; 39
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 7e       	andi	r24, 0xE0	; 224
    2c00:	8c 93       	st	X, r24
        /*===============================================================================================*/
            /*   Select channel   */ 
            switch ( Copy_u8ChannelNumber )
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	3d 83       	std	Y+5, r19	; 0x05
    2c0a:	2c 83       	std	Y+4, r18	; 0x04
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c10:	83 30       	cpi	r24, 0x03	; 3
    2c12:	91 05       	cpc	r25, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <ADC_u16ReadASynchronus+0x58>
    2c16:	45 c0       	rjmp	.+138    	; 0x2ca2 <ADC_u16ReadASynchronus+0xe2>
    2c18:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1c:	24 30       	cpi	r18, 0x04	; 4
    2c1e:	31 05       	cpc	r19, r1
    2c20:	7c f4       	brge	.+30     	; 0x2c40 <ADC_u16ReadASynchronus+0x80>
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	9d 81       	ldd	r25, Y+5	; 0x05
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	91 05       	cpc	r25, r1
    2c2a:	49 f1       	breq	.+82     	; 0x2c7e <ADC_u16ReadASynchronus+0xbe>
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c30:	22 30       	cpi	r18, 0x02	; 2
    2c32:	31 05       	cpc	r19, r1
    2c34:	6c f5       	brge	.+90     	; 0x2c90 <ADC_u16ReadASynchronus+0xd0>
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	c1 f0       	breq	.+48     	; 0x2c6e <ADC_u16ReadASynchronus+0xae>
    2c3e:	5d c0       	rjmp	.+186    	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
    2c40:	2c 81       	ldd	r18, Y+4	; 0x04
    2c42:	3d 81       	ldd	r19, Y+5	; 0x05
    2c44:	25 30       	cpi	r18, 0x05	; 5
    2c46:	31 05       	cpc	r19, r1
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <ADC_u16ReadASynchronus+0x8c>
    2c4a:	3d c0       	rjmp	.+122    	; 0x2cc6 <ADC_u16ReadASynchronus+0x106>
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c50:	85 30       	cpi	r24, 0x05	; 5
    2c52:	91 05       	cpc	r25, r1
    2c54:	7c f1       	brlt	.+94     	; 0x2cb4 <ADC_u16ReadASynchronus+0xf4>
    2c56:	2c 81       	ldd	r18, Y+4	; 0x04
    2c58:	3d 81       	ldd	r19, Y+5	; 0x05
    2c5a:	26 30       	cpi	r18, 0x06	; 6
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	e1 f1       	breq	.+120    	; 0x2cd8 <ADC_u16ReadASynchronus+0x118>
    2c60:	8c 81       	ldd	r24, Y+4	; 0x04
    2c62:	9d 81       	ldd	r25, Y+5	; 0x05
    2c64:	87 30       	cpi	r24, 0x07	; 7
    2c66:	91 05       	cpc	r25, r1
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <ADC_u16ReadASynchronus+0xac>
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <ADC_u16ReadASynchronus+0x12a>
    2c6c:	46 c0       	rjmp	.+140    	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
            {
                case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    2c6e:	a7 e2       	ldi	r26, 0x27	; 39
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e7 e2       	ldi	r30, 0x27	; 39
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 7e       	andi	r24, 0xE0	; 224
    2c7a:	8c 93       	st	X, r24
    2c7c:	3e c0       	rjmp	.+124    	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    2c7e:	a7 e2       	ldi	r26, 0x27	; 39
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e7 e2       	ldi	r30, 0x27	; 39
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	80 7e       	andi	r24, 0xE0	; 224
    2c8a:	81 60       	ori	r24, 0x01	; 1
    2c8c:	8c 93       	st	X, r24
    2c8e:	35 c0       	rjmp	.+106    	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 7e       	andi	r24, 0xE0	; 224
    2c9c:	82 60       	ori	r24, 0x02	; 2
    2c9e:	8c 93       	st	X, r24
    2ca0:	2c c0       	rjmp	.+88     	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    2ca2:	a7 e2       	ldi	r26, 0x27	; 39
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e7 e2       	ldi	r30, 0x27	; 39
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 7e       	andi	r24, 0xE0	; 224
    2cae:	83 60       	ori	r24, 0x03	; 3
    2cb0:	8c 93       	st	X, r24
    2cb2:	23 c0       	rjmp	.+70     	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    2cb4:	a7 e2       	ldi	r26, 0x27	; 39
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e7 e2       	ldi	r30, 0x27	; 39
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 7e       	andi	r24, 0xE0	; 224
    2cc0:	84 60       	ori	r24, 0x04	; 4
    2cc2:	8c 93       	st	X, r24
    2cc4:	1a c0       	rjmp	.+52     	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    2cc6:	a7 e2       	ldi	r26, 0x27	; 39
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e7 e2       	ldi	r30, 0x27	; 39
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	80 7e       	andi	r24, 0xE0	; 224
    2cd2:	85 60       	ori	r24, 0x05	; 5
    2cd4:	8c 93       	st	X, r24
    2cd6:	11 c0       	rjmp	.+34     	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    2cd8:	a7 e2       	ldi	r26, 0x27	; 39
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e7 e2       	ldi	r30, 0x27	; 39
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 7e       	andi	r24, 0xE0	; 224
    2ce4:	86 60       	ori	r24, 0x06	; 6
    2ce6:	8c 93       	st	X, r24
    2ce8:	08 c0       	rjmp	.+16     	; 0x2cfa <ADC_u16ReadASynchronus+0x13a>
                case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    2cea:	a7 e2       	ldi	r26, 0x27	; 39
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e7 e2       	ldi	r30, 0x27	; 39
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	80 7e       	andi	r24, 0xE0	; 224
    2cf6:	87 60       	ori	r24, 0x07	; 7
    2cf8:	8c 93       	st	X, r24
                default   :                                                                 break;
            }
        /*===============================================================================================*/
            /*    Set The Call Back Function    */ 
            Global_PF_Vector_16 = Local_PvoidCallBackFunctionPtr ;
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	90 93 b0 00 	sts	0x00B0, r25
    2d02:	80 93 af 00 	sts	0x00AF, r24
        /*===============================================================================================*/   
            /*    Start Conversion    */ 
            #if ( ADATE == ENABLE )
                // Start Conversion When Triggering Occures.
            #elif ( ADATE == DISABLE )
                SET_BIT(ADCSRA_REG,6);  
    2d06:	a6 e2       	ldi	r26, 0x26	; 38
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e6 e2       	ldi	r30, 0x26	; 38
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 64       	ori	r24, 0x40	; 64
    2d12:	8c 93       	st	X, r24
            #endif
        /*===============================================================================================*/   
            /*     Enable ADIE  AD Interrupt Enable  and Interrupt Flag Will Cleared Automaticlly.       */   
            SET_BIT(ADCSRA_REG,3);
    2d14:	a6 e2       	ldi	r26, 0x26	; 38
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e6 e2       	ldi	r30, 0x26	; 38
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 60       	ori	r24, 0x08	; 8
    2d20:	8c 93       	st	X, r24
        /*==========================================================================================================================*/
           return ADC_u16Result ; 
    2d22:	20 91 b1 00 	lds	r18, 0x00B1
    2d26:	30 91 b2 00 	lds	r19, 0x00B2
    2d2a:	3f 83       	std	Y+7, r19	; 0x07
    2d2c:	2e 83       	std	Y+6, r18	; 0x06
    2d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d30:	9f 81       	ldd	r25, Y+7	; 0x07
        /*===============================================================================================*/
    }
}
    2d32:	27 96       	adiw	r28, 0x07	; 7
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <ADC_getTemperature>:

void ADC_getTemperature ( u8 Copy_u8ChannelNumber , Temperature * Outdata )
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <ADC_getTemperature+0x6>
    2d4a:	0f 92       	push	r0
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	7b 83       	std	Y+3, r23	; 0x03
    2d54:	6a 83       	std	Y+2, r22	; 0x02
    Outdata->digitalValue = ADC_u16ReadSynchronus(Copy_u8ChannelNumber);
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	0e 94 33 15 	call	0x2a66	; 0x2a66 <ADC_u16ReadSynchronus>
    2d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    Outdata->analogValue  = (Outdata->digitalValue * 5000UL) / 1024;
    2d64:	ea 81       	ldd	r30, Y+2	; 0x02
    2d66:	fb 81       	ldd	r31, Y+3	; 0x03
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	cc 01       	movw	r24, r24
    2d6e:	a0 e0       	ldi	r26, 0x00	; 0
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	28 e8       	ldi	r18, 0x88	; 136
    2d74:	33 e1       	ldi	r19, 0x13	; 19
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 81 21 	call	0x4302	; 0x4302 <__mulsi3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	07 2e       	mov	r0, r23
    2d88:	7a e0       	ldi	r23, 0x0A	; 10
    2d8a:	b6 95       	lsr	r27
    2d8c:	a7 95       	ror	r26
    2d8e:	97 95       	ror	r25
    2d90:	87 95       	ror	r24
    2d92:	7a 95       	dec	r23
    2d94:	d1 f7       	brne	.-12     	; 0x2d8a <ADC_getTemperature+0x46>
    2d96:	70 2d       	mov	r23, r0
    2d98:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9c:	93 83       	std	Z+3, r25	; 0x03
    2d9e:	82 83       	std	Z+2, r24	; 0x02
    Outdata->tempValue    =  Outdata->analogValue / 10 ;
    2da0:	ea 81       	ldd	r30, Y+2	; 0x02
    2da2:	fb 81       	ldd	r31, Y+3	; 0x03
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	2a e0       	ldi	r18, 0x0A	; 10
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	b9 01       	movw	r22, r18
    2dae:	0e 94 a0 21 	call	0x4340	; 0x4340 <__udivmodhi4>
    2db2:	cb 01       	movw	r24, r22
    2db4:	ea 81       	ldd	r30, Y+2	; 0x02
    2db6:	fb 81       	ldd	r31, Y+3	; 0x03
    2db8:	95 83       	std	Z+5, r25	; 0x05
    2dba:	84 83       	std	Z+4, r24	; 0x04
}
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <__vector_16>:

void __vector_16 (void)   __attribute__((signal));
void __vector_16 (void)
{
    2dc8:	1f 92       	push	r1
    2dca:	0f 92       	push	r0
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	0f 92       	push	r0
    2dd0:	11 24       	eor	r1, r1
    2dd2:	2f 93       	push	r18
    2dd4:	3f 93       	push	r19
    2dd6:	4f 93       	push	r20
    2dd8:	5f 93       	push	r21
    2dda:	6f 93       	push	r22
    2ddc:	7f 93       	push	r23
    2dde:	8f 93       	push	r24
    2de0:	9f 93       	push	r25
    2de2:	af 93       	push	r26
    2de4:	bf 93       	push	r27
    2de6:	ef 93       	push	r30
    2de8:	ff 93       	push	r31
    2dea:	df 93       	push	r29
    2dec:	cf 93       	push	r28
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
/*********************************************************     Read ADC Result      *****************************************/
/*        Get Reading from 16 Bit ADC_REG  if we used RIGHT Adjust and Resoluotion 10 BIT  Return Value From { 0 -> 1023 }  */
/*        Get Reading from 8 Bit ADCH_REG  if we used LEFT Adjust and Resoluotion  8 BIT   Return Value From { 0 -> 255  }  */
/*--------------------------------------------------------------------------------------------------------------------------*/
    #if ( ADJUST == RIGHT )
    ADC_u16Result = ADC_REG ;      
    2df2:	e4 e2       	ldi	r30, 0x24	; 36
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	90 93 b2 00 	sts	0x00B2, r25
    2dfe:	80 93 b1 00 	sts	0x00B1, r24
    #elif ( ADJUST == LEFT )
    ADC_u16Result = ADCH_REG ;
    #endif

/*   Make the ADC State is NOT Busy because it's Completed   */
    ADC_u18BusyFlag = NOT_BUSY ;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	80 93 b3 00 	sts	0x00B3, r24

/*   Call Call Back Function br Global PTR   */
    Global_PF_Vector_16 ();
    2e08:	e0 91 af 00 	lds	r30, 0x00AF
    2e0c:	f0 91 b0 00 	lds	r31, 0x00B0
    2e10:	09 95       	icall

/*     Disable ADIE  AD Interrupt Enable     */   
    CLEAR_BIT(ADCSRA_REG,3);   
    2e12:	a6 e2       	ldi	r26, 0x26	; 38
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e6 e2       	ldi	r30, 0x26	; 38
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	87 7f       	andi	r24, 0xF7	; 247
    2e1e:	8c 93       	st	X, r24
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	ff 91       	pop	r31
    2e26:	ef 91       	pop	r30
    2e28:	bf 91       	pop	r27
    2e2a:	af 91       	pop	r26
    2e2c:	9f 91       	pop	r25
    2e2e:	8f 91       	pop	r24
    2e30:	7f 91       	pop	r23
    2e32:	6f 91       	pop	r22
    2e34:	5f 91       	pop	r21
    2e36:	4f 91       	pop	r20
    2e38:	3f 91       	pop	r19
    2e3a:	2f 91       	pop	r18
    2e3c:	0f 90       	pop	r0
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	0f 90       	pop	r0
    2e42:	1f 90       	pop	r1
    2e44:	18 95       	reti

00002e46 <SERVO_voidRotateSpecificAngle_OC1A>:
/* Description : Rotate Servo Motor with Specific Angle by PWM TIMER1 at PIN  OCA1   (PD5)      */                                         
/* Fun. Argument1:  Copy_u16Angle      Angle From [ 0  To  180 ] Degree                         */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    2e4e:	00 d0       	rcall	.+0      	; 0x2e50 <SERVO_voidRotateSpecificAngle_OC1A+0xa>
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	9e 83       	std	Y+6, r25	; 0x06
    2e56:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(PORTD,PIN5,OUTPUT);
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	65 e0       	ldi	r22, 0x05	; 5
    2e5c:	41 e0       	ldi	r20, 0x01	; 1
    2e5e:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = (((Copy_u16Angle * 1000UL) + 180000) / (180)) - 1 ;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	cc 01       	movw	r24, r24
    2e68:	a0 e0       	ldi	r26, 0x00	; 0
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	28 ee       	ldi	r18, 0xE8	; 232
    2e6e:	33 e0       	ldi	r19, 0x03	; 3
    2e70:	40 e0       	ldi	r20, 0x00	; 0
    2e72:	50 e0       	ldi	r21, 0x00	; 0
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 81 21 	call	0x4302	; 0x4302 <__mulsi3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	80 5e       	subi	r24, 0xE0	; 224
    2e82:	90 44       	sbci	r25, 0x40	; 64
    2e84:	ad 4f       	sbci	r26, 0xFD	; 253
    2e86:	bf 4f       	sbci	r27, 0xFF	; 255
    2e88:	24 eb       	ldi	r18, 0xB4	; 180
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e0       	ldi	r20, 0x00	; 0
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 b4 21 	call	0x4368	; 0x4368 <__udivmodsi4>
    2e98:	da 01       	movw	r26, r20
    2e9a:	c9 01       	movw	r24, r18
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	a1 09       	sbc	r26, r1
    2ea0:	b1 09       	sbc	r27, r1
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	ab 83       	std	Y+3, r26	; 0x03
    2ea8:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_voidBahaa_u16PWM_T1A ( Local_u32Variable ,19999);
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	6f e1       	ldi	r22, 0x1F	; 31
    2eb0:	7e e4       	ldi	r23, 0x4E	; 78
    2eb2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <TIMER1_voidBahaa_u16PWM_T1A>
}
    2eb6:	26 96       	adiw	r28, 0x06	; 6
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <SERVO_voidRotateSpecificAngle_OC1B>:
/* Description : Rotate Servo Motor with Specific Angle by PWM TIMER1 at PIN  OCB1 (PD4)        */                                         
/* Fun. Argument1:  Copy_u16Angle      Angle From [ 0  To  180 ] Degree                         */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SERVO_voidRotateSpecificAngle_OC1B ( u16 Copy_u16Angle )
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <SERVO_voidRotateSpecificAngle_OC1B+0x6>
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <SERVO_voidRotateSpecificAngle_OC1B+0x8>
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <SERVO_voidRotateSpecificAngle_OC1B+0xa>
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(PORTD,PIN4,OUTPUT);
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	64 e0       	ldi	r22, 0x04	; 4
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable =  (((Copy_u16Angle * 1000UL) + 180000) / (180)) - 1 ;
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	cc 01       	movw	r24, r24
    2eea:	a0 e0       	ldi	r26, 0x00	; 0
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	28 ee       	ldi	r18, 0xE8	; 232
    2ef0:	33 e0       	ldi	r19, 0x03	; 3
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 81 21 	call	0x4302	; 0x4302 <__mulsi3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	80 5e       	subi	r24, 0xE0	; 224
    2f04:	90 44       	sbci	r25, 0x40	; 64
    2f06:	ad 4f       	sbci	r26, 0xFD	; 253
    2f08:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0a:	24 eb       	ldi	r18, 0xB4	; 180
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 b4 21 	call	0x4368	; 0x4368 <__udivmodsi4>
    2f1a:	da 01       	movw	r26, r20
    2f1c:	c9 01       	movw	r24, r18
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	a1 09       	sbc	r26, r1
    2f22:	b1 09       	sbc	r27, r1
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	ab 83       	std	Y+3, r26	; 0x03
    2f2a:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_voidBahaa_u16PWM_T1B ( Local_u32Variable ,19999);
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	6f e1       	ldi	r22, 0x1F	; 31
    2f32:	7e e4       	ldi	r23, 0x4E	; 78
    2f34:	0e 94 01 08 	call	0x1002	; 0x1002 <TIMER1_voidBahaa_u16PWM_T1B>
    2f38:	26 96       	adiw	r28, 0x06	; 6
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	cf 91       	pop	r28
    2f46:	df 91       	pop	r29
    2f48:	08 95       	ret

00002f4a <LED_voidInit_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }        */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    2f4a:	df 93       	push	r29
    2f4c:	cf 93       	push	r28
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <LED_voidInit_Led_Pin+0x6>
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	84 30       	cpi	r24, 0x04	; 4
    2f5c:	40 f4       	brcc	.+16     	; 0x2f6e <LED_voidInit_Led_Pin+0x24>
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	88 30       	cpi	r24, 0x08	; 8
    2f62:	28 f4       	brcc	.+10     	; 0x2f6e <LED_voidInit_Led_Pin+0x24>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,OUTPUT);
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	6a 81       	ldd	r22, Y+2	; 0x02
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    }
}
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <LED_voidInit_8Leds_Port>:
/* Description : Initialize string of 8 LEDs on specific Port                     */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                  */
/* Fun. Return : void                                                             */
/**********************************************************************************/
void LED_voidInit_8Leds_Port ( u8 Copy_u8PortNumber)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	0f 92       	push	r0
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	84 30       	cpi	r24, 0x04	; 4
    2f88:	20 f4       	brcc	.+8      	; 0x2f92 <LED_voidInit_8Leds_Port+0x1a>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPortDirection ( Copy_u8PortNumber, OUTPUT );
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
    }
}
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <LED_voidStatus_Led_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Status )
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <LED_voidStatus_Led_Pin+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <LED_voidStatus_Led_Pin+0x8>
    2fa2:	0f 92       	push	r0
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	6a 83       	std	Y+2, r22	; 0x02
    2fac:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	84 30       	cpi	r24, 0x04	; 4
    2fb2:	e0 f4       	brcc	.+56     	; 0x2fec <LED_voidStatus_Led_Pin+0x52>
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	88 30       	cpi	r24, 0x08	; 8
    2fb8:	c8 f4       	brcc	.+50     	; 0x2fec <LED_voidStatus_Led_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	3d 83       	std	Y+5, r19	; 0x05
    2fc2:	2c 83       	std	Y+4, r18	; 0x04
    2fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	59 f0       	breq	.+22     	; 0x2fe2 <LED_voidStatus_Led_Pin+0x48>
    2fcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2fce:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd0:	21 30       	cpi	r18, 0x01	; 1
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	59 f4       	brne	.+22     	; 0x2fec <LED_voidStatus_Led_Pin+0x52>
        {
            case ON  :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, HIGH );     break;
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	6a 81       	ldd	r22, Y+2	; 0x02
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <LED_voidStatus_Led_Pin+0x52>
            case OFF :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, LOW  );     break;
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	6a 81       	ldd	r22, Y+2	; 0x02
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
            default  :                                                                          break;
        }
    }
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	08 95       	ret

00002ffc <LED_voidStatus_8Leds_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8Status { ON ,OFF }                                                         */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_8Leds_Port ( u8 Copy_u8PortNumber, u8 Copy_u8Status )
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	00 d0       	rcall	.+0      	; 0x3002 <LED_voidStatus_8Leds_Port+0x6>
    3002:	00 d0       	rcall	.+0      	; 0x3004 <LED_voidStatus_8Leds_Port+0x8>
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	89 83       	std	Y+1, r24	; 0x01
    300a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  )
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	b8 f4       	brcc	.+46     	; 0x3040 <LED_voidStatus_8Leds_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	3c 83       	std	Y+4, r19	; 0x04
    301a:	2b 83       	std	Y+3, r18	; 0x03
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	51 f0       	breq	.+20     	; 0x3038 <LED_voidStatus_8Leds_Port+0x3c>
    3024:	2b 81       	ldd	r18, Y+3	; 0x03
    3026:	3c 81       	ldd	r19, Y+4	; 0x04
    3028:	21 30       	cpi	r18, 0x01	; 1
    302a:	31 05       	cpc	r19, r1
    302c:	49 f4       	brne	.+18     	; 0x3040 <LED_voidStatus_8Leds_Port+0x44>
        {
            case ON  :   DIO_voidSetPortValue ( Copy_u8PortNumber, HIGH );     break;
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	61 e0       	ldi	r22, 0x01	; 1
    3032:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    3036:	04 c0       	rjmp	.+8      	; 0x3040 <LED_voidStatus_8Leds_Port+0x44>
            case OFF :   DIO_voidSetPortValue ( Copy_u8PortNumber, LOW  );     break;
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
            default  :                                                         break;
        }
    }
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <LED_voidToggle_Led_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }            */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <LED_voidToggle_Led_Pin+0x6>
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	84 30       	cpi	r24, 0x04	; 4
    3060:	38 f4       	brcc	.+14     	; 0x3070 <LED_voidToggle_Led_Pin+0x22>
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	88 30       	cpi	r24, 0x08	; 8
    3066:	20 f4       	brcc	.+8      	; 0x3070 <LED_voidToggle_Led_Pin+0x22>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePinValue ( Copy_u8PortNumber, Copy_u8PinNumber );
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	6a 81       	ldd	r22, Y+2	; 0x02
    306c:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_voidTogglePinValue>
    }
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <LED_voidToggle_8Leds_Port>:
/* Description : Toggle Status of String 8 leds from Turn ON to OFF & from OFF to ON  */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                      */
/* Fun. Return : void                                                                 */
/**************************************************************************************/
void LED_voidToggle_8Leds_Port ( u8 Copy_u8PortNumber )
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	84 30       	cpi	r24, 0x04	; 4
    308a:	18 f4       	brcc	.+6      	; 0x3092 <LED_voidToggle_8Leds_Port+0x18>
    {
        // Do Nothing
    }
    else
    {
        DIO_voidTogglePortValue ( Copy_u8PortNumber );
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <DIO_voidTogglePortValue>
    }
}
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <LCD_voidInit>:
/* Function Name : [1] LCD_voidInit                                                      */
/* Description : Initialized the LCD                                                     */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidInit (void)
{
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	c6 54       	subi	r28, 0x46	; 70
    30a8:	d0 40       	sbci	r29, 0x00	; 0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , OUTPUT);
    30b4:	83 e0       	ldi	r24, 0x03	; 3
    30b6:	61 e0       	ldi	r22, 0x01	; 1
    30b8:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,OUTPUT);
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	62 e0       	ldi	r22, 0x02	; 2
    30c0:	41 e0       	ldi	r20, 0x01	; 1
    30c2:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,OUTPUT);
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	66 e0       	ldi	r22, 0x06	; 6
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,OUTPUT);
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	63 e0       	ldi	r22, 0x03	; 3
    30d4:	41 e0       	ldi	r20, 0x01	; 1
    30d6:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    30da:	fe 01       	movw	r30, r28
    30dc:	ed 5b       	subi	r30, 0xBD	; 189
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	ac e0       	ldi	r26, 0x0C	; 12
    30e6:	b2 e4       	ldi	r27, 0x42	; 66
    30e8:	80 83       	st	Z, r24
    30ea:	91 83       	std	Z+1, r25	; 0x01
    30ec:	a2 83       	std	Z+2, r26	; 0x02
    30ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f0:	8e 01       	movw	r16, r28
    30f2:	01 5c       	subi	r16, 0xC1	; 193
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	ed 5b       	subi	r30, 0xBD	; 189
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	f8 01       	movw	r30, r16
    3116:	80 83       	st	Z, r24
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	a2 83       	std	Z+2, r26	; 0x02
    311c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    311e:	fe 01       	movw	r30, r28
    3120:	ff 96       	adiw	r30, 0x3f	; 63
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <LCD_voidInit+0xaa>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9e af       	std	Y+62, r25	; 0x3e
    3140:	8d af       	std	Y+61, r24	; 0x3d
    3142:	46 c0       	rjmp	.+140    	; 0x31d0 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    3144:	fe 01       	movw	r30, r28
    3146:	ff 96       	adiw	r30, 0x3f	; 63
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	3f ef       	ldi	r19, 0xFF	; 255
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	57 e4       	ldi	r21, 0x47	; 71
    3158:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	64 f5       	brge	.+88     	; 0x31b8 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	fe 01       	movw	r30, r28
    3162:	ed 5b       	subi	r30, 0xBD	; 189
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e2       	ldi	r20, 0x20	; 32
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9e af       	std	Y+62, r25	; 0x3e
    318c:	8d af       	std	Y+61, r24	; 0x3d
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <LCD_voidInit+0x114>
    3190:	88 ec       	ldi	r24, 0xC8	; 200
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	9c af       	std	Y+60, r25	; 0x3c
    3196:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3198:	8b ad       	ldd	r24, Y+59	; 0x3b
    319a:	9c ad       	ldd	r25, Y+60	; 0x3c
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <LCD_voidInit+0x102>
    31a0:	9c af       	std	Y+60, r25	; 0x3c
    31a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	9e af       	std	Y+62, r25	; 0x3e
    31ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	69 f7       	brne	.-38     	; 0x3190 <LCD_voidInit+0xf6>
    31b6:	16 c0       	rjmp	.+44     	; 0x31e4 <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	fe 01       	movw	r30, r28
    31ba:	ff 96       	adiw	r30, 0x3f	; 63
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9e af       	std	Y+62, r25	; 0x3e
    31ce:	8d af       	std	Y+61, r24	; 0x3d
    31d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    31d4:	9a af       	std	Y+58, r25	; 0x3a
    31d6:	89 af       	std	Y+57, r24	; 0x39
    31d8:	89 ad       	ldd	r24, Y+57	; 0x39
    31da:	9a ad       	ldd	r25, Y+58	; 0x3a
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_voidInit+0x142>
    31e0:	9a af       	std	Y+58, r25	; 0x3a
    31e2:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_delay_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x10 );
    31e4:	8c e3       	ldi	r24, 0x3C	; 60
    31e6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	a0 e8       	ldi	r26, 0x80	; 128
    31f0:	bf e3       	ldi	r27, 0x3F	; 63
    31f2:	8d ab       	std	Y+53, r24	; 0x35
    31f4:	9e ab       	std	Y+54, r25	; 0x36
    31f6:	af ab       	std	Y+55, r26	; 0x37
    31f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	6d a9       	ldd	r22, Y+53	; 0x35
    31fc:	7e a9       	ldd	r23, Y+54	; 0x36
    31fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3200:	98 ad       	ldd	r25, Y+56	; 0x38
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4a ef       	ldi	r20, 0xFA	; 250
    3208:	54 e4       	ldi	r21, 0x44	; 68
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	89 ab       	std	Y+49, r24	; 0x31
    3214:	9a ab       	std	Y+50, r25	; 0x32
    3216:	ab ab       	std	Y+51, r26	; 0x33
    3218:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    321a:	69 a9       	ldd	r22, Y+49	; 0x31
    321c:	7a a9       	ldd	r23, Y+50	; 0x32
    321e:	8b a9       	ldd	r24, Y+51	; 0x33
    3220:	9c a9       	ldd	r25, Y+52	; 0x34
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <LCD_voidInit+0x1a2>
		__ticks = 1;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	98 ab       	std	Y+48, r25	; 0x30
    3238:	8f a7       	std	Y+47, r24	; 0x2f
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    323c:	69 a9       	ldd	r22, Y+49	; 0x31
    323e:	7a a9       	ldd	r23, Y+50	; 0x32
    3240:	8b a9       	ldd	r24, Y+51	; 0x33
    3242:	9c a9       	ldd	r25, Y+52	; 0x34
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	57 e4       	ldi	r21, 0x47	; 71
    324c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	4c f5       	brge	.+82     	; 0x32a6 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3254:	6d a9       	ldd	r22, Y+53	; 0x35
    3256:	7e a9       	ldd	r23, Y+54	; 0x36
    3258:	8f a9       	ldd	r24, Y+55	; 0x37
    325a:	98 ad       	ldd	r25, Y+56	; 0x38
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	98 ab       	std	Y+48, r25	; 0x30
    327a:	8f a7       	std	Y+47, r24	; 0x2f
    327c:	0f c0       	rjmp	.+30     	; 0x329c <LCD_voidInit+0x202>
    327e:	88 ec       	ldi	r24, 0xC8	; 200
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9e a7       	std	Y+46, r25	; 0x2e
    3284:	8d a7       	std	Y+45, r24	; 0x2d
    3286:	8d a5       	ldd	r24, Y+45	; 0x2d
    3288:	9e a5       	ldd	r25, Y+46	; 0x2e
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <LCD_voidInit+0x1f0>
    328e:	9e a7       	std	Y+46, r25	; 0x2e
    3290:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8f a5       	ldd	r24, Y+47	; 0x2f
    3294:	98 a9       	ldd	r25, Y+48	; 0x30
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	98 ab       	std	Y+48, r25	; 0x30
    329a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8f a5       	ldd	r24, Y+47	; 0x2f
    329e:	98 a9       	ldd	r25, Y+48	; 0x30
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <LCD_voidInit+0x1e4>
    32a4:	14 c0       	rjmp	.+40     	; 0x32ce <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	69 a9       	ldd	r22, Y+49	; 0x31
    32a8:	7a a9       	ldd	r23, Y+50	; 0x32
    32aa:	8b a9       	ldd	r24, Y+51	; 0x33
    32ac:	9c a9       	ldd	r25, Y+52	; 0x34
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	98 ab       	std	Y+48, r25	; 0x30
    32b8:	8f a7       	std	Y+47, r24	; 0x2f
    32ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    32bc:	98 a9       	ldd	r25, Y+48	; 0x30
    32be:	9c a7       	std	Y+44, r25	; 0x2c
    32c0:	8b a7       	std	Y+43, r24	; 0x2b
    32c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <LCD_voidInit+0x22c>
    32ca:	9c a7       	std	Y+44, r25	; 0x2c
    32cc:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_delay_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    32ce:	8c e0       	ldi	r24, 0x0C	; 12
    32d0:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	a0 e8       	ldi	r26, 0x80	; 128
    32da:	bf e3       	ldi	r27, 0x3F	; 63
    32dc:	8f a3       	std	Y+39, r24	; 0x27
    32de:	98 a7       	std	Y+40, r25	; 0x28
    32e0:	a9 a7       	std	Y+41, r26	; 0x29
    32e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e4:	6f a1       	ldd	r22, Y+39	; 0x27
    32e6:	78 a5       	ldd	r23, Y+40	; 0x28
    32e8:	89 a5       	ldd	r24, Y+41	; 0x29
    32ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	4a ef       	ldi	r20, 0xFA	; 250
    32f2:	54 e4       	ldi	r21, 0x44	; 68
    32f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8b a3       	std	Y+35, r24	; 0x23
    32fe:	9c a3       	std	Y+36, r25	; 0x24
    3300:	ad a3       	std	Y+37, r26	; 0x25
    3302:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3304:	6b a1       	ldd	r22, Y+35	; 0x23
    3306:	7c a1       	ldd	r23, Y+36	; 0x24
    3308:	8d a1       	ldd	r24, Y+37	; 0x25
    330a:	9e a1       	ldd	r25, Y+38	; 0x26
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e8       	ldi	r20, 0x80	; 128
    3312:	5f e3       	ldi	r21, 0x3F	; 63
    3314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3318:	88 23       	and	r24, r24
    331a:	2c f4       	brge	.+10     	; 0x3326 <LCD_voidInit+0x28c>
		__ticks = 1;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9a a3       	std	Y+34, r25	; 0x22
    3322:	89 a3       	std	Y+33, r24	; 0x21
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    3326:	6b a1       	ldd	r22, Y+35	; 0x23
    3328:	7c a1       	ldd	r23, Y+36	; 0x24
    332a:	8d a1       	ldd	r24, Y+37	; 0x25
    332c:	9e a1       	ldd	r25, Y+38	; 0x26
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	3f ef       	ldi	r19, 0xFF	; 255
    3332:	4f e7       	ldi	r20, 0x7F	; 127
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    333a:	18 16       	cp	r1, r24
    333c:	4c f5       	brge	.+82     	; 0x3390 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333e:	6f a1       	ldd	r22, Y+39	; 0x27
    3340:	78 a5       	ldd	r23, Y+40	; 0x28
    3342:	89 a5       	ldd	r24, Y+41	; 0x29
    3344:	9a a5       	ldd	r25, Y+42	; 0x2a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	bc 01       	movw	r22, r24
    3358:	cd 01       	movw	r24, r26
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9a a3       	std	Y+34, r25	; 0x22
    3364:	89 a3       	std	Y+33, r24	; 0x21
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <LCD_voidInit+0x2ec>
    3368:	88 ec       	ldi	r24, 0xC8	; 200
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	98 a3       	std	Y+32, r25	; 0x20
    336e:	8f 8f       	std	Y+31, r24	; 0x1f
    3370:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3372:	98 a1       	ldd	r25, Y+32	; 0x20
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_voidInit+0x2da>
    3378:	98 a3       	std	Y+32, r25	; 0x20
    337a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337c:	89 a1       	ldd	r24, Y+33	; 0x21
    337e:	9a a1       	ldd	r25, Y+34	; 0x22
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	9a a3       	std	Y+34, r25	; 0x22
    3384:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3386:	89 a1       	ldd	r24, Y+33	; 0x21
    3388:	9a a1       	ldd	r25, Y+34	; 0x22
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	69 f7       	brne	.-38     	; 0x3368 <LCD_voidInit+0x2ce>
    338e:	14 c0       	rjmp	.+40     	; 0x33b8 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3390:	6b a1       	ldd	r22, Y+35	; 0x23
    3392:	7c a1       	ldd	r23, Y+36	; 0x24
    3394:	8d a1       	ldd	r24, Y+37	; 0x25
    3396:	9e a1       	ldd	r25, Y+38	; 0x26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9a a3       	std	Y+34, r25	; 0x22
    33a2:	89 a3       	std	Y+33, r24	; 0x21
    33a4:	89 a1       	ldd	r24, Y+33	; 0x21
    33a6:	9a a1       	ldd	r25, Y+34	; 0x22
    33a8:	9e 8f       	std	Y+30, r25	; 0x1e
    33aa:	8d 8f       	std	Y+29, r24	; 0x1d
    33ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	f1 f7       	brne	.-4      	; 0x33b0 <LCD_voidInit+0x316>
    33b4:	9e 8f       	std	Y+30, r25	; 0x1e
    33b6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_delay_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	a0 e0       	ldi	r26, 0x00	; 0
    33c4:	b0 e4       	ldi	r27, 0x40	; 64
    33c6:	89 8f       	std	Y+25, r24	; 0x19
    33c8:	9a 8f       	std	Y+26, r25	; 0x1a
    33ca:	ab 8f       	std	Y+27, r26	; 0x1b
    33cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ce:	69 8d       	ldd	r22, Y+25	; 0x19
    33d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	4a ef       	ldi	r20, 0xFA	; 250
    33dc:	54 e4       	ldi	r21, 0x44	; 68
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	8d 8b       	std	Y+21, r24	; 0x15
    33e8:	9e 8b       	std	Y+22, r25	; 0x16
    33ea:	af 8b       	std	Y+23, r26	; 0x17
    33ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ee:	6d 89       	ldd	r22, Y+21	; 0x15
    33f0:	7e 89       	ldd	r23, Y+22	; 0x16
    33f2:	8f 89       	ldd	r24, Y+23	; 0x17
    33f4:	98 8d       	ldd	r25, Y+24	; 0x18
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e8       	ldi	r20, 0x80	; 128
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3402:	88 23       	and	r24, r24
    3404:	2c f4       	brge	.+10     	; 0x3410 <LCD_voidInit+0x376>
		__ticks = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
    340e:	3f c0       	rjmp	.+126    	; 0x348e <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    3410:	6d 89       	ldd	r22, Y+21	; 0x15
    3412:	7e 89       	ldd	r23, Y+22	; 0x16
    3414:	8f 89       	ldd	r24, Y+23	; 0x17
    3416:	98 8d       	ldd	r25, Y+24	; 0x18
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	4f e7       	ldi	r20, 0x7F	; 127
    341e:	57 e4       	ldi	r21, 0x47	; 71
    3420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3424:	18 16       	cp	r1, r24
    3426:	4c f5       	brge	.+82     	; 0x347a <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	69 8d       	ldd	r22, Y+25	; 0x19
    342a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e2       	ldi	r20, 0x20	; 32
    3436:	51 e4       	ldi	r21, 0x41	; 65
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9c 8b       	std	Y+20, r25	; 0x14
    344e:	8b 8b       	std	Y+19, r24	; 0x13
    3450:	0f c0       	rjmp	.+30     	; 0x3470 <LCD_voidInit+0x3d6>
    3452:	88 ec       	ldi	r24, 0xC8	; 200
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9a 8b       	std	Y+18, r25	; 0x12
    3458:	89 8b       	std	Y+17, r24	; 0x11
    345a:	89 89       	ldd	r24, Y+17	; 0x11
    345c:	9a 89       	ldd	r25, Y+18	; 0x12
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <LCD_voidInit+0x3c4>
    3462:	9a 8b       	std	Y+18, r25	; 0x12
    3464:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3466:	8b 89       	ldd	r24, Y+19	; 0x13
    3468:	9c 89       	ldd	r25, Y+20	; 0x14
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	9c 8b       	std	Y+20, r25	; 0x14
    346e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	8b 89       	ldd	r24, Y+19	; 0x13
    3472:	9c 89       	ldd	r25, Y+20	; 0x14
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	69 f7       	brne	.-38     	; 0x3452 <LCD_voidInit+0x3b8>
    3478:	14 c0       	rjmp	.+40     	; 0x34a2 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347a:	6d 89       	ldd	r22, Y+21	; 0x15
    347c:	7e 89       	ldd	r23, Y+22	; 0x16
    347e:	8f 89       	ldd	r24, Y+23	; 0x17
    3480:	98 8d       	ldd	r25, Y+24	; 0x18
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9c 8b       	std	Y+20, r25	; 0x14
    348c:	8b 8b       	std	Y+19, r24	; 0x13
    348e:	8b 89       	ldd	r24, Y+19	; 0x13
    3490:	9c 89       	ldd	r25, Y+20	; 0x14
    3492:	98 8b       	std	Y+16, r25	; 0x10
    3494:	8f 87       	std	Y+15, r24	; 0x0f
    3496:	8f 85       	ldd	r24, Y+15	; 0x0f
    3498:	98 89       	ldd	r25, Y+16	; 0x10
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <LCD_voidInit+0x400>
    349e:	98 8b       	std	Y+16, r25	; 0x10
    34a0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_delay_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    34a2:	86 e0       	ldi	r24, 0x06	; 6
    34a4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e8       	ldi	r26, 0x80	; 128
    34ae:	bf e3       	ldi	r27, 0x3F	; 63
    34b0:	8b 87       	std	Y+11, r24	; 0x0b
    34b2:	9c 87       	std	Y+12, r25	; 0x0c
    34b4:	ad 87       	std	Y+13, r26	; 0x0d
    34b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    34bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34be:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a ef       	ldi	r20, 0xFA	; 250
    34c6:	54 e4       	ldi	r21, 0x44	; 68
    34c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	8f 83       	std	Y+7, r24	; 0x07
    34d2:	98 87       	std	Y+8, r25	; 0x08
    34d4:	a9 87       	std	Y+9, r26	; 0x09
    34d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d8:	6f 81       	ldd	r22, Y+7	; 0x07
    34da:	78 85       	ldd	r23, Y+8	; 0x08
    34dc:	89 85       	ldd	r24, Y+9	; 0x09
    34de:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	2c f4       	brge	.+10     	; 0x34fa <LCD_voidInit+0x460>
		__ticks = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
    34f8:	3f c0       	rjmp	.+126    	; 0x3578 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    34fa:	6f 81       	ldd	r22, Y+7	; 0x07
    34fc:	78 85       	ldd	r23, Y+8	; 0x08
    34fe:	89 85       	ldd	r24, Y+9	; 0x09
    3500:	9a 85       	ldd	r25, Y+10	; 0x0a
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	3f ef       	ldi	r19, 0xFF	; 255
    3506:	4f e7       	ldi	r20, 0x7F	; 127
    3508:	57 e4       	ldi	r21, 0x47	; 71
    350a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    350e:	18 16       	cp	r1, r24
    3510:	4c f5       	brge	.+82     	; 0x3564 <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3512:	6b 85       	ldd	r22, Y+11	; 0x0b
    3514:	7c 85       	ldd	r23, Y+12	; 0x0c
    3516:	8d 85       	ldd	r24, Y+13	; 0x0d
    3518:	9e 85       	ldd	r25, Y+14	; 0x0e
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9e 83       	std	Y+6, r25	; 0x06
    3538:	8d 83       	std	Y+5, r24	; 0x05
    353a:	0f c0       	rjmp	.+30     	; 0x355a <LCD_voidInit+0x4c0>
    353c:	88 ec       	ldi	r24, 0xC8	; 200
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9c 83       	std	Y+4, r25	; 0x04
    3542:	8b 83       	std	Y+3, r24	; 0x03
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	9c 81       	ldd	r25, Y+4	; 0x04
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <LCD_voidInit+0x4ae>
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3550:	8d 81       	ldd	r24, Y+5	; 0x05
    3552:	9e 81       	ldd	r25, Y+6	; 0x06
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	9e 83       	std	Y+6, r25	; 0x06
    3558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f7       	brne	.-38     	; 0x353c <LCD_voidInit+0x4a2>
    3562:	14 c0       	rjmp	.+40     	; 0x358c <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9e 83       	std	Y+6, r25	; 0x06
    3576:	8d 83       	std	Y+5, r24	; 0x05
    3578:	8d 81       	ldd	r24, Y+5	; 0x05
    357a:	9e 81       	ldd	r25, Y+6	; 0x06
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	9a 81       	ldd	r25, Y+2	; 0x02
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <LCD_voidInit+0x4ea>
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_delay_ms(1);

}
    358c:	ca 5b       	subi	r28, 0xBA	; 186
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <LCD_voidWriteCommand>:
/* Description : Send a Command to the LCD                                               */
/* Fun. Argument1: Copy_u8Command                                                        */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	2f 97       	sbiw	r28, 0x0f	; 15
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,LOW);
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	62 e0       	ldi	r22, 0x02	; 2
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	66 e0       	ldi	r22, 0x06	; 6
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    35ce:	83 e0       	ldi	r24, 0x03	; 3
    35d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    35d2:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	63 e0       	ldi	r22, 0x03	; 3
    35da:	41 e0       	ldi	r20, 0x01	; 1
    35dc:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e4       	ldi	r27, 0x40	; 64
    35e8:	8b 87       	std	Y+11, r24	; 0x0b
    35ea:	9c 87       	std	Y+12, r25	; 0x0c
    35ec:	ad 87       	std	Y+13, r26	; 0x0d
    35ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a ef       	ldi	r20, 0xFA	; 250
    35fe:	54 e4       	ldi	r21, 0x44	; 68
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	8f 83       	std	Y+7, r24	; 0x07
    360a:	98 87       	std	Y+8, r25	; 0x08
    360c:	a9 87       	std	Y+9, r26	; 0x09
    360e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3610:	6f 81       	ldd	r22, Y+7	; 0x07
    3612:	78 85       	ldd	r23, Y+8	; 0x08
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9e 83       	std	Y+6, r25	; 0x06
    362e:	8d 83       	std	Y+5, r24	; 0x05
    3630:	3f c0       	rjmp	.+126    	; 0x36b0 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    3632:	6f 81       	ldd	r22, Y+7	; 0x07
    3634:	78 85       	ldd	r23, Y+8	; 0x08
    3636:	89 85       	ldd	r24, Y+9	; 0x09
    3638:	9a 85       	ldd	r25, Y+10	; 0x0a
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	4c f5       	brge	.+82     	; 0x369c <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	6b 85       	ldd	r22, Y+11	; 0x0b
    364c:	7c 85       	ldd	r23, Y+12	; 0x0c
    364e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3650:	9e 85       	ldd	r25, Y+14	; 0x0e
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9e 83       	std	Y+6, r25	; 0x06
    3670:	8d 83       	std	Y+5, r24	; 0x05
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <LCD_voidWriteCommand+0xee>
    3674:	88 ec       	ldi	r24, 0xC8	; 200
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
    367c:	8b 81       	ldd	r24, Y+3	; 0x03
    367e:	9c 81       	ldd	r25, Y+4	; 0x04
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCD_voidWriteCommand+0xdc>
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	8d 81       	ldd	r24, Y+5	; 0x05
    368a:	9e 81       	ldd	r25, Y+6	; 0x06
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9e 83       	std	Y+6, r25	; 0x06
    3690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	9e 81       	ldd	r25, Y+6	; 0x06
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <LCD_voidWriteCommand+0xd0>
    369a:	14 c0       	rjmp	.+40     	; 0x36c4 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	6f 81       	ldd	r22, Y+7	; 0x07
    369e:	78 85       	ldd	r23, Y+8	; 0x08
    36a0:	89 85       	ldd	r24, Y+9	; 0x09
    36a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9e 83       	std	Y+6, r25	; 0x06
    36ae:	8d 83       	std	Y+5, r24	; 0x05
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	9a 83       	std	Y+2, r25	; 0x02
    36b6:	89 83       	std	Y+1, r24	; 0x01
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <LCD_voidWriteCommand+0x118>
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	63 e0       	ldi	r22, 0x03	; 3
    36c8:	40 e0       	ldi	r20, 0x00	; 0
    36ca:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
}
    36ce:	2f 96       	adiw	r28, 0x0f	; 15
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	08 95       	ret

000036e0 <LCD_voidWriteChar>:
/* Description : Send a Data to the LCD   ( Character Data )                             */
/* Fun. Argument1: Copy_u8Char                                                           */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	2f 97       	sbiw	r28, 0x0f	; 15
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,HIGH);
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	62 e0       	ldi	r22, 0x02	; 2
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,LOW);
    3700:	82 e0       	ldi	r24, 0x02	; 2
    3702:	66 e0       	ldi	r22, 0x06	; 6
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	6f 85       	ldd	r22, Y+15	; 0x0f
    370e:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,HIGH);
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	63 e0       	ldi	r22, 0x03	; 3
    3716:	41 e0       	ldi	r20, 0x01	; 1
    3718:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e4       	ldi	r27, 0x40	; 64
    3724:	8b 87       	std	Y+11, r24	; 0x0b
    3726:	9c 87       	std	Y+12, r25	; 0x0c
    3728:	ad 87       	std	Y+13, r26	; 0x0d
    372a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6b 85       	ldd	r22, Y+11	; 0x0b
    372e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3730:	8d 85       	ldd	r24, Y+13	; 0x0d
    3732:	9e 85       	ldd	r25, Y+14	; 0x0e
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a ef       	ldi	r20, 0xFA	; 250
    373a:	54 e4       	ldi	r21, 0x44	; 68
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8f 83       	std	Y+7, r24	; 0x07
    3746:	98 87       	std	Y+8, r25	; 0x08
    3748:	a9 87       	std	Y+9, r26	; 0x09
    374a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <LCD_voidWriteChar+0x8e>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <LCD_voidWriteChar+0x10c>
	else if (__tmp > 65535)
    376e:	6f 81       	ldd	r22, Y+7	; 0x07
    3770:	78 85       	ldd	r23, Y+8	; 0x08
    3772:	89 85       	ldd	r24, Y+9	; 0x09
    3774:	9a 85       	ldd	r25, Y+10	; 0x0a
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <LCD_voidWriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6b 85       	ldd	r22, Y+11	; 0x0b
    3788:	7c 85       	ldd	r23, Y+12	; 0x0c
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	9e 85       	ldd	r25, Y+14	; 0x0e
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <LCD_voidWriteChar+0xee>
    37b0:	88 ec       	ldi	r24, 0xC8	; 200
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <LCD_voidWriteChar+0xdc>
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <LCD_voidWriteChar+0xd0>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <LCD_voidWriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_voidWriteChar+0x118>
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,LOW);
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	63 e0       	ldi	r22, 0x03	; 3
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
}
    380a:	2f 96       	adiw	r28, 0x0f	; 15
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <LCD_voidWriteString>:
/* Description : Send a Data of String to the LCD                                        */
/* Fun. Argument1: *Copy_u8Arr      ( String Data | array of character )                 */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <LCD_voidWriteString+0x6>
    3822:	0f 92       	push	r0
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	9b 83       	std	Y+3, r25	; 0x03
    382a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    382c:	19 82       	std	Y+1, r1	; 0x01
    382e:	0e c0       	rjmp	.+28     	; 0x384c <LCD_voidWriteString+0x30>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	28 2f       	mov	r18, r24
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	9b 81       	ldd	r25, Y+3	; 0x03
    383a:	fc 01       	movw	r30, r24
    383c:	e2 0f       	add	r30, r18
    383e:	f3 1f       	adc	r31, r19
    3840:	80 81       	ld	r24, Z
    3842:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
        i++;
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	8f 5f       	subi	r24, 0xFF	; 255
    384a:	89 83       	std	Y+1, r24	; 0x01
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	fc 01       	movw	r30, r24
    3858:	e2 0f       	add	r30, r18
    385a:	f3 1f       	adc	r31, r19
    385c:	80 81       	ld	r24, Z
    385e:	88 23       	and	r24, r24
    3860:	39 f7       	brne	.-50     	; 0x3830 <LCD_voidWriteString+0x14>
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
        i++;
    }
}
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <LCD_voidWrite_u32Number>:
/* Description : Send a Long Number  to the LCD                                          */
/* Fun. Argument1: Copy_u32Number     ( unsigned integer number )                        */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	6b 97       	sbiw	r28, 0x1b	; 27
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	68 8f       	std	Y+24, r22	; 0x18
    3888:	79 8f       	std	Y+25, r23	; 0x19
    388a:	8a 8f       	std	Y+26, r24	; 0x1a
    388c:	9b 8f       	std	Y+27, r25	; 0x1b
    u8 Arr[20] ; // {1,2,5}
    u8 i=0 ;    
    388e:	1b 82       	std	Y+3, r1	; 0x03
    3890:	2d c0       	rjmp	.+90     	; 0x38ec <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )        // assume number = 521
    {                                   // iteration_0      // iteration_1  // iteration_2
        Arr[i] = Copy_u32Number % 10 ;  // 521%10 = 1       // 52%10 = 2    // 5%10 = 5
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	08 2f       	mov	r16, r24
    3896:	10 e0       	ldi	r17, 0x00	; 0
    3898:	88 8d       	ldd	r24, Y+24	; 0x18
    389a:	99 8d       	ldd	r25, Y+25	; 0x19
    389c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    389e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    38a0:	2a e0       	ldi	r18, 0x0A	; 10
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 b4 21 	call	0x4368	; 0x4368 <__udivmodsi4>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	28 2f       	mov	r18, r24
    38b6:	ce 01       	movw	r24, r28
    38b8:	04 96       	adiw	r24, 0x04	; 4
    38ba:	fc 01       	movw	r30, r24
    38bc:	e0 0f       	add	r30, r16
    38be:	f1 1f       	adc	r31, r17
    38c0:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;          // 521/10 = 52      // 52/10 = 5    // 5/10 = 0
    38c2:	88 8d       	ldd	r24, Y+24	; 0x18
    38c4:	99 8d       	ldd	r25, Y+25	; 0x19
    38c6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    38c8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    38ca:	2a e0       	ldi	r18, 0x0A	; 10
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 b4 21 	call	0x4368	; 0x4368 <__udivmodsi4>
    38da:	da 01       	movw	r26, r20
    38dc:	c9 01       	movw	r24, r18
    38de:	88 8f       	std	Y+24, r24	; 0x18
    38e0:	99 8f       	std	Y+25, r25	; 0x19
    38e2:	aa 8f       	std	Y+26, r26	; 0x1a
    38e4:	bb 8f       	std	Y+27, r27	; 0x1b
        i++;                            // i = 1            // i = 2        // i = 3
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	8f 5f       	subi	r24, 0xFF	; 255
    38ea:	8b 83       	std	Y+3, r24	; 0x03
/*****************************************************************************************/
void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[20] ; // {1,2,5}
    u8 i=0 ;    
    while ( Copy_u32Number > 0 )        // assume number = 521
    38ec:	88 8d       	ldd	r24, Y+24	; 0x18
    38ee:	99 8d       	ldd	r25, Y+25	; 0x19
    38f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    38f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	a1 05       	cpc	r26, r1
    38f8:	b1 05       	cpc	r27, r1
    38fa:	59 f6       	brne	.-106    	; 0x3892 <LCD_voidWrite_u32Number+0x24>
        Arr[i] = Copy_u32Number % 10 ;  // 521%10 = 1       // 52%10 = 2    // 5%10 = 5
        Copy_u32Number /= 10 ;          // 521/10 = 52      // 52/10 = 5    // 5/10 = 0
        i++;                            // i = 1            // i = 2        // i = 3
    }
    //i=3 ;
    i--;
    38fc:	8b 81       	ldd	r24, Y+3	; 0x03
    38fe:	81 50       	subi	r24, 0x01	; 1
    3900:	8b 83       	std	Y+3, r24	; 0x03
    //i=2 ;
    for( s16 j=i ; j>=0 ; j--)
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	88 2f       	mov	r24, r24
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9a 83       	std	Y+2, r25	; 0x02
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	10 c0       	rjmp	.+32     	; 0x392e <LCD_voidWrite_u32Number+0xc0>
    {   // {1,2,5} - {'1','2','5'}
        LCD_voidWriteChar ( Arr[j] + '0' );
    390e:	29 81       	ldd	r18, Y+1	; 0x01
    3910:	3a 81       	ldd	r19, Y+2	; 0x02
    3912:	ce 01       	movw	r24, r28
    3914:	04 96       	adiw	r24, 0x04	; 4
    3916:	fc 01       	movw	r30, r24
    3918:	e2 0f       	add	r30, r18
    391a:	f3 1f       	adc	r31, r19
    391c:	80 81       	ld	r24, Z
    391e:	80 5d       	subi	r24, 0xD0	; 208
    3920:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
        i++;                            // i = 1            // i = 2        // i = 3
    }
    //i=3 ;
    i--;
    //i=2 ;
    for( s16 j=i ; j>=0 ; j--)
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	9a 81       	ldd	r25, Y+2	; 0x02
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	9a 81       	ldd	r25, Y+2	; 0x02
    3932:	99 23       	and	r25, r25
    3934:	64 f7       	brge	.-40     	; 0x390e <LCD_voidWrite_u32Number+0xa0>
    {   // {1,2,5} - {'1','2','5'}
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    3936:	6b 96       	adiw	r28, 0x1b	; 27
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	1f 91       	pop	r17
    3948:	0f 91       	pop	r16
    394a:	08 95       	ret

0000394c <LCD_voidGoTo_XY>:
/* Fun. Argument1: Copy_u8Line    { LINE_1 , LINE_2 }                                         */
/* Fun. Argument2: Copy_u8Position    {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}                 */
/* Fun. Return : void                                                                         */
/**********************************************************************************************/
void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	00 d0       	rcall	.+0      	; 0x3952 <LCD_voidGoTo_XY+0x6>
    3952:	00 d0       	rcall	.+0      	; 0x3954 <LCD_voidGoTo_XY+0x8>
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	89 83       	std	Y+1, r24	; 0x01
    395a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	82 30       	cpi	r24, 0x02	; 2
    3960:	d8 f4       	brcc	.+54     	; 0x3998 <LCD_voidGoTo_XY+0x4c>
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	80 31       	cpi	r24, 0x10	; 16
    3966:	c0 f4       	brcc	.+48     	; 0x3998 <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	28 2f       	mov	r18, r24
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	3c 83       	std	Y+4, r19	; 0x04
    3970:	2b 83       	std	Y+3, r18	; 0x03
    3972:	8b 81       	ldd	r24, Y+3	; 0x03
    3974:	9c 81       	ldd	r25, Y+4	; 0x04
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	31 f0       	breq	.+12     	; 0x3986 <LCD_voidGoTo_XY+0x3a>
    397a:	2b 81       	ldd	r18, Y+3	; 0x03
    397c:	3c 81       	ldd	r19, Y+4	; 0x04
    397e:	21 30       	cpi	r18, 0x01	; 1
    3980:	31 05       	cpc	r19, r1
    3982:	31 f0       	breq	.+12     	; 0x3990 <LCD_voidGoTo_XY+0x44>
    3984:	09 c0       	rjmp	.+18     	; 0x3998 <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    3986:	8a 81       	ldd	r24, Y+2	; 0x02
    3988:	80 58       	subi	r24, 0x80	; 128
    398a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    3990:	8a 81       	ldd	r24, Y+2	; 0x02
    3992:	80 54       	subi	r24, 0x40	; 64
    3994:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <LCD_voidDrawPattern>:
/* Fun.Argument1: Copy_u8Pattern_Number{PATTERN_0,PATTERN_1,PATTERN_2,PATTERN_3,PATTERN_4,PATTERN_5,PATTERN_6,PATTERN_7} */
/* Fun.Argument2: *Copy_u8Arr_Pattern { Address of array for Details of drawing }                                        */
/* Fun. Return : void                                                                                                    */
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <LCD_voidDrawPattern+0x6>
    39ac:	00 d0       	rcall	.+0      	; 0x39ae <LCD_voidDrawPattern+0x8>
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	8a 83       	std	Y+2, r24	; 0x02
    39b4:	7c 83       	std	Y+4, r23	; 0x04
    39b6:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   
    39b8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ba:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    39be:	19 82       	std	Y+1, r1	; 0x01
    39c0:	0e c0       	rjmp	.+28     	; 0x39de <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	28 2f       	mov	r18, r24
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	9c 81       	ldd	r25, Y+4	; 0x04
    39cc:	fc 01       	movw	r30, r24
    39ce:	e2 0f       	add	r30, r18
    39d0:	f3 1f       	adc	r31, r19
    39d2:	80 81       	ld	r24, Z
    39d4:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
/*************************************************************************************************************************/
void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );   

    for ( u8 i=0 ; i < 8 ; i++ )
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	8f 5f       	subi	r24, 0xFF	; 255
    39dc:	89 83       	std	Y+1, r24	; 0x01
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	88 30       	cpi	r24, 0x08	; 8
    39e2:	78 f3       	brcs	.-34     	; 0x39c2 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	cf 91       	pop	r28
    39ee:	df 91       	pop	r29
    39f0:	08 95       	ret

000039f2 <LCD_voidWritePattern>:
/* Fun. Argument2: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Argument3: Copy_u8Position { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }             */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    39f2:	df 93       	push	r29
    39f4:	cf 93       	push	r28
    39f6:	00 d0       	rcall	.+0      	; 0x39f8 <LCD_voidWritePattern+0x6>
    39f8:	0f 92       	push	r0
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	89 83       	std	Y+1, r24	; 0x01
    3a00:	6a 83       	std	Y+2, r22	; 0x02
    3a02:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    3a04:	8a 81       	ldd	r24, Y+2	; 0x02
    3a06:	6b 81       	ldd	r22, Y+3	; 0x03
    3a08:	0e 94 a6 1c 	call	0x394c	; 0x394c <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <LCD_voidClearDisplay>:
/* Function Name : [9] LCD_voidClearDisplay                                              */
/* Description : Clear all Display of LCD                                                */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearDisplay (void)
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
}
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <LCD_voidShiftLeft>:
/* Function Name : [10] LCD_voidShiftLeft                                                */
/* Description : Shift Left all Display of LCD                                           */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidShiftLeft (void)
{
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    3a3a:	87 e0       	ldi	r24, 0x07	; 7
    3a3c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
}
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	08 95       	ret

00003a46 <LCD_voidShiftRight>:
/* Function Name : [11] LCD_voidShiftRight                                               */
/* Description : Shift Right all Display of LCD                                          */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidShiftRight (void)
{
    3a46:	df 93       	push	r29
    3a48:	cf 93       	push	r28
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    3a4e:	85 e0       	ldi	r24, 0x05	; 5
    3a50:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_voidWriteCommand>
}
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	08 95       	ret

00003a5a <LCD_voidClearGrid>:
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Argument2: Copy_u8Position { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }             */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearGrid ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    3a5a:	df 93       	push	r29
    3a5c:	cf 93       	push	r28
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <LCD_voidClearGrid+0x6>
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	89 83       	std	Y+1, r24	; 0x01
    3a66:	6a 83       	std	Y+2, r22	; 0x02
    LCD_voidGoTo_XY (Copy_u8Line ,Copy_u8Position);
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	6a 81       	ldd	r22, Y+2	; 0x02
    3a6c:	0e 94 a6 1c 	call	0x394c	; 0x394c <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( ' ' );
    3a70:	80 e2       	ldi	r24, 0x20	; 32
    3a72:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
}
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <LCD_voidClearLine>:
/* Description : Clear Specific LINE on LCD                                              */
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearLine ( u8 Copy_u8Line )
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <LCD_voidClearLine+0x6>
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<16 ; i++)
    3a8c:	19 82       	std	Y+1, r1	; 0x01
    3a8e:	0a c0       	rjmp	.+20     	; 0x3aa4 <LCD_voidClearLine+0x24>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	69 81       	ldd	r22, Y+1	; 0x01
    3a94:	0e 94 a6 1c 	call	0x394c	; 0x394c <LCD_voidGoTo_XY>
		LCD_voidWriteChar ( ' ' );
    3a98:	80 e2       	ldi	r24, 0x20	; 32
    3a9a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <LCD_voidWriteChar>
/* Fun. Argument1: Copy_u8Line { LINE_1 , LINE_2 }                                       */
/* Fun. Return : void                                                                    */
/*****************************************************************************************/
void LCD_voidClearLine ( u8 Copy_u8Line )
{
	for(u8 i=0 ; i<16 ; i++)
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	89 83       	std	Y+1, r24	; 0x01
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	80 31       	cpi	r24, 0x10	; 16
    3aa8:	98 f3       	brcs	.-26     	; 0x3a90 <LCD_voidClearLine+0x10>
	{
		LCD_voidGoTo_XY (Copy_u8Line ,i);
		LCD_voidWriteChar ( ' ' );
	}
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <KPAD_voidInit>:
/* Function Name : KPAD_voidInit          */
/* Description : Initializing the KPAD    */
/* Fun. Return : void                     */
/******************************************/
void KPAD_voidInit (void)
{
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    /* Configer The Direction of Coloums Pins as Output */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C0_PIN,OUTPUT);
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	64 e0       	ldi	r22, 0x04	; 4
    3ac0:	41 e0       	ldi	r20, 0x01	; 1
    3ac2:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C1_PIN,OUTPUT);
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	65 e0       	ldi	r22, 0x05	; 5
    3aca:	41 e0       	ldi	r20, 0x01	; 1
    3acc:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C2_PIN,OUTPUT);
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	66 e0       	ldi	r22, 0x06	; 6
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_C3_PIN,OUTPUT);
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	67 e0       	ldi	r22, 0x07	; 7
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>

    /* Configer The Direction of Rows Pins as Input */
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R0_PIN,INPUT);
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	40 e0       	ldi	r20, 0x00	; 0
    3aea:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R1_PIN,INPUT);
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	61 e0       	ldi	r22, 0x01	; 1
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R2_PIN,INPUT);
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	62 e0       	ldi	r22, 0x02	; 2
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection (KPAD_PORT,KPAD_R3_PIN,INPUT);
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	63 e0       	ldi	r22, 0x03	; 3
    3b06:	40 e0       	ldi	r20, 0x00	; 0
    3b08:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>

    /* Activate Pull-Up Res in Pins of Rows */
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R0_PIN,ON);
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R1_PIN,ON);
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	41 e0       	ldi	r20, 0x01	; 1
    3b1c:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R2_PIN,ON);
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	62 e0       	ldi	r22, 0x02	; 2
    3b24:	41 e0       	ldi	r20, 0x01	; 1
    3b26:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>
    DIO_voidConfig_Pull_Up_Pin (KPAD_PORT,KPAD_R3_PIN,ON);
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	63 e0       	ldi	r22, 0x03	; 3
    3b2e:	41 e0       	ldi	r20, 0x01	; 1
    3b30:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>

    /* Deactivate Coloum Pins  */      
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C0_PIN,HIGH);
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	64 e0       	ldi	r22, 0x04	; 4
    3b38:	41 e0       	ldi	r20, 0x01	; 1
    3b3a:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C1_PIN,HIGH);
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	65 e0       	ldi	r22, 0x05	; 5
    3b42:	41 e0       	ldi	r20, 0x01	; 1
    3b44:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C2_PIN,HIGH);
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	66 e0       	ldi	r22, 0x06	; 6
    3b4c:	41 e0       	ldi	r20, 0x01	; 1
    3b4e:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
    DIO_voidSetPinValue (KPAD_PORT,KPAD_C3_PIN,HIGH); 
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	67 e0       	ldi	r22, 0x07	; 7
    3b56:	41 e0       	ldi	r20, 0x01	; 1
    3b58:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
}
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	08 95       	ret

00003b62 <KPAD_u8GetPressedKey>:
/* Function Name : KPAD_u8GetPressedKey                                                  */
/* Description : Write a Pattern on the LCD at specific Line & Position                  */
/* Fun. Return : unsigned character ( The Oressed Key / Key = 0xff if not key pressed )  */                                                                 
/*****************************************************************************************/
u8   KPAD_u8GetPressedKey (void)
{
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	00 d0       	rcall	.+0      	; 0x3b68 <KPAD_u8GetPressedKey+0x6>
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <KPAD_u8GetPressedKey+0x8>
    3b6a:	0f 92       	push	r0
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    3b70:	8f ef       	ldi	r24, 0xFF	; 255
    3b72:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Flag = 0 ;
    3b74:	19 82       	std	Y+1, r1	; 0x01
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    3b76:	1d 82       	std	Y+5, r1	; 0x05
    3b78:	5a c0       	rjmp	.+180    	; 0x3c2e <KPAD_u8GetPressedKey+0xcc>
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	88 2f       	mov	r24, r24
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	fc 01       	movw	r30, r24
    3b82:	ed 58       	subi	r30, 0x8D	; 141
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	90 81       	ld	r25, Z
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	69 2f       	mov	r22, r25
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    3b92:	1c 82       	std	Y+4, r1	; 0x04
    3b94:	37 c0       	rjmp	.+110    	; 0x3c04 <KPAD_u8GetPressedKey+0xa2>
        {
            /* Delay for Debounsing */
            //_delay_ms(50);
            /* Read Row Pin */
            Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    3b96:	8c 81       	ldd	r24, Y+4	; 0x04
    3b98:	88 2f       	mov	r24, r24
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	e9 58       	subi	r30, 0x89	; 137
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	90 81       	ld	r25, Z
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	69 2f       	mov	r22, r25
    3ba8:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8GetPinValue>
    3bac:	8b 83       	std	Y+3, r24	; 0x03

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	88 23       	and	r24, r24
    3bb2:	29 f5       	brne	.+74     	; 0x3bfe <KPAD_u8GetPressedKey+0x9c>
    3bb4:	20 c0       	rjmp	.+64     	; 0x3bf6 <KPAD_u8GetPressedKey+0x94>
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
                {
                    /* Get pressed Key Value when i make sure that the low state is stable  */
                    Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
    3bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb8:	48 2f       	mov	r20, r24
    3bba:	50 e0       	ldi	r21, 0x00	; 0
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	ca 01       	movw	r24, r20
    3bc4:	88 0f       	add	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	82 0f       	add	r24, r18
    3bce:	93 1f       	adc	r25, r19
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	e5 58       	subi	r30, 0x85	; 133
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	80 81       	ld	r24, Z
    3bd8:	8a 83       	std	Y+2, r24	; 0x02
                    /* Read Row Pin again for sure for Debounsing and exit while loop when change at pressed button 
                    whithout it the program will not extern about while loop */
                    Local_u8PinValue = DIO_u8GetPinValue ( KPAD_PORT , KPAD_Au8RowsArr[Local_u8RowsIter] );
    3bda:	8c 81       	ldd	r24, Y+4	; 0x04
    3bdc:	88 2f       	mov	r24, r24
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	fc 01       	movw	r30, r24
    3be2:	e9 58       	subi	r30, 0x89	; 137
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	90 81       	ld	r25, Z
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	69 2f       	mov	r22, r25
    3bec:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8GetPinValue>
    3bf0:	8b 83       	std	Y+3, r24	; 0x03
                    Local_u8Flag = 1 ;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	89 83       	std	Y+1, r24	; 0x01

            /* Key Pressed */
            if ( Local_u8PinValue == 0 )
            {
                /* More Checking again for Debounsing */
                while ( Local_u8PinValue == 0 )
    3bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf8:	88 23       	and	r24, r24
    3bfa:	e9 f2       	breq	.-70     	; 0x3bb6 <KPAD_u8GetPressedKey+0x54>
    3bfc:	06 c0       	rjmp	.+12     	; 0x3c0a <KPAD_u8GetPressedKey+0xa8>
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    {
        /* Active the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , LOW );

        for ( Local_u8RowsIter = 0 ; Local_u8RowsIter < KPAD_ROWS_NUM ; Local_u8RowsIter ++ )
    3bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    3c00:	8f 5f       	subi	r24, 0xFF	; 255
    3c02:	8c 83       	std	Y+4, r24	; 0x04
    3c04:	8c 81       	ldd	r24, Y+4	; 0x04
    3c06:	84 30       	cpi	r24, 0x04	; 4
    3c08:	30 f2       	brcs	.-116    	; 0x3b96 <KPAD_u8GetPressedKey+0x34>
                // Local_u8PressedKey = KPAD_Au8KeysArr[Local_u8RowsIter][Local_u8ColumnsIter] ;
                break;
            }
        }
        /* DeActive the current Column */
        DIO_voidSetPinValue ( KPAD_PORT , KPAD_Au8ColumnsArr[Local_u8ColumnsIter] , HIGH );
    3c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0c:	88 2f       	mov	r24, r24
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	fc 01       	movw	r30, r24
    3c12:	ed 58       	subi	r30, 0x8D	; 141
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	90 81       	ld	r25, Z
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	69 2f       	mov	r22, r25
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	0e 94 b5 11 	call	0x236a	; 0x236a <DIO_voidSetPinValue>
        if ( Local_u8Flag == 1 )
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	81 30       	cpi	r24, 0x01	; 1
    3c26:	39 f0       	breq	.+14     	; 0x3c36 <KPAD_u8GetPressedKey+0xd4>
    u8 Local_u8ColumnsIter ;
    u8 Local_u8RowsIter ;
    u8 Local_u8PinValue ;
    u8 Local_u8PressedKey = 0xff ; // return will be 0xff if not pressed any key 
    u8 Local_u8Flag = 0 ;
    for ( Local_u8ColumnsIter = 0 ; Local_u8ColumnsIter < KPAD_COLUMNS_NUM ; Local_u8ColumnsIter ++ )
    3c28:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2a:	8f 5f       	subi	r24, 0xFF	; 255
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c30:	84 30       	cpi	r24, 0x04	; 4
    3c32:	08 f4       	brcc	.+2      	; 0x3c36 <KPAD_u8GetPressedKey+0xd4>
    3c34:	a2 cf       	rjmp	.-188    	; 0x3b7a <KPAD_u8GetPressedKey+0x18>
        if ( Local_u8Flag == 1 )
        {
            break;
        }
    }
    return Local_u8PressedKey ;
    3c36:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <EEPROM_voidSendDataByte>:
#include "../../MCAL/I2C/I2C_Interface.h"



void EEPROM_voidSendDataByte ( u16 Copy_u16LocationAddress , u8 Copy_u8DataByte )
{
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	62 97       	sbiw	r28, 0x12	; 18
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	99 8b       	std	Y+17, r25	; 0x11
    3c5e:	88 8b       	std	Y+16, r24	; 0x10
    3c60:	6a 8b       	std	Y+18, r22	; 0x12
    u8 Local_Address ;                                                              
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;   
    3c62:	88 89       	ldd	r24, Y+16	; 0x10
    3c64:	99 89       	ldd	r25, Y+17	; 0x11
    3c66:	89 2f       	mov	r24, r25
    3c68:	99 27       	eor	r25, r25
    3c6a:	84 65       	ori	r24, 0x54	; 84
    3c6c:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition                                                                        
    I2C_Master_u8StartCondition ();                                                      
    3c6e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <I2C_Master_u8StartCondition>
    // Send the address packet                                                          
    I2C_Master_u8SendSLA_Write_ACK (Local_Address); // 0b1010xxx0 
    3c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c74:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress));
    3c78:	88 89       	ldd	r24, Y+16	; 0x10
    3c7a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <I2C_Master_u8WriteDataByte_ACK>
    // Send The Data Byte to the Memory Location
    I2C_Master_u8WriteDataByte_ACK (Copy_u8DataByte);
    3c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    3c80:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <I2C_Master_u8WriteDataByte_ACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition ();
    3c84:	0e 94 94 0c 	call	0x1928	; 0x1928 <I2C_Master_voidStopCondition>
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 e2       	ldi	r26, 0x20	; 32
    3c8e:	b1 e4       	ldi	r27, 0x41	; 65
    3c90:	8b 87       	std	Y+11, r24	; 0x0b
    3c92:	9c 87       	std	Y+12, r25	; 0x0c
    3c94:	ad 87       	std	Y+13, r26	; 0x0d
    3c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	4a ef       	ldi	r20, 0xFA	; 250
    3ca6:	54 e4       	ldi	r21, 0x44	; 68
    3ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	8f 83       	std	Y+7, r24	; 0x07
    3cb2:	98 87       	std	Y+8, r25	; 0x08
    3cb4:	a9 87       	std	Y+9, r26	; 0x09
    3cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	2c f4       	brge	.+10     	; 0x3cda <EEPROM_voidSendDataByte+0x92>
		__ticks = 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	9e 83       	std	Y+6, r25	; 0x06
    3cd6:	8d 83       	std	Y+5, r24	; 0x05
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <EEPROM_voidSendDataByte+0x110>
	else if (__tmp > 65535)
    3cda:	6f 81       	ldd	r22, Y+7	; 0x07
    3cdc:	78 85       	ldd	r23, Y+8	; 0x08
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	4c f5       	brge	.+82     	; 0x3d44 <EEPROM_voidSendDataByte+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	51 e4       	ldi	r21, 0x41	; 65
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	9e 83       	std	Y+6, r25	; 0x06
    3d18:	8d 83       	std	Y+5, r24	; 0x05
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <EEPROM_voidSendDataByte+0xf2>
    3d1c:	88 ec       	ldi	r24, 0xC8	; 200
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	9c 83       	std	Y+4, r25	; 0x04
    3d22:	8b 83       	std	Y+3, r24	; 0x03
    3d24:	8b 81       	ldd	r24, Y+3	; 0x03
    3d26:	9c 81       	ldd	r25, Y+4	; 0x04
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <EEPROM_voidSendDataByte+0xe0>
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <EEPROM_voidSendDataByte+0xd4>
    3d42:	14 c0       	rjmp	.+40     	; 0x3d6c <EEPROM_voidSendDataByte+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d44:	6f 81       	ldd	r22, Y+7	; 0x07
    3d46:	78 85       	ldd	r23, Y+8	; 0x08
    3d48:	89 85       	ldd	r24, Y+9	; 0x09
    3d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	9e 83       	std	Y+6, r25	; 0x06
    3d56:	8d 83       	std	Y+5, r24	; 0x05
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <EEPROM_voidSendDataByte+0x11c>
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Write cycle is finished
    _delay_ms(10);

}
    3d6c:	62 96       	adiw	r28, 0x12	; 18
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <EEPROM_voidReadDataByte>:

u8 EEPROM_voidReadDataByte ( u16 Copy_u16LocationAddress )
{
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
    3d86:	62 97       	sbiw	r28, 0x12	; 18
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	9a 8b       	std	Y+18, r25	; 0x12
    3d94:	89 8b       	std	Y+17, r24	; 0x11
    u8 Data ;
    u8 Local_Address ;
    Local_Address = EEPROM_FIXED_ADDRESS | (EEPROM_A2<<2) | ((u8)(Copy_u16LocationAddress>>8)) ;
    3d96:	89 89       	ldd	r24, Y+17	; 0x11
    3d98:	9a 89       	ldd	r25, Y+18	; 0x12
    3d9a:	89 2f       	mov	r24, r25
    3d9c:	99 27       	eor	r25, r25
    3d9e:	84 65       	ori	r24, 0x54	; 84
    3da0:	8f 87       	std	Y+15, r24	; 0x0f
    // Send Start Condition 
    I2C_Master_u8StartCondition ();
    3da2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <I2C_Master_u8StartCondition>
    // Send the address packet with Write operation
    I2C_Master_u8SendSLA_Write_ACK (Local_Address);
    3da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <I2C_Master_u8SendSLA_Write_ACK>
    // send the rest 8 BITS of the location Adress
    I2C_Master_u8WriteDataByte_ACK ( (u8)(Copy_u16LocationAddress) );
    3dac:	89 89       	ldd	r24, Y+17	; 0x11
    3dae:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <I2C_Master_u8WriteDataByte_ACK>
    // Send Repeated Start to chang write request to Read request
    I2C_Master_u8ReStartCondition ();
    3db2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <I2C_Master_u8ReStartCondition>
    // Send the address packet with Read operation
    I2C_Master_u8SendSLA_Read_ACK (Local_Address);
    3db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <I2C_Master_u8SendSLA_Read_ACK>
    // Get The Data From Memory
    I2C_Master_u8ReadDataByte_NOTACK (&Data);
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	40 96       	adiw	r24, 0x10	; 16
    3dc0:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <I2C_Master_u8ReadDataByte_NOTACK>
    // Send Stop Condition
    I2C_Master_voidStopCondition();
    3dc4:	0e 94 94 0c 	call	0x1928	; 0x1928 <I2C_Master_voidStopCondition>
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	a0 e2       	ldi	r26, 0x20	; 32
    3dce:	b1 e4       	ldi	r27, 0x41	; 65
    3dd0:	8b 87       	std	Y+11, r24	; 0x0b
    3dd2:	9c 87       	std	Y+12, r25	; 0x0c
    3dd4:	ad 87       	std	Y+13, r26	; 0x0d
    3dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	4a ef       	ldi	r20, 0xFA	; 250
    3de6:	54 e4       	ldi	r21, 0x44	; 68
    3de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	8f 83       	std	Y+7, r24	; 0x07
    3df2:	98 87       	std	Y+8, r25	; 0x08
    3df4:	a9 87       	std	Y+9, r26	; 0x09
    3df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfa:	78 85       	ldd	r23, Y+8	; 0x08
    3dfc:	89 85       	ldd	r24, Y+9	; 0x09
    3dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e8       	ldi	r20, 0x80	; 128
    3e06:	5f e3       	ldi	r21, 0x3F	; 63
    3e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e0c:	88 23       	and	r24, r24
    3e0e:	2c f4       	brge	.+10     	; 0x3e1a <EEPROM_voidReadDataByte+0x9c>
		__ticks = 1;
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	9e 83       	std	Y+6, r25	; 0x06
    3e16:	8d 83       	std	Y+5, r24	; 0x05
    3e18:	3f c0       	rjmp	.+126    	; 0x3e98 <EEPROM_voidReadDataByte+0x11a>
	else if (__tmp > 65535)
    3e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1c:	78 85       	ldd	r23, Y+8	; 0x08
    3e1e:	89 85       	ldd	r24, Y+9	; 0x09
    3e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	3f ef       	ldi	r19, 0xFF	; 255
    3e26:	4f e7       	ldi	r20, 0x7F	; 127
    3e28:	57 e4       	ldi	r21, 0x47	; 71
    3e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e2e:	18 16       	cp	r1, r24
    3e30:	4c f5       	brge	.+82     	; 0x3e84 <EEPROM_voidReadDataByte+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e2       	ldi	r20, 0x20	; 32
    3e40:	51 e4       	ldi	r21, 0x41	; 65
    3e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	cd 01       	movw	r24, r26
    3e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	0f c0       	rjmp	.+30     	; 0x3e7a <EEPROM_voidReadDataByte+0xfc>
    3e5c:	88 ec       	ldi	r24, 0xC8	; 200
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	9c 83       	std	Y+4, r25	; 0x04
    3e62:	8b 83       	std	Y+3, r24	; 0x03
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	9c 81       	ldd	r25, Y+4	; 0x04
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	f1 f7       	brne	.-4      	; 0x3e68 <EEPROM_voidReadDataByte+0xea>
    3e6c:	9c 83       	std	Y+4, r25	; 0x04
    3e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	9e 83       	std	Y+6, r25	; 0x06
    3e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	69 f7       	brne	.-38     	; 0x3e5c <EEPROM_voidReadDataByte+0xde>
    3e82:	14 c0       	rjmp	.+40     	; 0x3eac <EEPROM_voidReadDataByte+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e84:	6f 81       	ldd	r22, Y+7	; 0x07
    3e86:	78 85       	ldd	r23, Y+8	; 0x08
    3e88:	89 85       	ldd	r24, Y+9	; 0x09
    3e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	9e 83       	std	Y+6, r25	; 0x06
    3e96:	8d 83       	std	Y+5, r24	; 0x05
    3e98:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea4:	01 97       	sbiw	r24, 0x01	; 1
    3ea6:	f1 f7       	brne	.-4      	; 0x3ea4 <EEPROM_voidReadDataByte+0x126>
    3ea8:	9a 83       	std	Y+2, r25	; 0x02
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    // Delay Until the Read cycle is finished
    _delay_ms(10);
    // Return Data
    return Data ;
    3eac:	88 89       	ldd	r24, Y+16	; 0x10
    3eae:	62 96       	adiw	r28, 0x12	; 18
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	08 95       	ret

00003ec0 <BUTTON_voidInit_Button_Pin>:
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_Button_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    3ec0:	df 93       	push	r29
    3ec2:	cf 93       	push	r28
    3ec4:	00 d0       	rcall	.+0      	; 0x3ec6 <BUTTON_voidInit_Button_Pin+0x6>
    3ec6:	0f 92       	push	r0
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
    3ecc:	89 83       	std	Y+1, r24	; 0x01
    3ece:	6a 83       	std	Y+2, r22	; 0x02
    3ed0:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	84 30       	cpi	r24, 0x04	; 4
    3ed6:	68 f4       	brcc	.+26     	; 0x3ef2 <BUTTON_voidInit_Button_Pin+0x32>
    3ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eda:	88 30       	cpi	r24, 0x08	; 8
    3edc:	50 f4       	brcc	.+20     	; 0x3ef2 <BUTTON_voidInit_Button_Pin+0x32>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PinNumber
        DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,INPUT);
    3ede:	89 81       	ldd	r24, Y+1	; 0x01
    3ee0:	6a 81       	ldd	r22, Y+2	; 0x02
    3ee2:	40 e0       	ldi	r20, 0x00	; 0
    3ee4:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidSetPinDirection>
        // activate Pull Up Resistor on Copy_u8PinNumber
        DIO_voidConfig_Pull_Up_Pin (Copy_u8PortNumber,Copy_u8PinNumber, Copy_u8PullUpStatus );
    3ee8:	89 81       	ldd	r24, Y+1	; 0x01
    3eea:	6a 81       	ldd	r22, Y+2	; 0x02
    3eec:	4b 81       	ldd	r20, Y+3	; 0x03
    3eee:	0e 94 a1 14 	call	0x2942	; 0x2942 <DIO_voidConfig_Pull_Up_Pin>
    }
}
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <BUTTON_voidInit_8Buttons_Port>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument3: Copy_u8PullUpStatus { ON , OFF }                                                  */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void BUTTON_voidInit_8Buttons_Port ( u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	00 d0       	rcall	.+0      	; 0x3f04 <BUTTON_voidInit_8Buttons_Port+0x6>
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
    3f08:	89 83       	std	Y+1, r24	; 0x01
    3f0a:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	84 30       	cpi	r24, 0x04	; 4
    3f10:	40 f4       	brcc	.+16     	; 0x3f22 <BUTTON_voidInit_8Buttons_Port+0x24>
    {
        // Do Nothing
    }
    else
    {   // Set Direction INPUT to Copy_u8PortNumber
        DIO_voidSetPortDirection (Copy_u8PortNumber, INPUT );
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
        // activate Pull Up Resistor on Copy_u8PortNumber
        DIO_voidConfig_Pull_Up_Port (Copy_u8PortNumber, Copy_u8PullUpStatus );
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	6a 81       	ldd	r22, Y+2	; 0x02
    3f1e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <DIO_voidConfig_Pull_Up_Port>
    }
}
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <BUTTON_u8Get_Button_Pin>:
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Argument2: Copy_u8PinNumber { PIN0,PIN1,PIN3,PIN4,PIN5,PIN6,PIN7 }                           */
/* Fun. Return : unsigned character { LOW (Button is Pressed) , HIGH (Button is Not Pressed) }       */
/*****************************************************************************************************/
u8 BUTTON_u8Get_Button_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	00 d0       	rcall	.+0      	; 0x3f32 <BUTTON_u8Get_Button_Pin+0x6>
    3f32:	0f 92       	push	r0
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	8a 83       	std	Y+2, r24	; 0x02
    3f3a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Value  ;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
    3f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3e:	84 30       	cpi	r24, 0x04	; 4
    3f40:	40 f4       	brcc	.+16     	; 0x3f52 <BUTTON_u8Get_Button_Pin+0x26>
    3f42:	8b 81       	ldd	r24, Y+3	; 0x03
    3f44:	88 30       	cpi	r24, 0x08	; 8
    3f46:	28 f4       	brcc	.+10     	; 0x3f52 <BUTTON_u8Get_Button_Pin+0x26>
    {
        // Do Nothing
    }
    else
    {   
        Local_u8Value = DIO_u8GetPinValue ( Copy_u8PortNumber,  Copy_u8PinNumber ) ;
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	6b 81       	ldd	r22, Y+3	; 0x03
    3f4c:	0e 94 09 13 	call	0x2612	; 0x2612 <DIO_u8GetPinValue>
    3f50:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8Value ;
    3f52:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <BUTTON_u8Get_8Buttons_Port>:
/* Description : Read String of 8 push buttons value in a given Port                                 */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Return : unsigned character { 0bxxxxxxxx } (x) is a value in an one Pin on the Port          */
/*****************************************************************************************************/
u8 BUTTON_u8Get_8Buttons_Port (u8 Copy_u8PortNumber)
{   
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <BUTTON_u8Get_8Buttons_Port+0x6>
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Value  ;
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	84 30       	cpi	r24, 0x04	; 4
    3f70:	20 f4       	brcc	.+8      	; 0x3f7a <BUTTON_u8Get_8Buttons_Port+0x1a>
    {
        // Do Nothing
    }
    else
    {   
        Local_u8Value = DIO_u8GetPortValue ( Copy_u8PortNumber ) ;   
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	0e 94 89 13 	call	0x2712	; 0x2712 <DIO_u8GetPortValue>
    3f78:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8Value ;
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	cf 91       	pop	r28
    3f82:	df 91       	pop	r29
    3f84:	08 95       	ret

00003f86 <SEGMENT_voidInitSegmentPort>:
/* Description : Initialize one 7-Segment on specific Port ant make it direction as OUTPUT           */
/* Fun. Argument1: Copy_u8PortNumber { PORTA,PORTB,PORTC,PORTD }                                     */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void SEGMENT_voidInitSegmentPort ( u8 Copy_u8PortNumber )
{
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <SEGMENT_voidInitSegmentPort+0x6>
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8PortNumber)
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	28 2f       	mov	r18, r24
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	3b 83       	std	Y+3, r19	; 0x03
    3f9c:	2a 83       	std	Y+2, r18	; 0x02
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	91 05       	cpc	r25, r1
    3fa6:	d1 f0       	breq	.+52     	; 0x3fdc <SEGMENT_voidInitSegmentPort+0x56>
    3fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    3faa:	3b 81       	ldd	r19, Y+3	; 0x03
    3fac:	22 30       	cpi	r18, 0x02	; 2
    3fae:	31 05       	cpc	r19, r1
    3fb0:	2c f4       	brge	.+10     	; 0x3fbc <SEGMENT_voidInitSegmentPort+0x36>
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	61 f0       	breq	.+24     	; 0x3fd2 <SEGMENT_voidInitSegmentPort+0x4c>
    3fba:	1e c0       	rjmp	.+60     	; 0x3ff8 <SEGMENT_voidInitSegmentPort+0x72>
    3fbc:	2a 81       	ldd	r18, Y+2	; 0x02
    3fbe:	3b 81       	ldd	r19, Y+3	; 0x03
    3fc0:	22 30       	cpi	r18, 0x02	; 2
    3fc2:	31 05       	cpc	r19, r1
    3fc4:	81 f0       	breq	.+32     	; 0x3fe6 <SEGMENT_voidInitSegmentPort+0x60>
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fca:	83 30       	cpi	r24, 0x03	; 3
    3fcc:	91 05       	cpc	r25, r1
    3fce:	81 f0       	breq	.+32     	; 0x3ff0 <SEGMENT_voidInitSegmentPort+0x6a>
    3fd0:	13 c0       	rjmp	.+38     	; 0x3ff8 <SEGMENT_voidInitSegmentPort+0x72>
    {
        case PORTA :   DIO_voidSetPortDirection (PORTA,OUTPUT);    break;
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	61 e0       	ldi	r22, 0x01	; 1
    3fd6:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
    3fda:	0e c0       	rjmp	.+28     	; 0x3ff8 <SEGMENT_voidInitSegmentPort+0x72>
        case PORTB :   DIO_voidSetPortDirection (PORTB,OUTPUT);    break;
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
    3fe4:	09 c0       	rjmp	.+18     	; 0x3ff8 <SEGMENT_voidInitSegmentPort+0x72>
        case PORTC :   DIO_voidSetPortDirection (PORTC,OUTPUT);    break;
    3fe6:	82 e0       	ldi	r24, 0x02	; 2
    3fe8:	61 e0       	ldi	r22, 0x01	; 1
    3fea:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
    3fee:	04 c0       	rjmp	.+8      	; 0x3ff8 <SEGMENT_voidInitSegmentPort+0x72>
        case PORTD :   DIO_voidSetPortDirection (PORTD,OUTPUT);    break;
    3ff0:	83 e0       	ldi	r24, 0x03	; 3
    3ff2:	61 e0       	ldi	r22, 0x01	; 1
    3ff4:	0e 94 2c 11 	call	0x2258	; 0x2258 <DIO_voidSetPortDirection>
        default    :                                               break;
    }
}
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	cf 91       	pop	r28
    4000:	df 91       	pop	r29
    4002:	08 95       	ret

00004004 <SEGMENT_voidPrintNumber>:
/* Fun. Argument2: Copy_SegmentPolarity { COMMON_ANODE , COMMON_CATHODE }                            */
/* Fun. Argument3: Copy_u8Number { 0,1,2,3,4,5,6,7,8,9 }                                             */
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void SEGMENT_voidPrintNumber ( u8 Copy_u8PortNumber , u8 Copy_SegmentPolarity , u8 Copy_u8Number )
{
    4004:	df 93       	push	r29
    4006:	cf 93       	push	r28
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	29 97       	sbiw	r28, 0x09	; 9
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	89 83       	std	Y+1, r24	; 0x01
    401a:	6a 83       	std	Y+2, r22	; 0x02
    401c:	4b 83       	std	Y+3, r20	; 0x03
    switch ( Copy_SegmentPolarity )
    401e:	8a 81       	ldd	r24, Y+2	; 0x02
    4020:	28 2f       	mov	r18, r24
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	39 87       	std	Y+9, r19	; 0x09
    4026:	28 87       	std	Y+8, r18	; 0x08
    4028:	88 85       	ldd	r24, Y+8	; 0x08
    402a:	99 85       	ldd	r25, Y+9	; 0x09
    402c:	00 97       	sbiw	r24, 0x00	; 0
    402e:	39 f0       	breq	.+14     	; 0x403e <SEGMENT_voidPrintNumber+0x3a>
    4030:	28 85       	ldd	r18, Y+8	; 0x08
    4032:	39 85       	ldd	r19, Y+9	; 0x09
    4034:	21 30       	cpi	r18, 0x01	; 1
    4036:	31 05       	cpc	r19, r1
    4038:	09 f4       	brne	.+2      	; 0x403c <SEGMENT_voidPrintNumber+0x38>
    403a:	50 c0       	rjmp	.+160    	; 0x40dc <SEGMENT_voidPrintNumber+0xd8>
    403c:	a5 c0       	rjmp	.+330    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
    {
        case COMMON_ANODE   :   switch(Copy_u8PortNumber)
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	28 2f       	mov	r18, r24
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	3f 83       	std	Y+7, r19	; 0x07
    4046:	2e 83       	std	Y+6, r18	; 0x06
    4048:	8e 81       	ldd	r24, Y+6	; 0x06
    404a:	9f 81       	ldd	r25, Y+7	; 0x07
    404c:	81 30       	cpi	r24, 0x01	; 1
    404e:	91 05       	cpc	r25, r1
    4050:	09 f1       	breq	.+66     	; 0x4094 <SEGMENT_voidPrintNumber+0x90>
    4052:	2e 81       	ldd	r18, Y+6	; 0x06
    4054:	3f 81       	ldd	r19, Y+7	; 0x07
    4056:	22 30       	cpi	r18, 0x02	; 2
    4058:	31 05       	cpc	r19, r1
    405a:	2c f4       	brge	.+10     	; 0x4066 <SEGMENT_voidPrintNumber+0x62>
    405c:	8e 81       	ldd	r24, Y+6	; 0x06
    405e:	9f 81       	ldd	r25, Y+7	; 0x07
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	61 f0       	breq	.+24     	; 0x407c <SEGMENT_voidPrintNumber+0x78>
    4064:	91 c0       	rjmp	.+290    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
    4066:	2e 81       	ldd	r18, Y+6	; 0x06
    4068:	3f 81       	ldd	r19, Y+7	; 0x07
    406a:	22 30       	cpi	r18, 0x02	; 2
    406c:	31 05       	cpc	r19, r1
    406e:	f1 f0       	breq	.+60     	; 0x40ac <SEGMENT_voidPrintNumber+0xa8>
    4070:	8e 81       	ldd	r24, Y+6	; 0x06
    4072:	9f 81       	ldd	r25, Y+7	; 0x07
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	91 05       	cpc	r25, r1
    4078:	29 f1       	breq	.+74     	; 0x40c4 <SEGMENT_voidPrintNumber+0xc0>
    407a:	86 c0       	rjmp	.+268    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case PORTA :   DIO_voidSetPortValue (PORTA,Common_Anode_Arr[Copy_u8Number]);    break;
    407c:	8b 81       	ldd	r24, Y+3	; 0x03
    407e:	88 2f       	mov	r24, r24
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	fc 01       	movw	r30, r24
    4084:	e5 57       	subi	r30, 0x75	; 117
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	90 81       	ld	r25, Z
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	69 2f       	mov	r22, r25
    408e:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    4092:	7a c0       	rjmp	.+244    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTB :   DIO_voidSetPortValue (PORTB,Common_Anode_Arr[Copy_u8Number]);    break;
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	88 2f       	mov	r24, r24
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	fc 01       	movw	r30, r24
    409c:	e5 57       	subi	r30, 0x75	; 117
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	90 81       	ld	r25, Z
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	69 2f       	mov	r22, r25
    40a6:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    40aa:	6e c0       	rjmp	.+220    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTC :   DIO_voidSetPortValue (PORTC,Common_Anode_Arr[Copy_u8Number]);    break;
    40ac:	8b 81       	ldd	r24, Y+3	; 0x03
    40ae:	88 2f       	mov	r24, r24
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	fc 01       	movw	r30, r24
    40b4:	e5 57       	subi	r30, 0x75	; 117
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	90 81       	ld	r25, Z
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	69 2f       	mov	r22, r25
    40be:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    40c2:	62 c0       	rjmp	.+196    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTD :   DIO_voidSetPortValue (PORTD,Common_Anode_Arr[Copy_u8Number]);    break;
    40c4:	8b 81       	ldd	r24, Y+3	; 0x03
    40c6:	88 2f       	mov	r24, r24
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	fc 01       	movw	r30, r24
    40cc:	e5 57       	subi	r30, 0x75	; 117
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	90 81       	ld	r25, Z
    40d2:	83 e0       	ldi	r24, 0x03	; 3
    40d4:	69 2f       	mov	r22, r25
    40d6:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    40da:	56 c0       	rjmp	.+172    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    default    :                                                                    break;
                                }
                                break;
        case COMMON_CATHODE :   switch(Copy_u8PortNumber)
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	3d 83       	std	Y+5, r19	; 0x05
    40e4:	2c 83       	std	Y+4, r18	; 0x04
    40e6:	8c 81       	ldd	r24, Y+4	; 0x04
    40e8:	9d 81       	ldd	r25, Y+5	; 0x05
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	91 05       	cpc	r25, r1
    40ee:	19 f1       	breq	.+70     	; 0x4136 <SEGMENT_voidPrintNumber+0x132>
    40f0:	2c 81       	ldd	r18, Y+4	; 0x04
    40f2:	3d 81       	ldd	r19, Y+5	; 0x05
    40f4:	22 30       	cpi	r18, 0x02	; 2
    40f6:	31 05       	cpc	r19, r1
    40f8:	2c f4       	brge	.+10     	; 0x4104 <SEGMENT_voidPrintNumber+0x100>
    40fa:	8c 81       	ldd	r24, Y+4	; 0x04
    40fc:	9d 81       	ldd	r25, Y+5	; 0x05
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	61 f0       	breq	.+24     	; 0x411a <SEGMENT_voidPrintNumber+0x116>
    4102:	42 c0       	rjmp	.+132    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
    4104:	2c 81       	ldd	r18, Y+4	; 0x04
    4106:	3d 81       	ldd	r19, Y+5	; 0x05
    4108:	22 30       	cpi	r18, 0x02	; 2
    410a:	31 05       	cpc	r19, r1
    410c:	11 f1       	breq	.+68     	; 0x4152 <SEGMENT_voidPrintNumber+0x14e>
    410e:	8c 81       	ldd	r24, Y+4	; 0x04
    4110:	9d 81       	ldd	r25, Y+5	; 0x05
    4112:	83 30       	cpi	r24, 0x03	; 3
    4114:	91 05       	cpc	r25, r1
    4116:	59 f1       	breq	.+86     	; 0x416e <SEGMENT_voidPrintNumber+0x16a>
    4118:	37 c0       	rjmp	.+110    	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                {
                                    case PORTA :   DIO_voidSetPortValue (PORTA,~Common_Anode_Arr[Copy_u8Number]);    break;
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	88 2f       	mov	r24, r24
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	fc 01       	movw	r30, r24
    4122:	e5 57       	subi	r30, 0x75	; 117
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	98 2f       	mov	r25, r24
    412a:	90 95       	com	r25
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	69 2f       	mov	r22, r25
    4130:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    4134:	29 c0       	rjmp	.+82     	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTB :   DIO_voidSetPortValue (PORTB,~Common_Anode_Arr[Copy_u8Number]);    break;
    4136:	8b 81       	ldd	r24, Y+3	; 0x03
    4138:	88 2f       	mov	r24, r24
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	fc 01       	movw	r30, r24
    413e:	e5 57       	subi	r30, 0x75	; 117
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	80 81       	ld	r24, Z
    4144:	98 2f       	mov	r25, r24
    4146:	90 95       	com	r25
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	69 2f       	mov	r22, r25
    414c:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    4150:	1b c0       	rjmp	.+54     	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTC :   DIO_voidSetPortValue (PORTC,~Common_Anode_Arr[Copy_u8Number]);    break;
    4152:	8b 81       	ldd	r24, Y+3	; 0x03
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	fc 01       	movw	r30, r24
    415a:	e5 57       	subi	r30, 0x75	; 117
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	80 81       	ld	r24, Z
    4160:	98 2f       	mov	r25, r24
    4162:	90 95       	com	r25
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	69 2f       	mov	r22, r25
    4168:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
    416c:	0d c0       	rjmp	.+26     	; 0x4188 <SEGMENT_voidPrintNumber+0x184>
                                    case PORTD :   DIO_voidSetPortValue (PORTD,~Common_Anode_Arr[Copy_u8Number]);    break;
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	88 2f       	mov	r24, r24
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	fc 01       	movw	r30, r24
    4176:	e5 57       	subi	r30, 0x75	; 117
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	98 2f       	mov	r25, r24
    417e:	90 95       	com	r25
    4180:	83 e0       	ldi	r24, 0x03	; 3
    4182:	69 2f       	mov	r22, r25
    4184:	0e 94 c5 12 	call	0x258a	; 0x258a <DIO_voidSetPortValue>
                                }   
                                break;
        default             :   break;
    }
    
}
    4188:	29 96       	adiw	r28, 0x09	; 9
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	08 95       	ret

0000419a <main>:
#include "MCAL/I2C/I2C_Interface.h"
#include "HAL/LCD/LCD_Interface.h"
#include <util/delay.h>

int main(void)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
    41a2:	67 97       	sbiw	r28, 0x17	; 23
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
    u8 name[7];  // 6 حروف + نهاية \0
    u8 data;
    u8 i = 0;
    41ae:	1f 86       	std	Y+15, r1	; 0x0f

    LCD_voidInit();
    41b0:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_voidInit>
    I2C_voidSlaveInit(0x20);
    41b4:	80 e2       	ldi	r24, 0x20	; 32
    41b6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <I2C_voidSlaveInit>

    LCD_voidWriteString("Waiting...");
    41ba:	80 e6       	ldi	r24, 0x60	; 96
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_voidWriteString>
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	aa e7       	ldi	r26, 0x7A	; 122
    41c8:	b4 e4       	ldi	r27, 0x44	; 68
    41ca:	8b 87       	std	Y+11, r24	; 0x0b
    41cc:	9c 87       	std	Y+12, r25	; 0x0c
    41ce:	ad 87       	std	Y+13, r26	; 0x0d
    41d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	4a ef       	ldi	r20, 0xFA	; 250
    41e0:	54 e4       	ldi	r21, 0x44	; 68
    41e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	8f 83       	std	Y+7, r24	; 0x07
    41ec:	98 87       	std	Y+8, r25	; 0x08
    41ee:	a9 87       	std	Y+9, r26	; 0x09
    41f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41f2:	6f 81       	ldd	r22, Y+7	; 0x07
    41f4:	78 85       	ldd	r23, Y+8	; 0x08
    41f6:	89 85       	ldd	r24, Y+9	; 0x09
    41f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e8       	ldi	r20, 0x80	; 128
    4200:	5f e3       	ldi	r21, 0x3F	; 63
    4202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4206:	88 23       	and	r24, r24
    4208:	2c f4       	brge	.+10     	; 0x4214 <main+0x7a>
		__ticks = 1;
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	3f c0       	rjmp	.+126    	; 0x4292 <main+0xf8>
	else if (__tmp > 65535)
    4214:	6f 81       	ldd	r22, Y+7	; 0x07
    4216:	78 85       	ldd	r23, Y+8	; 0x08
    4218:	89 85       	ldd	r24, Y+9	; 0x09
    421a:	9a 85       	ldd	r25, Y+10	; 0x0a
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	3f ef       	ldi	r19, 0xFF	; 255
    4220:	4f e7       	ldi	r20, 0x7F	; 127
    4222:	57 e4       	ldi	r21, 0x47	; 71
    4224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4228:	18 16       	cp	r1, r24
    422a:	4c f5       	brge	.+82     	; 0x427e <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422c:	6b 85       	ldd	r22, Y+11	; 0x0b
    422e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4230:	8d 85       	ldd	r24, Y+13	; 0x0d
    4232:	9e 85       	ldd	r25, Y+14	; 0x0e
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	40 e2       	ldi	r20, 0x20	; 32
    423a:	51 e4       	ldi	r21, 0x41	; 65
    423c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4240:	dc 01       	movw	r26, r24
    4242:	cb 01       	movw	r24, r22
    4244:	bc 01       	movw	r22, r24
    4246:	cd 01       	movw	r24, r26
    4248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424c:	dc 01       	movw	r26, r24
    424e:	cb 01       	movw	r24, r22
    4250:	9e 83       	std	Y+6, r25	; 0x06
    4252:	8d 83       	std	Y+5, r24	; 0x05
    4254:	0f c0       	rjmp	.+30     	; 0x4274 <main+0xda>
    4256:	88 ec       	ldi	r24, 0xC8	; 200
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	9c 83       	std	Y+4, r25	; 0x04
    425c:	8b 83       	std	Y+3, r24	; 0x03
    425e:	8b 81       	ldd	r24, Y+3	; 0x03
    4260:	9c 81       	ldd	r25, Y+4	; 0x04
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <main+0xc8>
    4266:	9c 83       	std	Y+4, r25	; 0x04
    4268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426a:	8d 81       	ldd	r24, Y+5	; 0x05
    426c:	9e 81       	ldd	r25, Y+6	; 0x06
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	9e 83       	std	Y+6, r25	; 0x06
    4272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4274:	8d 81       	ldd	r24, Y+5	; 0x05
    4276:	9e 81       	ldd	r25, Y+6	; 0x06
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	69 f7       	brne	.-38     	; 0x4256 <main+0xbc>
    427c:	14 c0       	rjmp	.+40     	; 0x42a6 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427e:	6f 81       	ldd	r22, Y+7	; 0x07
    4280:	78 85       	ldd	r23, Y+8	; 0x08
    4282:	89 85       	ldd	r24, Y+9	; 0x09
    4284:	9a 85       	ldd	r25, Y+10	; 0x0a
    4286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	9e 83       	std	Y+6, r25	; 0x06
    4290:	8d 83       	std	Y+5, r24	; 0x05
    4292:	8d 81       	ldd	r24, Y+5	; 0x05
    4294:	9e 81       	ldd	r25, Y+6	; 0x06
    4296:	9a 83       	std	Y+2, r25	; 0x02
    4298:	89 83       	std	Y+1, r24	; 0x01
    429a:	89 81       	ldd	r24, Y+1	; 0x01
    429c:	9a 81       	ldd	r25, Y+2	; 0x02
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <main+0x104>
    42a2:	9a 83       	std	Y+2, r25	; 0x02
    42a4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    LCD_voidClearDisplay();
    42a6:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <LCD_voidClearDisplay>

    while (1)
    {
        i = 0;
    42aa:	1f 86       	std	Y+15, r1	; 0x0f
        if (I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK() == I2C_NO_Error)
    42ac:	0e 94 c1 0c 	call	0x1982	; 0x1982 <I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK>
    42b0:	88 23       	and	r24, r24
    42b2:	d9 f7       	brne	.-10     	; 0x42aa <main+0x110>
    42b4:	13 c0       	rjmp	.+38     	; 0x42dc <main+0x142>
        {
            while (i < 6)  // استقبل فقط 6 حروف
            {
                if (I2C_SLAVE_u8DataByteRecieved_ACK(&data) == I2C_NO_Error)
    42b6:	ce 01       	movw	r24, r28
    42b8:	47 96       	adiw	r24, 0x17	; 23
    42ba:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <I2C_SLAVE_u8DataByteRecieved_ACK>
    42be:	88 23       	and	r24, r24
    42c0:	69 f4       	brne	.+26     	; 0x42dc <main+0x142>
                {
                    name[i++] = data;
    42c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	4f 89       	ldd	r20, Y+23	; 0x17
    42ca:	ce 01       	movw	r24, r28
    42cc:	40 96       	adiw	r24, 0x10	; 16
    42ce:	fc 01       	movw	r30, r24
    42d0:	e2 0f       	add	r30, r18
    42d2:	f3 1f       	adc	r31, r19
    42d4:	40 83       	st	Z, r20
    42d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42d8:	8f 5f       	subi	r24, 0xFF	; 255
    42da:	8f 87       	std	Y+15, r24	; 0x0f
    while (1)
    {
        i = 0;
        if (I2C_SLAVE_u8OwnSLA_Write_Recieved_ACK() == I2C_NO_Error)
        {
            while (i < 6)  // استقبل فقط 6 حروف
    42dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42de:	86 30       	cpi	r24, 0x06	; 6
    42e0:	50 f3       	brcs	.-44     	; 0x42b6 <main+0x11c>
                {
                    name[i++] = data;
                }
            }

            name[i] = '\0';  // نهاية السلسلة
    42e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e4:	28 2f       	mov	r18, r24
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	ce 01       	movw	r24, r28
    42ea:	40 96       	adiw	r24, 0x10	; 16
    42ec:	fc 01       	movw	r30, r24
    42ee:	e2 0f       	add	r30, r18
    42f0:	f3 1f       	adc	r31, r19
    42f2:	10 82       	st	Z, r1
            LCD_voidClearDisplay();
    42f4:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <LCD_voidClearDisplay>
            LCD_voidWriteString(name);  // اطبع الاسم مرة واحدة
    42f8:	ce 01       	movw	r24, r28
    42fa:	40 96       	adiw	r24, 0x10	; 16
    42fc:	0e 94 0e 1c 	call	0x381c	; 0x381c <LCD_voidWriteString>
    4300:	d4 cf       	rjmp	.-88     	; 0x42aa <main+0x110>

00004302 <__mulsi3>:
    4302:	62 9f       	mul	r22, r18
    4304:	d0 01       	movw	r26, r0
    4306:	73 9f       	mul	r23, r19
    4308:	f0 01       	movw	r30, r0
    430a:	82 9f       	mul	r24, r18
    430c:	e0 0d       	add	r30, r0
    430e:	f1 1d       	adc	r31, r1
    4310:	64 9f       	mul	r22, r20
    4312:	e0 0d       	add	r30, r0
    4314:	f1 1d       	adc	r31, r1
    4316:	92 9f       	mul	r25, r18
    4318:	f0 0d       	add	r31, r0
    431a:	83 9f       	mul	r24, r19
    431c:	f0 0d       	add	r31, r0
    431e:	74 9f       	mul	r23, r20
    4320:	f0 0d       	add	r31, r0
    4322:	65 9f       	mul	r22, r21
    4324:	f0 0d       	add	r31, r0
    4326:	99 27       	eor	r25, r25
    4328:	72 9f       	mul	r23, r18
    432a:	b0 0d       	add	r27, r0
    432c:	e1 1d       	adc	r30, r1
    432e:	f9 1f       	adc	r31, r25
    4330:	63 9f       	mul	r22, r19
    4332:	b0 0d       	add	r27, r0
    4334:	e1 1d       	adc	r30, r1
    4336:	f9 1f       	adc	r31, r25
    4338:	bd 01       	movw	r22, r26
    433a:	cf 01       	movw	r24, r30
    433c:	11 24       	eor	r1, r1
    433e:	08 95       	ret

00004340 <__udivmodhi4>:
    4340:	aa 1b       	sub	r26, r26
    4342:	bb 1b       	sub	r27, r27
    4344:	51 e1       	ldi	r21, 0x11	; 17
    4346:	07 c0       	rjmp	.+14     	; 0x4356 <__udivmodhi4_ep>

00004348 <__udivmodhi4_loop>:
    4348:	aa 1f       	adc	r26, r26
    434a:	bb 1f       	adc	r27, r27
    434c:	a6 17       	cp	r26, r22
    434e:	b7 07       	cpc	r27, r23
    4350:	10 f0       	brcs	.+4      	; 0x4356 <__udivmodhi4_ep>
    4352:	a6 1b       	sub	r26, r22
    4354:	b7 0b       	sbc	r27, r23

00004356 <__udivmodhi4_ep>:
    4356:	88 1f       	adc	r24, r24
    4358:	99 1f       	adc	r25, r25
    435a:	5a 95       	dec	r21
    435c:	a9 f7       	brne	.-22     	; 0x4348 <__udivmodhi4_loop>
    435e:	80 95       	com	r24
    4360:	90 95       	com	r25
    4362:	bc 01       	movw	r22, r24
    4364:	cd 01       	movw	r24, r26
    4366:	08 95       	ret

00004368 <__udivmodsi4>:
    4368:	a1 e2       	ldi	r26, 0x21	; 33
    436a:	1a 2e       	mov	r1, r26
    436c:	aa 1b       	sub	r26, r26
    436e:	bb 1b       	sub	r27, r27
    4370:	fd 01       	movw	r30, r26
    4372:	0d c0       	rjmp	.+26     	; 0x438e <__udivmodsi4_ep>

00004374 <__udivmodsi4_loop>:
    4374:	aa 1f       	adc	r26, r26
    4376:	bb 1f       	adc	r27, r27
    4378:	ee 1f       	adc	r30, r30
    437a:	ff 1f       	adc	r31, r31
    437c:	a2 17       	cp	r26, r18
    437e:	b3 07       	cpc	r27, r19
    4380:	e4 07       	cpc	r30, r20
    4382:	f5 07       	cpc	r31, r21
    4384:	20 f0       	brcs	.+8      	; 0x438e <__udivmodsi4_ep>
    4386:	a2 1b       	sub	r26, r18
    4388:	b3 0b       	sbc	r27, r19
    438a:	e4 0b       	sbc	r30, r20
    438c:	f5 0b       	sbc	r31, r21

0000438e <__udivmodsi4_ep>:
    438e:	66 1f       	adc	r22, r22
    4390:	77 1f       	adc	r23, r23
    4392:	88 1f       	adc	r24, r24
    4394:	99 1f       	adc	r25, r25
    4396:	1a 94       	dec	r1
    4398:	69 f7       	brne	.-38     	; 0x4374 <__udivmodsi4_loop>
    439a:	60 95       	com	r22
    439c:	70 95       	com	r23
    439e:	80 95       	com	r24
    43a0:	90 95       	com	r25
    43a2:	9b 01       	movw	r18, r22
    43a4:	ac 01       	movw	r20, r24
    43a6:	bd 01       	movw	r22, r26
    43a8:	cf 01       	movw	r24, r30
    43aa:	08 95       	ret

000043ac <__prologue_saves__>:
    43ac:	2f 92       	push	r2
    43ae:	3f 92       	push	r3
    43b0:	4f 92       	push	r4
    43b2:	5f 92       	push	r5
    43b4:	6f 92       	push	r6
    43b6:	7f 92       	push	r7
    43b8:	8f 92       	push	r8
    43ba:	9f 92       	push	r9
    43bc:	af 92       	push	r10
    43be:	bf 92       	push	r11
    43c0:	cf 92       	push	r12
    43c2:	df 92       	push	r13
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	cd b7       	in	r28, 0x3d	; 61
    43d2:	de b7       	in	r29, 0x3e	; 62
    43d4:	ca 1b       	sub	r28, r26
    43d6:	db 0b       	sbc	r29, r27
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	09 94       	ijmp

000043e4 <__epilogue_restores__>:
    43e4:	2a 88       	ldd	r2, Y+18	; 0x12
    43e6:	39 88       	ldd	r3, Y+17	; 0x11
    43e8:	48 88       	ldd	r4, Y+16	; 0x10
    43ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    43ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    43f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    43f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    43f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    43f6:	b9 84       	ldd	r11, Y+9	; 0x09
    43f8:	c8 84       	ldd	r12, Y+8	; 0x08
    43fa:	df 80       	ldd	r13, Y+7	; 0x07
    43fc:	ee 80       	ldd	r14, Y+6	; 0x06
    43fe:	fd 80       	ldd	r15, Y+5	; 0x05
    4400:	0c 81       	ldd	r16, Y+4	; 0x04
    4402:	1b 81       	ldd	r17, Y+3	; 0x03
    4404:	aa 81       	ldd	r26, Y+2	; 0x02
    4406:	b9 81       	ldd	r27, Y+1	; 0x01
    4408:	ce 0f       	add	r28, r30
    440a:	d1 1d       	adc	r29, r1
    440c:	0f b6       	in	r0, 0x3f	; 63
    440e:	f8 94       	cli
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	cd bf       	out	0x3d, r28	; 61
    4416:	ed 01       	movw	r28, r26
    4418:	08 95       	ret

0000441a <_exit>:
    441a:	f8 94       	cli

0000441c <__stop_program>:
    441c:	ff cf       	rjmp	.-2      	; 0x441c <__stop_program>
